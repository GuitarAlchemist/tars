namespace TarsEngine.FSharp.Cli.Commands

open System
open System.IO
open System.Threading.Tasks
open Microsoft.Extensions.Logging

/// Enhanced project creation command with comprehensive documentation and run scripts
type CreateProjectCommand(logger: ILogger<CreateProjectCommand>) =
    interface ICommand with
        member _.Name = "create-project"
        member _.Description = "Create complete projects from single prompts with docs and run scripts"
        member _.Usage = "tars create-project \"<description>\" [options]"
        member _.Examples = [
            "tars create-project \"file backup system with encryption\""
            "tars create-project \"REST API for user management\""
            "tars create-project \"simple calculator web app\""
            "tars create-project \"todo list with database\""
        ]
        member _.ValidateOptions(_) = true
        
        member _.ExecuteAsync(options) =
            task {
                try
                    match options.Arguments with
                    | prompt :: _ ->
                        let fullPrompt = String.concat " " options.Arguments
                        
                        printfn "🚀 TARS ENHANCED PROJECT CREATION"
                        printfn "================================="
                        printfn "Prompt: %s" fullPrompt
                        printfn ""
                        
                        // Generate project name
                        let projectName = 
                            fullPrompt.ToLower()
                                .Replace(" ", "_")
                                .Replace("-", "_")
                            + "_" + DateTime.Now.ToString("yyyyMMdd_HHmmss")
                        
                        let projectPath = Path.Combine(".tars", "projects", projectName)
                        
                        printfn "📁 Creating project: %s" projectName
                        printfn "📂 Location: %s" projectPath
                        printfn ""
                        
                        // Create project structure
                        Directory.CreateDirectory(projectPath) |> ignore
                        Directory.CreateDirectory(Path.Combine(projectPath, "src")) |> ignore
                        Directory.CreateDirectory(Path.Combine(projectPath, "docs")) |> ignore
                        Directory.CreateDirectory(Path.Combine(projectPath, "tests")) |> ignore
                        
                        // Determine project type
                        let projectType = 
                            if fullPrompt.Contains("web") || fullPrompt.Contains("app") then "web"
                            elif fullPrompt.Contains("api") || fullPrompt.Contains("rest") then "api"
                            else "console"
                        
                        printfn "🎯 Detected project type: %s" projectType
                        
                        // Generate comprehensive README
                        let readme = sprintf \"\"\"# %s

**Generated by TARS Enhanced Project Creation** | **%s**

## 🎯 Overview
%s

**Project Type**: %s  
**Generated from prompt**: \"%s\"

## 🚀 Quick Start

### Option 1: One-Click Run
`ash
# Simply double-click or run:
run.cmd
`

### Option 2: Manual Setup
`ash
# Navigate to project directory
cd %s

# Install dependencies (if applicable)
npm install

# Run the application
npm start
`

## 📁 Project Structure
`
%s/
├── src/                 # Source code
├── docs/               # Documentation
├── tests/              # Test files
├── run.cmd             # Quick run script
├── package.json        # Dependencies
└── README.md           # This file
`

## ✨ Features
- ✅ Generated from natural language prompt
- ✅ Complete project structure
- ✅ Ready-to-run configuration
- ✅ Comprehensive documentation
- ✅ One-click execution with run.cmd

## 🛠️ Development
This project was generated by TARS autonomous system and includes:
- Source code scaffolding
- Documentation templates
- Run scripts for easy execution
- Test framework setup

## 📖 Documentation
- [Setup Guide](docs/SETUP.md) - Detailed installation
- [User Guide](docs/USER_GUIDE.md) - How to use
- [Developer Guide](docs/DEVELOPER_GUIDE.md) - Development info

## 🧪 Testing
`ash
# Run tests
npm test
`

---
**🤖 Autonomously generated by TARS** | **%s**
\"\"\" projectName (DateTime.Now.ToString("yyyy-MM-dd")) fullPrompt projectType fullPrompt projectName projectName (DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"))
                        
                        File.WriteAllText(Path.Combine(projectPath, "README.md"), readme)
                        
                        // Generate run.cmd script
                        let runScript = sprintf \"\"\"@echo off
echo 🚀 TARS Project Launcher: %s
echo ================================
echo.

echo 📦 Checking prerequisites...
%s

echo.
echo ✅ Prerequisites checked
echo.

echo 🌐 Starting %s...
echo 📍 Project type: %s
echo.

%s

echo.
echo 🎉 Project started successfully!
pause
\"\"\" projectName
                            (match projectType with
                             | "web" | "api" -> \"\"\"node --version >nul 2>&1
if %errorlevel% neq 0 (
    echo ❌ Node.js not found! Install from https://nodejs.org/
    pause
    exit /b 1
)
echo ✅ Node.js found\"\"\"
                             | _ -> \"\"\"echo ✅ No special prerequisites required\"\"\")
                            projectName projectType
                            (match projectType with
                             | "web" -> \"\"\"if not exist package.json (
    echo Creating package.json...
    echo {\"name\": \"%s\", \"version\": \"1.0.0\", \"scripts\": {\"start\": \"npx live-server src --port=3000\"}} > package.json
)

call npm install --silent
start http://localhost:3000
call npx live-server src --port=3000\"\"\"
                             | "api" -> \"\"\"if not exist package.json (
    echo Creating package.json...
    echo {\"name\": \"%s\", \"version\": \"1.0.0\", \"main\": \"src/server.js\", \"scripts\": {\"start\": \"node src/server.js\"}, \"dependencies\": {\"express\": \"^4.18.0\"}} > package.json
)

call npm install --silent
echo 📡 API will be available at: http://localhost:3000
call npm start\"\"\"
                             | _ -> \"\"\"echo 📋 Console application ready
echo ✅ Project created successfully!
echo 📂 Navigate to: %s
echo 📚 Read README.md for more information\"\"\")
                        
                        File.WriteAllText(Path.Combine(projectPath, "run.cmd"), runScript)
                        
                        // Generate source files based on project type
                        match projectType with
                        | "web" ->
                            let html = sprintf \"\"\"<!DOCTYPE html>
<html lang=\"en\">
<head>
    <meta charset=\"UTF-8\">
    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">
    <title>%s</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
        .container { background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        h1 { color: #333; text-align: center; }
        .info { background: #e8f4fd; padding: 15px; border-radius: 5px; margin: 20px 0; }
    </style>
</head>
<body>
    <div class=\"container\">
        <h1>🤖 TARS Generated Project</h1>
        <div class=\"info\">
            <p><strong>Project:</strong> %s</p>
            <p><strong>Type:</strong> %s</p>
            <p><strong>Created:</strong> %s</p>
            <p><strong>Prompt:</strong> \"%s\"</p>
        </div>
        <p>✅ This project was created with TARS enhanced project creation!</p>
        <p>🚀 Features: Comprehensive documentation, run scripts, and ready-to-use structure.</p>
        <p>📚 Check the docs/ folder for detailed documentation.</p>
    </div>
</body>
</html>\"\"\" projectName projectName projectType (DateTime.Now.ToString()) fullPrompt
                            
                            File.WriteAllText(Path.Combine(projectPath, "src", "index.html"), html)
                            
                        | "api" ->
                            let server = sprintf \"\"\"// TARS Generated API Server
// Project: %s
// Created: %s

const express = require('express');
const app = express();
const port = process.env.PORT || 3000;

// Middleware
app.use(express.json());

// Routes
app.get('/', (req, res) => {
    res.json({
        message: 'TARS Generated API',
        project: '%s',
        type: '%s',
        status: 'operational',
        created: '%s'
    });
});

app.get('/health', (req, res) => {
    res.json({ status: 'healthy', timestamp: new Date().toISOString() });
});

// Start server
app.listen(port, () => {
    console.log(🚀 TARS API Server running on port );
    console.log(📡 Health check: http://localhost:/health);
});

module.exports = app;\"\"\" projectName (DateTime.Now.ToString()) projectName projectType (DateTime.Now.ToString())
                            
                            File.WriteAllText(Path.Combine(projectPath, "src", "server.js"), server)
                            
                        | _ ->
                            let console = sprintf \"\"\"// TARS Generated Console Application
// Project: %s
// Created: %s

using System;

namespace %s
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine(\"🤖 TARS Generated Application\");
            Console.WriteLine(\"============================\");
            Console.WriteLine(\"Project: %s\");
            Console.WriteLine(\"Type: %s\");
            Console.WriteLine(\"Generated from: %s\");
            Console.WriteLine();
            Console.WriteLine(\"✅ Application running successfully!\");
            
            Console.WriteLine(\"Press any key to exit...\");
            Console.ReadKey();
        }
    }
}\"\"\" projectName (DateTime.Now.ToString()) (projectName.Replace("_", "").Replace("-", "")) projectName projectType fullPrompt
                            
                            File.WriteAllText(Path.Combine(projectPath, "src", "Program.cs"), console)
                        
                        // Create documentation files
                        let setupDoc = \"\"\"# Setup Guide

## Prerequisites
- Node.js (for web/API projects)
- .NET (for console applications)
- Modern web browser

## Quick Setup
1. Run the project: un.cmd
2. Follow the on-screen instructions

## Manual Setup
1. Navigate to project directory
2. Install dependencies: 
pm install (if applicable)
3. Start application: 
pm start or run executable

Generated by TARS Enhanced Project Creation
\"\"\"
                        
                        File.WriteAllText(Path.Combine(projectPath, "docs", "SETUP.md"), setupDoc)
                        
                        printfn \"\"\"
✅ PROJECT CREATION COMPLETE!
=============================
📁 Project: %s
📂 Location: %s
🚀 To run: cd %s && run.cmd
📚 Documentation: %s/docs/
📄 Files created:
   ✅ README.md - Comprehensive documentation
   ✅ run.cmd - One-click execution script
   ✅ Source code - Ready-to-run application
   ✅ docs/ - Setup and user guides

🎉 Enhanced project with full documentation and run scripts!\"\"\" projectName projectPath projectPath projectPath
                        
                        return CommandResult.success("Enhanced project created successfully")
                    
                    | [] ->
                        printfn \"\"\"❌ Error: Please provide a project description

Usage: tars create-project \"<description>\"

Examples:
  tars create-project \"file backup system\"
  tars create-project \"REST API for users\"
  tars create-project \"calculator web app\"\"\"\"
                        
                        return CommandResult.error("No project description provided")
                        
                with
                | ex ->
                    logger.LogError(ex, "Failed to create project")
                    return CommandResult.error($"Project creation failed: {ex.Message}")
            }
