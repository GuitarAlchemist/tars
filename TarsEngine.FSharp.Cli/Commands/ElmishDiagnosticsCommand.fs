namespace TarsEngine.FSharp.Cli.Commands

open System
open System.IO
open System.Threading.Tasks
open Microsoft.Extensions.Logging
open TarsEngine.FSharp.Cli.Commands
open TarsEngine.FSharp.Cli.Diagnostics.TarsRealDiagnostics
open TarsEngine.FSharp.Cli.UI.ElmishRuntime

/// COMPREHENSIVE TARS ELMISH DIAGNOSTICS - Uses Full TarsElmishDiagnostics Module

type ElmishDiagnosticsCommand(logger: ILogger<ElmishDiagnosticsCommand>) =

    interface ICommand with
        member _.Name = "elmish-diagnostics"
        member _.Description = "Pure Elmish MVU diagnostics with functional reactive programming"
        member _.Usage = "tars elmish-diagnostics [options]"
        member _.Examples = [
            "tars elmish-diagnostics"
            "tars elmish-diagnostics --auto-refresh false"
            "tars elmish-diagnostics --view gpu"
        ]
        member _.ValidateOptions(_) = true
        
        member _.ExecuteAsync(options: CommandOptions) =
            task {
                try
                    logger.LogInformation("üöÄ Starting Pure Elmish Diagnostics...")
                    logger.LogInformation("‚ö° Initializing MVU (Model-View-Update) architecture")
                    
                    // Generate COMPREHENSIVE TARS DIAGNOSTICS with enhanced styling
                    logger.LogInformation("üß† Loading ALL comprehensive TARS subsystems with enhanced UI...")
                    let (comprehensiveHtml, updateFunction, tarsModel) = runElmishProgram ()
                    logger.LogInformation("üìä Model initialized with {SubsystemCount} TARS subsystems", tarsModel.AllSubsystems.Length)

                    // Load real diagnostics data (for additional system info)
                    logger.LogInformation("üîç Loading real system diagnostics...")
                    let! diagnostics = getComprehensiveDiagnostics Environment.CurrentDirectory
                    logger.LogInformation("‚úÖ Diagnostics loaded into Elmish model")

                    // Use comprehensive HTML with ALL enhanced styling and navigation
                    logger.LogInformation("üé® Using comprehensive TARS HTML with enhanced styling...")
                    let htmlContent = comprehensiveHtml
                    
                    // Save comprehensive HTML with enhanced styling
                    let tempPath = Path.Combine(Path.GetTempPath(), "tars-comprehensive-enhanced-diagnostics.html")
                    do! File.WriteAllTextAsync(tempPath, htmlContent)

                    logger.LogInformation("‚úÖ COMPREHENSIVE TARS DIAGNOSTICS WITH ENHANCED STYLING GENERATED!")
                    logger.LogInformation("üìÇ File: {TempPath}", tempPath)
                    logger.LogInformation("üåê Opening enhanced TARS diagnostics in browser...")
                    
                    // Open in browser
                    try
                        let psi = System.Diagnostics.ProcessStartInfo(tempPath, UseShellExecute = true)
                        System.Diagnostics.Process.Start(psi) |> ignore
                        logger.LogInformation("üåê Browser opened successfully!")
                    with
                    | ex -> logger.LogWarning("‚ö†Ô∏è Could not open browser: {Error}", ex.Message)
                    
                    // Show ALL comprehensive TARS subsystems
                    logger.LogInformation("")
                    logger.LogInformation("üß† COMPREHENSIVE TARS SUBSYSTEMS LOADED:")
                    logger.LogInformation("   üî¢ Total Subsystems: {Count}", tarsModel.AllSubsystems.Length)
                    logger.LogInformation("   ‚ö° Overall TARS Health: {Health:F1}%", tarsModel.OverallTarsHealth)
                    logger.LogInformation("   ü§ñ Active Agents: {Agents}", tarsModel.ActiveAgents)
                    logger.LogInformation("   ‚öôÔ∏è Processing Tasks: {Tasks}", tarsModel.ProcessingTasks)

                    logger.LogInformation("")
                    logger.LogInformation("üîç ALL TARS SUBSYSTEMS:")
                    for subsystem in tarsModel.AllSubsystems do
                        let statusEmoji =
                            match subsystem.Status with
                            | TarsEngine.FSharp.Cli.UI.TarsElmishDiagnostics.Operational -> "‚úÖ"
                            | TarsEngine.FSharp.Cli.UI.TarsElmishDiagnostics.Evolving -> "üîÑ"
                            | _ -> "‚ö†Ô∏è"
                        logger.LogInformation("   {StatusEmoji} {Name}: {Health:F1}% ({Components} components)",
                            statusEmoji, subsystem.Name, subsystem.HealthPercentage, subsystem.ActiveComponents)

                    logger.LogInformation("")
                    logger.LogInformation("üé® ENHANCED UI FEATURES:")
                    logger.LogInformation("   üß≠ Navigation Sidebar with all subsystems")
                    logger.LogInformation("   üìä Real-time health monitoring")
                    logger.LogInformation("   ‚ö° Performance metrics for each subsystem")
                    logger.LogInformation("   üèóÔ∏è System architecture visualization")
                    logger.LogInformation("   üéõÔ∏è Interactive controls and settings")
                    logger.LogInformation("   üé® Enhanced styling with backdrop blur and animations")
                    logger.LogInformation("   üåà Professional dark theme with TARS branding")
                    logger.LogInformation("   ‚ö° Performance metrics for each subsystem")
                    logger.LogInformation("   üèóÔ∏è System architecture visualization")
                    logger.LogInformation("   üéõÔ∏è Interactive controls and settings")
                    
                    logger.LogInformation("")
                    logger.LogInformation("üí° Press any key to continue...")
                    Console.ReadKey() |> ignore
                    
                    return { Success = true; Message = "Elmish diagnostics completed successfully"; ExitCode = 0 }
                    
                with
                | ex ->
                    logger.LogError(ex, "‚ùå Elmish diagnostics failed")
                    return { Success = false; Message = sprintf "Elmish diagnostics failed: %s" ex.Message; ExitCode = 1 }
            }
