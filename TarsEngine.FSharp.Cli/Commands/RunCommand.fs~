namespace TarsEngine.FSharp.Cli.Commands

open System
open System.IO
open System.Threading.Tasks
open Microsoft.Extensions.Logging
open TarsEngine.FSharp.Core.Compilation

/// <summary>
/// Command for running F# code.
/// </summary>
type RunCommand(logger: ILogger<RunCommand>, compiler: IFSharpCompiler) =
    inherit CommandBase(logger)
    
    override _.Name = "run"
    
    override _.Description = "Runs F# code."
    
    override _.Usage = "tars run <file>"
    
    override _.Examples = [
        "tars run script.fsx"
    ]
    
    override _.ValidateOptions(options: CommandOptions) =
        options.Arguments.Length = 1
    
    override this.ExecuteAsync(options: CommandOptions) =
        Task.Run(fun () ->
            try
                this.LogDebug("Executing run command")
                
                if not (this.ValidateOptions(options)) then
                    CommandResult.createFailure 1 "Invalid options. Usage: tars run <file>"
                else
                    let filePath = options.Arguments.[0]
                    
                    // Check if the file exists
                    if not (System.IO.File.Exists(filePath)) then
                        CommandResult.createFailure 1 $"File not found: {filePath}"
                    else
                        // Read the file
                        let code = System.IO.File.ReadAllText(filePath)
                        
                        // Create a temporary directory for the script
                        let tempDir = Path.Combine(Path.GetTempPath(), Guid.NewGuid().ToString())
                        Directory.CreateDirectory(tempDir) |> ignore
                        
                        // Create a temporary file for the code
                        let tempFile = Path.Combine(tempDir, Path.GetFileName(filePath))
                        File.WriteAllText(tempFile, code)
                        
                        // Create a temporary project file
                        let projectFile = Path.Combine(tempDir, "TempProject.fsproj")
                        let projectContent = """
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <OutputType>Exe</OutputType>
  </PropertyGroup>
  <ItemGroup>
    <Compile Include="script.fsx" />
  </ItemGroup>
</Project>
"""
                        File.WriteAllText(projectFile, projectContent.Replace("script.fsx", Path.GetFileName(tempFile)))
                        
                        // Build the project
                        this.LogInformation("Building script: {FilePath}", filePath)
                        
                        // Create the build process
                        let buildPsi = new System.Diagnostics.ProcessStartInfo()
                        buildPsi.FileName <- "dotnet"
                        buildPsi.Arguments <- "build " + projectFile
                        buildPsi.RedirectStandardOutput <- true
                        buildPsi.RedirectStandardError <- true
                        buildPsi.UseShellExecute <- false
                        buildPsi.CreateNoWindow <- true
                        buildPsi.WorkingDirectory <- tempDir
                        
                        // Start the build process
                        let buildProc = System.Diagnostics.Process.Start(buildPsi)
                        let buildOutput = buildProc.StandardOutput.ReadToEnd()
                        let buildError = buildProc.StandardError.ReadToEnd()
                        buildProc.WaitForExit()
                        
                        // Check if the build was successful
                        if buildProc.ExitCode = 0 then
                            // Find the output file
                            let outputDir = Path.Combine(tempDir, "bin", "Debug", "net9.0")
                            let outputFile = Path.Combine(outputDir, "TempProject.dll")
                            
                            // Run the script
                            this.LogInformation("Running script: {FilePath}", filePath)
                            
                            // Create the run process
                            let runPsi = new System.Diagnostics.ProcessStartInfo()
                            runPsi.FileName <- "dotnet"
                            runPsi.Arguments <- outputFile
                            runPsi.RedirectStandardOutput <- true
                            runPsi.RedirectStandardError <- true
                            runPsi.UseShellExecute <- false
                            runPsi.CreateNoWindow <- true
                            runPsi.WorkingDirectory <- Directory.GetCurrentDirectory()
                            
                            // Start the run process
                            let runProc = System.Diagnostics.Process.Start(runPsi)
                            let runOutput = runProc.StandardOutput.ReadToEnd()
                            let runError = runProc.StandardError.ReadToEnd()
                            runProc.WaitForExit()
                            
                            // Check if the run was successful
                            if runProc.ExitCode = 0 then
                                this.LogInformation("Script executed successfully")
                                CommandResult.createSuccess runOutput
                            else
                                let errorMessage = 
                                    if not (String.IsNullOrEmpty(runError)) then
                                        runError
                                    elif not (String.IsNullOrEmpty(runOutput)) then
                                        runOutput
                                    else
                                        "Unknown script execution error"
                                
                                this.LogError("Script execution failed: {Errors}", errorMessage)
                                CommandResult.createFailure 1 $"Script execution failed: {errorMessage}"
                        else
                            let errorMessage = 
                                if not (String.IsNullOrEmpty(buildError)) then
                                    buildError
                                elif not (String.IsNullOrEmpty(buildOutput)) then
                                    buildOutput
                                else
                                    "Unknown build error"
                            
                            this.LogError("Script build failed: {Errors}", errorMessage)
                            CommandResult.createFailure 1 $"Script build failed: {errorMessage}"
            with
            | ex ->
                this.LogError("Error executing run command: {0}", ex.Message)
                CommandResult.createFailure 1 $"Error: {ex.Message}"
        )
