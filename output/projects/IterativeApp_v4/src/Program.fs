namespace IterativeApp_v4

open System

module Program =
    
    let printWelcome() =
        printfn "Welcome to IterativeApp_v4!"
        printfn "Generated by TARS Enhanced Project Generator"
        printfn "Timestamp: %s" (DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"))
        printfn ""
    
    let processCommand (command: string) =
        match command.ToLower().Trim() with
        | "help" | "h" ->
            printfn "Available commands:"
            printfn "  help, h     - Show this help"
            printfn "  version, v  - Show version"
            printfn "  status, s   - Show status"
            printfn "  quit, q     - Exit application"
        | "version" | "v" ->
            printfn "IterativeApp_v4 v1.0.0"
            printfn "Built with F# and TARS"
        | "status" | "s" ->
            printfn "Status: Running"
            printfn "Memory: %d MB" (GC.GetTotalMemory(false) / 1024L / 1024L)
        | "quit" | "q" ->
            printfn "Goodbye!"
            Environment.Exit(0)
        | "" ->
            () // Empty command, do nothing
        | _ ->
            printfn "Unknown command: %s" command
            printfn "Type 'help' for available commands"
    
    [<EntryPoint>]
    let main args =
        try
            printWelcome()
            
            if args.Length > 0 then
                // Process command line arguments
                let command = String.Join(" ", args)
                processCommand command
            else
                // Interactive mode
                printfn "Interactive mode. Type 'help' for commands, 'quit' to exit."
                
                let mutable running = true
                while running do
                    printf "> "
                    let input = Console.ReadLine()
                    if input = null || input.ToLower() = "quit" then
                        running <- false
                        printfn "Goodbye!"
                    else
                        processCommand input
            
            0
        with
        | ex ->
            printfn "Error: %s" ex.Message
            1
