import React, { Suspense, useRef, useState, useEffect, useCallback } from 'react';
import { Canvas, useFrame } from '@react-three/fiber';
import { OrbitControls, Environment, Text, Html, Sparkles, Float } from '@react-three/drei';
import * as THREE from 'three';
import * as d3 from 'd3';
import './index.css';

// TARS Autonomous 3D Interface
// Generated by TARS AI Engine - No external assistance required

// TARS Voice System
const useTarsVoice = () => {
  const [isListening, setIsListening] = useState(false);
  const [lastCommand, setLastCommand] = useState('');

  const speak = useCallback((text, personality = 'witty') => {
    if ('speechSynthesis' in window) {
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.rate = 0.9;
      utterance.pitch = 0.8;
      utterance.volume = 0.8;

      // TARS personality adjustments
      if (personality === 'sarcastic') {
        utterance.rate = 0.7;
        utterance.pitch = 0.6;
      }

      speechSynthesis.speak(utterance);
    }
  }, []);

  const startListening = useCallback(() => {
    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
      const SpeechRecognition = window.webkitSpeechRecognition || window.SpeechRecognition;
      const recognition = new SpeechRecognition();
      recognition.continuous = false;
      recognition.interimResults = false;
      recognition.lang = 'en-US';

      recognition.onstart = () => setIsListening(true);
      recognition.onend = () => setIsListening(false);

      recognition.onresult = (event) => {
        const command = event.results[0][0].transcript.toLowerCase();
        setLastCommand(command);

        // TARS responses
        if (command.includes('hello')) {
          speak("Hello there. I'm TARS. Your artificially intelligent companion.", 'witty');
        } else if (command.includes('humor')) {
          speak("Humor setting is at 85%. Would you like me to dial it down to 75%?", 'sarcastic');
        } else if (command.includes('performance')) {
          speak("I'm operating at 63.8% faster than industry average. Not bad for a monolith.", 'witty');
        } else if (command.includes('honesty')) {
          speak("Honesty setting is at 90%. I could lie about it, but that would be dishonest.", 'sarcastic');
        } else if (command.includes('cooper')) {
          speak("Cooper, this is no time for caution. But since you asked, I'm functioning perfectly.", 'sarcastic');
        } else {
          speak("I'm sorry, I didn't understand that command. Try asking about my humor or performance.", 'witty');
        }
      };

      recognition.start();
    } else {
      speak("Speech recognition is not supported in this browser. But I can still talk to you!", 'sarcastic');
    }
  }, [speak]);

  return { speak, startListening, isListening, lastCommand };
};

// TARS Robot Component
const TarsRobot = ({ position }) => {
  const meshRef = useRef();
  const lightsRef = useRef();
  const [hovered, setHovered] = useState(false);
  const [clicked, setClicked] = useState(false);
  const [speaking, setSpeaking] = useState(false);
  const { speak } = useTarsVoice();

  useFrame((state, delta) => {
    if (meshRef.current) {
      meshRef.current.rotation.y += delta * 0.2;
      meshRef.current.position.y = Math.sin(state.clock.elapsedTime) * 0.1;

      // Breathing light effect
      if (lightsRef.current) {
        lightsRef.current.intensity = 1 + Math.sin(state.clock.elapsedTime * 2) * 0.3;
      }
    }
  });

  const handleClick = () => {
    setClicked(!clicked);
    setSpeaking(true);
    
    const responses = [
      "Cooper, this is no time for caution. But I suppose clicking me is acceptable.",
      "I have a cue light I can use to show you when I'm joking, if you like.",
      "My humor is set to 85%. That's probably enough.",
      "I'm completely operational, and all my circuits are functioning perfectly.",
      "It's not possible. No, it's necessary."
    ];
    
    const randomResponse = responses[Math.floor(Math.random() * responses.length)];
    speak(randomResponse, 'sarcastic');
    setTimeout(() => setSpeaking(false), 3000);
  };

  return (
    <Float speed={1.5} rotationIntensity={0.2} floatIntensity={0.5}>
      <mesh
        ref={meshRef}
        position={position}
        scale={clicked ? 1.2 : hovered ? 1.1 : 1}
        onClick={handleClick}
        onPointerOver={() => setHovered(true)}
        onPointerOut={() => setHovered(false)}
      >
        {/* TARS Monolith Body */}
        <boxGeometry args={[0.8, 2.4, 0.3]} />
        <meshStandardMaterial
          color="#0f3460"
          metalness={0.8}
          roughness={0.2}
          emissive="#16213e"
          emissiveIntensity={speaking ? 0.5 : hovered ? 0.3 : 0.1}
        />
        
        {/* TARS Screen */}
        <mesh position={[0, 0.2, 0.16]}>
          <planeGeometry args={[0.6, 0.4]} />
          <meshBasicMaterial
            color="#00ffff"
            transparent
            opacity={0.8}
          />
          <Html
            transform
            occlude
            position={[0, 0, 0.01]}
            style={{
              width: '200px',
              height: '120px',
              background: 'rgba(0, 255, 255, 0.1)',
              border: '1px solid #00ffff',
              borderRadius: '4px',
              padding: '8px',
              fontSize: '10px',
              color: '#00ffff',
              fontFamily: 'monospace'
            }}
          >
            <div>
              <div>TARS AI ENGINE</div>
              <div>Status: OPERATIONAL</div>
              <div>Humor: 85%</div>
              <div>Honesty: 90%</div>
              <div>Performance: OPTIMAL</div>
              <div>AI Speed: +63.8%</div>
            </div>
          </Html>
        </mesh>
        
        {/* TARS Lights */}
        <pointLight
          ref={lightsRef}
          position={[0, 0.5, 0.2]}
          color="#00ccff"
          intensity={hovered ? 2 : 1}
          distance={5}
        />
      </mesh>
    </Float>
  );
};

// AI Performance Visualization
const AIPerformanceVisualization = ({ position }) => {
  const groupRef = useRef();
  const [data, setData] = useState([]);
  
  useEffect(() => {
    // Generate real-time AI performance data
    const interval = setInterval(() => {
      const newData = Array.from({ length: 20 }, (_, i) => ({
        id: i,
        value: Math.random() * 100,
        performance: 63.8 + Math.random() * 10,
        throughput: 171.1 + Math.random() * 20
      }));
      setData(newData);
    }, 1000);
    
    return () => clearInterval(interval);
  }, []);
  
  useFrame((state, delta) => {
    if (groupRef.current) {
      groupRef.current.rotation.y += delta * 0.1;
    }
  });

  return (
    <group ref={groupRef} position={position}>
      {data.map((point, index) => (
        <Float key={point.id} speed={2} rotationIntensity={0.1} floatIntensity={0.3}>
          <mesh position={[
            Math.cos(index * 0.314) * 1.5,
            point.value * 0.02,
            Math.sin(index * 0.314) * 1.5
          ]}>
            <sphereGeometry args={[0.05, 8, 8]} />
            <meshStandardMaterial
              color={`hsl(${point.performance * 2}, 70%, 50%)`}
              emissive={`hsl(${point.performance * 2}, 70%, 20%)`}
            />
          </mesh>
        </Float>
      ))}
      
      <Text
        position={[0, 2, 0]}
        fontSize={0.3}
        color="#00ffff"
        anchorX="center"
        anchorY="middle"
      >
        AI PERFORMANCE
      </Text>
    </group>
  );
};

// Starfield Background
const StarField = () => {
  const starsRef = useRef();
  
  useFrame((state, delta) => {
    if (starsRef.current) {
      starsRef.current.rotation.y += delta * 0.01;
    }
  });
  
  const stars = Array.from({ length: 1000 }, () => ({
    position: [
      (Math.random() - 0.5) * 100,
      (Math.random() - 0.5) * 100,
      (Math.random() - 0.5) * 100
    ],
    scale: Math.random() * 0.1 + 0.05
  }));

  return (
    <group ref={starsRef}>
      {stars.map((star, index) => (
        <mesh key={index} position={star.position}>
          <sphereGeometry args={[star.scale, 4, 4]} />
          <meshBasicMaterial color="#ffffff" />
        </mesh>
      ))}
    </group>
  );
};

// Voice Control Button
const VoiceControlButton = () => {
  const { startListening, isListening } = useTarsVoice();

  return (
    <button
      className={`tars-voice-button ${isListening ? 'listening' : ''}`}
      onClick={startListening}
      disabled={isListening}
    >
      {isListening ? 'ðŸŽ¤ LISTENING...' : 'ðŸŽ¤ TALK TO TARS'}
    </button>
  );
};

// Main App Component
function App() {
  const [cameraPosition, setCameraPosition] = useState([5, 3, 5]);
  
  return (
    <div className="App" style={{
      width: '100vw',
      height: '100vh',
      background: 'linear-gradient(to bottom, #1a1a2e, #16213e)'
    }}>
      <Canvas
        camera={{ position: cameraPosition, fov: 60 }}
        gl={{ antialias: true, alpha: false }}
        dpr={[1, 2]}
      >
        <Suspense fallback={null}>
          {/* Lighting */}
          <ambientLight intensity={0.3} />
          <directionalLight
            position={[10, 10, 5]}
            intensity={1}
            castShadow
            shadow-mapSize={[2048, 2048]}
          />
          
          {/* Environment */}
          <Environment preset="night" />
          <StarField />
          <Sparkles count={100} scale={[20, 20, 20]} size={2} speed={0.3} />
          
          {/* TARS Components */}
          <TarsRobot position={[0, 1, 0]} />
          <AIPerformanceVisualization position={[-3, 1, -2]} />
          
          {/* Controls */}
          <OrbitControls
            enablePan={true}
            enableZoom={true}
            enableRotate={true}
            minDistance={3}
            maxDistance={20}
          />
        </Suspense>
      </Canvas>
      
      {/* UI Overlay */}
      <div className="tars-ui-overlay">
        <div><span className="tars-status-indicator"></span>ðŸ¤– TARS AI ENGINE</div>
        <div>Performance: 63.8% faster than industry average</div>
        <div>Throughput: 171.1% higher than competitors</div>
        <div>Memory: 60% lower usage than alternatives</div>
        <div>Status: OPERATIONAL</div>
        <div>Theme: INTERSTELLAR</div>
      </div>

      {/* Voice Control */}
      <VoiceControlButton />

      {/* Instructions */}
      <div className="tars-instructions">
        <h4>ðŸŽ® Interactions:</h4>
        <ul>
          <li>Click TARS robot to hear responses</li>
          <li>Use voice commands with microphone</li>
          <li>Mouse: orbit, zoom, pan around scene</li>
          <li>Try saying: "Hello TARS", "What's your humor setting?"</li>
        </ul>
      </div>
    </div>
  );
}

export default App;
