\npublic class Tars\n{\n    private readonly ILearningService _learningService;\n    private readonly ILogger\u003cTars\u003e _logger;\n\n    public Tars(ILearningService learningService, ILogger\u003cTars\u003e logger)\n    {\n        _learningService = learningService;\n        _logger = logger;\n    }\n\n    // ...\n\n    public async Task\u003cint\u003e ShowLearningStatisticsAsync()\n    {\n        try\n        {\n            var stats = await _learningService.GetStatisticsAsync();\n            Console.WriteLine(\"Learning statistics:\");\n\n            if (stats.TotalFeedbackCount \u003e 0)\n            {\n                Console.WriteLine($\"Total feedback count: {stats.TotalFeedbackCount}\");\n            }\n\n            if (stats.TotalPatternCount \u003e 0)\n            {\n                Console.WriteLine($\"Total pattern count: {stats.TotalPatternCount}\");\n            }\n\n            if (stats.AverageFeedbackRating \u003e= 1d \u0026\u0026 stats.AverageFeedbackRating \u003c= 5d)\n            {\n                Console.WriteLine($\"Average feedback rating: {stats.AverageFeedbackRating:F2}\");\n            }\n\n            // Display top patterns\n            if (stats.TopPatterns.Count \u003e 0)\n            {\n                Console.WriteLine();\n                Console.WriteLine(\"Top patterns:\");\n                foreach (var pattern in stats.TopPatterns)\n                {\n                    Console.WriteLine($\"- {pattern.Description} (Score: {pattern.Score:F2}, Used: {pattern.UsageCount} times)\");\n                }\n            }\n\n            // Display feedback by type\n            if (stats.FeedbackByType.Count \u003e 0)\n            {\n                Console.WriteLine();\n                Console.WriteLine(\"Feedback by type:\");\n                foreach (var kvp in stats.FeedbackByType)\n                {\n                    Console.WriteLine($\"- {kvp.Key}: {kvp.Value}\");\n                }\n            }\n\n            // Display feedback by rating\n            if (stats.FeedbackByRating.Count \u003e 0)\n            {\n                Console.WriteLine();\n                Console.WriteLine(\"Feedback by rating:\");\n                foreach (var rating in Enumerable.Range(1, 5))\n                {\n                    int count = stats.FeedbackByRating.ContainsKey(rating) ? stats.FeedbackByRating[rating] : 0;\n                    Console.WriteLine($\"- {rating}: {count}\");\n                }\n            }\n\n            return 0;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error showing learning statistics\");\n            return 1;\n        }\n    }\n}\n