apiVersion: v1
kind: Namespace
metadata:
  name: tars-ai
  labels:
    name: tars-ai
    app.kubernetes.io/name: tars-ai
    app.kubernetes.io/version: "1.0.0"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: tars-ai-config
  namespace: tars-ai
data:
  TARS_LOG_LEVEL: "Info"
  TARS_MAX_CONCURRENT_REQUESTS: "50"
  TARS_CACHE_SIZE: "5000"
  TARS_OPTIMIZATION_ENABLED: "true"
  TARS_METRICS_ENABLED: "true"
  TARS_CUDA_ENABLED: "true"

---
apiVersion: v1
kind: Secret
metadata:
  name: tars-ai-secrets
  namespace: tars-ai
type: Opaque
data:
  # Base64 encoded secrets
  huggingface-token: ""  # Add your HF token here

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: tars-models-pvc
  namespace: tars-ai
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 100Gi
  storageClassName: fast-ssd

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tars-ai-engine
  namespace: tars-ai
  labels:
    app: tars-ai-engine
    version: v1
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: tars-ai-engine
  template:
    metadata:
      labels:
        app: tars-ai-engine
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: tars-ai
        image: tars-ai:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 11434
          name: api
          protocol: TCP
        - containerPort: 8080
          name: metrics
          protocol: TCP
        env:
        - name: ASPNETCORE_URLS
          value: "http://+:11434"
        - name: TARS_MODELS_PATH
          value: "/app/models"
        envFrom:
        - configMapRef:
            name: tars-ai-config
        - secretRef:
            name: tars-ai-secrets
        volumeMounts:
        - name: models-volume
          mountPath: /app/models
          readOnly: true
        - name: cache-volume
          mountPath: /app/cache
        resources:
          requests:
            memory: "4Gi"
            cpu: "2"
            nvidia.com/gpu: 1
          limits:
            memory: "16Gi"
            cpu: "8"
            nvidia.com/gpu: 1
        livenessProbe:
          httpGet:
            path: /
            port: 11434
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/tags
            port: 11434
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /
            port: 11434
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
      volumes:
      - name: models-volume
        persistentVolumeClaim:
          claimName: tars-models-pvc
      - name: cache-volume
        emptyDir:
          sizeLimit: 10Gi
      nodeSelector:
        accelerator: nvidia-tesla-v100  # Or your GPU type
      tolerations:
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule

---
apiVersion: v1
kind: Service
metadata:
  name: tars-ai-service
  namespace: tars-ai
  labels:
    app: tars-ai-engine
spec:
  type: ClusterIP
  ports:
  - port: 11434
    targetPort: 11434
    protocol: TCP
    name: api
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: metrics
  selector:
    app: tars-ai-engine

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: tars-ai-ingress
  namespace: tars-ai
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - tars-ai.yourdomain.com
    secretName: tars-ai-tls
  rules:
  - host: tars-ai.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: tars-ai-service
            port:
              number: 11434

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: tars-ai-hpa
  namespace: tars-ai
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: tars-ai-engine
  minReplicas: 2
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: tars-ai-pdb
  namespace: tars-ai
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: tars-ai-engine

---
apiVersion: v1
kind: ServiceMonitor
metadata:
  name: tars-ai-metrics
  namespace: tars-ai
  labels:
    app: tars-ai-engine
spec:
  selector:
    matchLabels:
      app: tars-ai-engine
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics
