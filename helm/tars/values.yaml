# TARS Helm Chart Values
# Default values for TARS deployment

# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# TARS Core Service Configuration
tarsCore:
  enabled: true
  image:
    repository: tars/core-service
    tag: "latest"
    pullPolicy: IfNotPresent
  
  replicaCount: 2
  
  service:
    type: ClusterIP
    port: 80
    targetPort: 8080
    httpsPort: 443
    httpsTargetPort: 8443
    metricsPort: 9090
  
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  
  env:
    TARS_ENVIRONMENT: "production"
    TARS_LOG_LEVEL: "Information"
    TARS_ENABLE_SWAGGER: "false"
    TARS_ENABLE_METRICS: "true"
    ENABLE_INTERNAL_DIALOGUE_ACCESS: "true"
    ENABLE_TEMPLATE_FREE_UI: "true"
    ENABLE_LIVE_DOCUMENTATION: "true"
    ENABLE_HUMOR_GENERATION: "true"
    ENABLE_PERSONALITY_PARAMETERS: "true"
    ENABLE_HYPERLIGHT_INTEGRATION: "false"
    MAX_CONCURRENT_REQUESTS: "1000"
    PROMETHEUS_ENABLED: "true"

# TARS UI Service Configuration
tarsUI:
  enabled: true
  image:
    repository: tars/ui-service
    tag: "latest"
    pullPolicy: IfNotPresent
  
  replicaCount: 2
  
  service:
    type: ClusterIP
    port: 80
    targetPort: 3000
    httpsPort: 443
    httpsTargetPort: 3443
  
  resources:
    requests:
      memory: "128Mi"
      cpu: "50m"
    limits:
      memory: "256Mi"
      cpu: "200m"
  
  env:
    NODE_ENV: "production"
    REACT_APP_ENABLE_INTERNAL_DIALOGUE: "true"
    REACT_APP_ENABLE_TEMPLATE_FREE_UI: "true"
    REACT_APP_ENABLE_LIVE_DOCS: "true"
    REACT_APP_HUMOR_ENABLED: "true"
    REACT_APP_PERSONALITY_PARAMS: "true"

# TARS Knowledge Service Configuration
tarsKnowledge:
  enabled: true
  image:
    repository: tars/knowledge-service
    tag: "latest"
    pullPolicy: IfNotPresent
  
  replicaCount: 1
  
  service:
    type: ClusterIP
    port: 80
    targetPort: 8081
    httpsPort: 443
    httpsTargetPort: 8444
  
  resources:
    requests:
      memory: "512Mi"
      cpu: "200m"
    limits:
      memory: "1Gi"
      cpu: "1000m"
  
  persistence:
    enabled: true
    size: 10Gi
    storageClass: ""
    accessMode: ReadWriteOnce
  
  env:
    TARS_SERVICE_NAME: "tars-knowledge-service"
    VECTOR_STORE_TYPE: "persistent"
    ENABLE_MILESTONE_CAPTURE: "true"
    ENABLE_KNOWLEDGE_ORGANIZATION: "true"
    ENABLE_RESEARCH_CAPABILITIES: "true"
    ENABLE_AUTOMATED_REPORTING: "true"

# TARS Agent Service Configuration (Personality & Humor)
tarsAgents:
  enabled: true
  image:
    repository: tars/agent-service
    tag: "latest"
    pullPolicy: IfNotPresent
  
  replicaCount: 1
  
  service:
    type: ClusterIP
    port: 80
    targetPort: 8082
    httpsPort: 443
    httpsTargetPort: 8445
  
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  
  env:
    TARS_SERVICE_NAME: "tars-agent-service"
    HUMOR_GENERATION_ENABLED: "true"
    PERSONALITY_PARAMETERS_ENABLED: "true"
    EMOTIONAL_INTELLIGENCE_ENABLED: "true"
    DEFAULT_WIT_LEVEL: "0.7"
    DEFAULT_SARCASM_FREQUENCY: "0.3"
    DEFAULT_PUN_TENDENCY: "0.5"
    DEFAULT_ENTHUSIASM: "0.7"

# Redis Configuration
redis:
  enabled: true
  auth:
    enabled: false
  master:
    persistence:
      enabled: true
      size: 8Gi
  replica:
    replicaCount: 1

# Ingress Configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
  hosts:
    - host: tars.local
      paths:
        - path: /
          pathType: Prefix
          service: tars-ui
        - path: /api
          pathType: Prefix
          service: tars-core
        - path: /knowledge
          pathType: Prefix
          service: tars-knowledge
        - path: /agents
          pathType: Prefix
          service: tars-agents
  tls: []

# Service Monitor for Prometheus
serviceMonitor:
  enabled: true
  namespace: ""
  labels: {}
  interval: 30s
  scrapeTimeout: 10s

# Network Policies
networkPolicy:
  enabled: true
  ingress:
    enabled: true
  egress:
    enabled: true

# Pod Security Policy
podSecurityPolicy:
  enabled: false

# Security Context
securityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 2000

# Pod Security Context
podSecurityContext:
  fsGroup: 2000

# Node Selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}

# Monitoring Configuration
monitoring:
  prometheus:
    enabled: true
    serviceMonitor:
      enabled: true
  grafana:
    enabled: true
    adminPassword: "tars-admin"
    dashboards:
      enabled: true

# Persistence
persistence:
  enabled: true
  storageClass: ""
  accessMode: ReadWriteOnce
  size: 20Gi

# Configuration
config:
  database:
    type: "postgresql"
    host: ""
    port: 5432
    name: "tars"
    user: "tars"
    password: ""
  
  jwt:
    secret: ""
    issuer: "tars"
    audience: "tars-users"
    expiryMinutes: 60
  
  features:
    internalDialogue: true
    templateFreeUI: true
    liveDocumentation: true
    humorGeneration: true
    personalityParameters: true
    hyperlightIntegration: false

# External Dependencies
externalDatabase:
  enabled: false
  host: ""
  port: 5432
  database: "tars"
  username: "tars"
  password: ""

externalRedis:
  enabled: false
  host: ""
  port: 6379
  password: ""

# Development/Testing
development:
  enabled: false
  debug: false
  mockServices: false
