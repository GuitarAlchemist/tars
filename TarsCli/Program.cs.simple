using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using NLog;
using NLog.Extensions.Logging;
using System;
using System.CommandLine;
using System.CommandLine.Builder;
using System.CommandLine.Parsing;
using System.IO;
using System.Threading.Tasks;
using TarsEngine.Extensions;

namespace TarsCli
{
    internal static class Program
    {
        // Main method
        public static async Task<int> Main(string[] args)
        {
            // Setup NLog
            LogManager.Setup()
                .LoadConfigurationFromFile("nlog.config")
                .GetCurrentClassLogger();

            try
            {
                // Setup configuration
                var configuration = new ConfigurationBuilder()
                    .SetBasePath(Directory.GetCurrentDirectory())
                    .AddJsonFile("appsettings.json", optional: false)
                    .AddEnvironmentVariables()
                    .AddCommandLine(args)
                    .Build();

                // Create logs directory if it doesn't exist
                Directory.CreateDirectory(Path.Combine(Directory.GetCurrentDirectory(), "logs"));

                // Setup DI
                var serviceProvider = new ServiceCollection()
                    .AddLogging(builder =>
                    {
                        builder.ClearProviders();
                        builder.SetMinimumLevel(Microsoft.Extensions.Logging.LogLevel.Trace);
                        builder.AddNLog(configuration);
                    })
                    .AddSingleton<IConfiguration>(configuration)
                    
                    // Add Tree-of-Thought services
                    .AddTreeOfThoughtServices()
                    
                    .BuildServiceProvider();

                // Get services
                var logger = serviceProvider.GetRequiredService<ILoggerFactory>().CreateLogger("TarsCli");

                // Setup command line
                var rootCommand = new RootCommand("TARS CLI");
                
                // Add the Simple Tree-of-Thought command
                rootCommand.AddCommand(serviceProvider.GetRequiredService<Commands.SimpleTreeOfThoughtCommand>());

                // Run the command
                var result = await rootCommand.InvokeAsync(args);
                return result;
            }
            catch (Exception ex)
            {
                // Log any startup exceptions
                Console.WriteLine($"CRITICAL ERROR: {ex.Message}");
                Console.WriteLine($"Stack trace: {ex.StackTrace}");
                LogManager.GetCurrentClassLogger().Error(ex, "Stopped program because of exception");
                return 1;
            }
            finally
            {
                // Ensure to flush and stop internal timers/threads before application-exit
                LogManager.Shutdown();
            }
        }
    }
}
