using System.Diagnostics;
using System.Text;
using Microsoft.Extensions.Configuration;

namespace TarsCli.Services;

/// <summary>
/// Service for generating comprehensive diagnostic reports for TARS
/// </summary>
public class DiagnosticReportService
{
    private readonly ILogger<DiagnosticReportService> _logger;
    private readonly IConfiguration _configuration;
    private readonly DiagnosticsService _diagnosticsService;
    private readonly DemoService _demoService;
    private readonly OllamaService _ollamaService;
    private readonly GpuService _gpuService;
    private readonly string _reportDirectory;
    private readonly Stopwatch _stopwatch = new Stopwatch();

    public DiagnosticReportService(
        ILogger<DiagnosticReportService> logger,
        IConfiguration configuration,
        DiagnosticsService diagnosticsService,
        DemoService demoService,
        OllamaService ollamaService,
        GpuService gpuService)
    {
        _logger = logger;
        _configuration = configuration;
        _diagnosticsService = diagnosticsService;
        _demoService = demoService;
        _ollamaService = ollamaService;
        _gpuService = gpuService;

        // Set up the reports directory
        var appDataPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
        if (string.IsNullOrEmpty(appDataPath))
        {
            appDataPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), ".tars");
        }
        else
        {
            appDataPath = Path.Combine(appDataPath, "TARS");
        }

        _reportDirectory = Path.Combine(appDataPath, "Reports");

        if (!Directory.Exists(_reportDirectory))
        {
            Directory.CreateDirectory(_reportDirectory);
        }
    }

    /// <summary>
    /// Runs a comprehensive diagnostic report
    /// </summary>
    /// <param name="runTests">Whether to run unit tests</param>
    /// <param name="runDemos">Whether to run demos</param>
    /// <param name="model">The model to use for demos</param>
    /// <returns>Path to the generated report file</returns>
    public async Task<string> RunDiagnosticReportAsync(bool runTests = true, bool runDemos = true, string model = "")
    {
        _stopwatch.Restart();
        _logger.LogInformation("Starting comprehensive diagnostic report");

        var reportBuilder = new StringBuilder();
        var reportFileName = $"TARS_Diagnostic_Report_{DateTime.Now:yyyyMMdd_HHmmss}.md";
        var reportFilePath = Path.Combine(_reportDirectory, reportFileName);

        try
        {
            // Add report header
            reportBuilder.AppendLine("# TARS Diagnostic Report");
            reportBuilder.AppendLine($"Generated: {DateTime.Now:yyyy-MM-dd HH:mm:ss}");
            reportBuilder.AppendLine();

            // Run system diagnostics
            reportBuilder.AppendLine("## System Diagnostics");
            var diagnosticsResult = await RunSystemDiagnosticsAsync(reportBuilder);

            // Run GPU diagnostics
            reportBuilder.AppendLine("## GPU Diagnostics");
            var gpuDiagnostics = RunGpuDiagnostics(reportBuilder);

            // Run unit tests if requested
            if (runTests)
            {
                reportBuilder.AppendLine("## Unit Tests");
                await RunUnitTestsAsync(reportBuilder);
            }

            // Run demos if requested
            if (runDemos)
            {
                reportBuilder.AppendLine("## Demo Tests");
                await RunDemoTestsAsync(reportBuilder, model);
            }

            // Add summary
            _stopwatch.Stop();
            reportBuilder.AppendLine("## Summary");
            reportBuilder.AppendLine($"- Report completed in: {_stopwatch.Elapsed.TotalSeconds:F2} seconds");
            reportBuilder.AppendLine($"- System ready: {(diagnosticsResult.IsReady ? "✅ Yes" : "❌ No")}");
            reportBuilder.AppendLine($"- GPU acceleration: {(gpuDiagnostics.IsGpuAvailable ? "✅ Available" : "❌ Not Available")}");
            reportBuilder.AppendLine();
            reportBuilder.AppendLine("---");
            reportBuilder.AppendLine("Report generated by TARS Diagnostic Report Service");

            // Save the report
            await File.WriteAllTextAsync(reportFilePath, reportBuilder.ToString());
            _logger.LogInformation($"Diagnostic report saved to: {Path.GetFullPath(reportFilePath)}");

            return reportFilePath;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error generating diagnostic report");

            // Try to save what we have so far
            reportBuilder.AppendLine();
            reportBuilder.AppendLine("## Error");
            reportBuilder.AppendLine($"An error occurred while generating the report: {ex.Message}");
            reportBuilder.AppendLine("```");
            reportBuilder.AppendLine(ex.StackTrace);
            reportBuilder.AppendLine("```");

            await File.WriteAllTextAsync(reportFilePath, reportBuilder.ToString());

            throw;
        }
    }

    /// <summary>
    /// Runs system diagnostics and adds the results to the report
    /// </summary>
    private async Task<DiagnosticsResult> RunSystemDiagnosticsAsync(StringBuilder reportBuilder)
    {
        reportBuilder.AppendLine("### System Information");

        try
        {
            var diagnosticsResult = await _diagnosticsService.RunInitialDiagnosticsAsync(verbose: false);

            // Add system info
            reportBuilder.AppendLine($"- Operating System: {diagnosticsResult.SystemInfo.OperatingSystem}");
            reportBuilder.AppendLine($"- CPU Cores: {diagnosticsResult.SystemInfo.ProcessorCores}");
            reportBuilder.AppendLine($"- Available Memory: {diagnosticsResult.SystemInfo.AvailableMemoryGB:F2} GB");
            reportBuilder.AppendLine();

            // Add Ollama config
            reportBuilder.AppendLine("### Ollama Configuration");
            reportBuilder.AppendLine($"- Base URL: {diagnosticsResult.OllamaConfig.BaseUrl}");
            reportBuilder.AppendLine($"- Default Model: {diagnosticsResult.OllamaConfig.DefaultModel}");
            reportBuilder.AppendLine();

            // Add model status
            reportBuilder.AppendLine("### Model Status");
            reportBuilder.AppendLine("| Model | Status |");
            reportBuilder.AppendLine("|-------|--------|");

            foreach (var model in diagnosticsResult.ModelStatus)
            {
                reportBuilder.AppendLine($"| {model.Key} | {(model.Value ? "✅ Available" : "❌ Not Available")} |");
            }

            reportBuilder.AppendLine();

            // Add project config
            reportBuilder.AppendLine("### Project Configuration");
            reportBuilder.AppendLine($"- Project Root: {diagnosticsResult.ProjectConfig.ProjectRoot}");
            reportBuilder.AppendLine();

            return diagnosticsResult;
        }
        catch (Exception ex)
        {
            reportBuilder.AppendLine($"Error running system diagnostics: {ex.Message}");
            reportBuilder.AppendLine();

            // Return a minimal result
            return new DiagnosticsResult
            {
                SystemInfo = new SystemInfo { OperatingSystem = "Error", ProcessorCores = 0, AvailableMemoryGB = 0 },
                OllamaConfig = new OllamaConfig { BaseUrl = "Error", DefaultModel = "Error" },
                ModelStatus = new Dictionary<string, bool>(),
                ProjectConfig = new ProjectConfig { ProjectRoot = "Error" }
            };
        }
    }

    /// <summary>
    /// Runs GPU diagnostics and adds the results to the report
    /// </summary>
    private GpuDiagnosticsResult RunGpuDiagnostics(StringBuilder reportBuilder)
    {
        try
        {
            var gpuDiagnostics = _diagnosticsService.GetGpuDiagnostics();

            reportBuilder.AppendLine($"- GPU Acceleration: {(gpuDiagnostics.IsGpuAvailable ? "✅ Available" : "❌ Not Available")}");

            if (gpuDiagnostics.IsGpuAvailable)
            {
                reportBuilder.AppendLine();
                reportBuilder.AppendLine("### GPU Information");
                reportBuilder.AppendLine("| Name | Memory (MB) | Type |");
                reportBuilder.AppendLine("|------|------------|------|");

                foreach (var gpu in gpuDiagnostics.GpuInfo)
                {
                    reportBuilder.AppendLine($"| {gpu.Name} | {gpu.MemoryMB} | {gpu.Type} |");
                }

                reportBuilder.AppendLine();
                reportBuilder.AppendLine("### Ollama GPU Parameters");

                foreach (var param in gpuDiagnostics.OllamaGpuParameters)
                {
                    reportBuilder.AppendLine($"- {param.Key}: {param.Value}");
                }
            }
            else if (!string.IsNullOrEmpty(gpuDiagnostics.ErrorMessage))
            {
                reportBuilder.AppendLine($"- Error: {gpuDiagnostics.ErrorMessage}");
            }

            reportBuilder.AppendLine();

            return gpuDiagnostics;
        }
        catch (Exception ex)
        {
            reportBuilder.AppendLine($"Error running GPU diagnostics: {ex.Message}");
            reportBuilder.AppendLine();

            // Return a minimal result
            return new GpuDiagnosticsResult
            {
                IsGpuAvailable = false,
                GpuInfo = [],
                OllamaGpuParameters = new Dictionary<string, object>(),
                ErrorMessage = ex.Message
            };
        }
    }

    /// <summary>
    /// Runs unit tests and adds the results to the report
    /// </summary>
    private async Task RunUnitTestsAsync(StringBuilder reportBuilder)
    {
        try
        {
            reportBuilder.AppendLine("Running unit tests...");

            // Get the solution directory
            var solutionDir = GetSolutionDirectory();

            // Find test projects
            var testProjects = Directory.GetFiles(solutionDir, "*.Tests.csproj", SearchOption.AllDirectories)
                .Concat(Directory.GetFiles(solutionDir, "*.Tests.fsproj", SearchOption.AllDirectories))
                .ToList();

            reportBuilder.AppendLine($"Found {testProjects.Count} test projects:");

            foreach (var project in testProjects)
            {
                var projectName = Path.GetFileNameWithoutExtension(project);
                reportBuilder.AppendLine($"### {projectName}");

                try
                {
                    // Run the tests
                    var result = await RunDotnetTestAsync(project);

                    // Parse and add the results
                    reportBuilder.AppendLine("```");
                    reportBuilder.AppendLine(result.Output);
                    reportBuilder.AppendLine("```");

                    // Extract test summary
                    var totalMatch = System.Text.RegularExpressions.Regex.Match(result.Output, @"Total: (\d+)");
                    var passedMatch = System.Text.RegularExpressions.Regex.Match(result.Output, @"Passed: (\d+)");
                    var failedMatch = System.Text.RegularExpressions.Regex.Match(result.Output, @"Failed: (\d+)");

                    if (totalMatch.Success && passedMatch.Success && failedMatch.Success)
                    {
                        var total = int.Parse(totalMatch.Groups[1].Value);
                        var passed = int.Parse(passedMatch.Groups[1].Value);
                        var failed = int.Parse(failedMatch.Groups[1].Value);

                        reportBuilder.AppendLine($"- Total: {total}");
                        reportBuilder.AppendLine($"- Passed: {passed}");
                        reportBuilder.AppendLine($"- Failed: {failed}");
                        reportBuilder.AppendLine($"- Status: {(failed == 0 ? "✅ Passed" : "❌ Failed")}");
                    }
                    else
                    {
                        reportBuilder.AppendLine($"- Status: {(result.Success ? "✅ Passed" : "❌ Failed")}");
                    }
                }
                catch (Exception ex)
                {
                    reportBuilder.AppendLine($"Error running tests for {projectName}: {ex.Message}");
                    reportBuilder.AppendLine($"- Status: ❌ Failed");
                }

                reportBuilder.AppendLine();
            }
        }
        catch (Exception ex)
        {
            reportBuilder.AppendLine($"Error running unit tests: {ex.Message}");
            reportBuilder.AppendLine();
        }
    }

    /// <summary>
    /// Runs demo tests and adds the results to the report
    /// </summary>
    private async Task RunDemoTestsAsync(StringBuilder reportBuilder, string model)
    {
        try
        {
            // Use default model if not specified
            if (string.IsNullOrEmpty(model))
            {
                model = _configuration["Ollama:DefaultModel"] ?? "llama3";
            }

            reportBuilder.AppendLine($"Running demo tests with model: {model}");
            reportBuilder.AppendLine();

            // List of demo types to run
            var demoTypes = new[]
            {
                "self-improvement",
                "code-generation",
                "language-specs",
                "learning-plan",
                "course-generator",
                "tutorial-organizer"
            };

            foreach (var demoType in demoTypes)
            {
                reportBuilder.AppendLine($"### {demoType} Demo");

                try
                {
                    // Capture console output
                    var originalOut = Console.Out;
                    using var stringWriter = new StringWriter();
                    Console.SetOut(stringWriter);

                    // Run the demo
                    var success = await _demoService.RunDemoAsync(demoType, model);

                    // Restore console output
                    Console.SetOut(originalOut);

                    // Get the captured output
                    var output = stringWriter.ToString();

                    // Add a summary of the output (first 20 lines)
                    var outputLines = output.Split(['\r', '\n'], StringSplitOptions.RemoveEmptyEntries);
                    var summaryLines = outputLines.Take(20).ToArray();

                    reportBuilder.AppendLine("```");
                    foreach (var line in summaryLines)
                    {
                        reportBuilder.AppendLine(line);
                    }

                    if (outputLines.Length > 20)
                    {
                        reportBuilder.AppendLine("...");
                        reportBuilder.AppendLine($"[Output truncated - {outputLines.Length} lines total]");
                    }

                    reportBuilder.AppendLine("```");

                    reportBuilder.AppendLine($"- Status: {(success ? "✅ Passed" : "❌ Failed")}");
                }
                catch (Exception ex)
                {
                    reportBuilder.AppendLine($"Error running {demoType} demo: {ex.Message}");
                    reportBuilder.AppendLine($"- Status: ❌ Failed");
                }

                reportBuilder.AppendLine();
            }
        }
        catch (Exception ex)
        {
            reportBuilder.AppendLine($"Error running demo tests: {ex.Message}");
            reportBuilder.AppendLine();
        }
    }

    /// <summary>
    /// Runs dotnet test on a project
    /// </summary>
    private async Task<(bool Success, string Output)> RunDotnetTestAsync(string projectPath)
    {
        try
        {
            var process = new Process
            {
                StartInfo = new ProcessStartInfo
                {
                    FileName = "dotnet",
                    Arguments = $"test \"{projectPath}\" --verbosity normal",
                    UseShellExecute = false,
                    RedirectStandardOutput = true,
                    RedirectStandardError = true,
                    CreateNoWindow = true
                }
            };

            var output = new StringBuilder();
            var error = new StringBuilder();

            process.OutputDataReceived += (sender, e) =>
            {
                if (e.Data != null)
                {
                    output.AppendLine(e.Data);
                }
            };

            process.ErrorDataReceived += (sender, e) =>
            {
                if (e.Data != null)
                {
                    error.AppendLine(e.Data);
                }
            };

            process.Start();
            process.BeginOutputReadLine();
            process.BeginErrorReadLine();

            await process.WaitForExitAsync();

            var success = process.ExitCode == 0;
            var outputStr = output.ToString();

            if (!success && string.IsNullOrEmpty(outputStr))
            {
                outputStr = error.ToString();
            }

            return (success, outputStr);
        }
        catch (Exception ex)
        {
            return (false, $"Error running dotnet test: {ex.Message}");
        }
    }

    /// <summary>
    /// Gets the solution directory
    /// </summary>
    private string GetSolutionDirectory()
    {
        // Start with the current directory
        var directory = Directory.GetCurrentDirectory();

        // Look for a .sln file
        while (!Directory.GetFiles(directory, "*.sln").Any())
        {
            // Move up one directory
            var parent = Directory.GetParent(directory);

            if (parent == null)
            {
                // If we've reached the root, return the current directory
                return directory;
            }

            directory = parent.FullName;
        }

        return directory;
    }
}
