using Microsoft.Extensions.Configuration;

namespace TarsCli.Services;

public class SessionService
{
    private readonly ILogger<SessionService> _logger;
    private readonly IConfiguration _configuration;
    private readonly string _projectRoot;
    private readonly ScriptExecutionService _scriptExecutionService;
    private readonly TemplateService _templateService;

    public SessionService(
        ILogger<SessionService> logger,
        IConfiguration configuration,
        ScriptExecutionService scriptExecutionService,
        TemplateService templateService)
    {
        _logger = logger;
        _configuration = configuration;
        _scriptExecutionService = scriptExecutionService;
        _templateService = templateService;
        _projectRoot = _configuration["Tars:ProjectRoot"] ??
            Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile),
                "source", "repos", "tars");
    }

    public async Task<bool> InitializeSession(string sessionName, string templateName = "default_session.json")
    {
        try
        {
            _logger.LogInformation($"Initializing session: {sessionName}");

            // Initialize templates directory if it doesn't exist
            await _templateService.InitializeTemplatesDirectory();

            // Create session directory
            var sessionDir = Path.Combine(_projectRoot, "sessions", sessionName);

            if (Directory.Exists(sessionDir))
            {
                Console.WriteLine($"Session '{sessionName}' already exists. Do you want to overwrite it? (y/n): ");
                var response = Console.ReadLine()?.ToLower();

                if (response != "y" && response != "yes")
                {
                    _logger.LogInformation("Session initialization cancelled by user");
                    return false;
                }

                _logger.LogInformation($"Overwriting existing session: {sessionName}");
            }

            // Create directory structure
            Directory.CreateDirectory(sessionDir);
            Directory.CreateDirectory(Path.Combine(sessionDir, "logs"));
            Directory.CreateDirectory(Path.Combine(sessionDir, "configs"));
            Directory.CreateDirectory(Path.Combine(sessionDir, "plans"));
            Directory.CreateDirectory(Path.Combine(sessionDir, "output"));

            // Get the session template content
            var configTemplateContent = await _templateService.GetTemplateContent(templateName);

            if (string.IsNullOrEmpty(configTemplateContent))
            {
                _logger.LogWarning($"Template '{templateName}' not found. Using default template.");
                Console.WriteLine($"Template '{templateName}' not found. Using default template.");

                // Create default templates
                await _templateService.CreateDefaultTemplates();
                configTemplateContent = await _templateService.GetTemplateContent("default_session.json");

                if (string.IsNullOrEmpty(configTemplateContent))
                {
                    _logger.LogError("Failed to create default template.");
                    return false;
                }
            }

            // Apply template variables
            var variables = new Dictionary<string, string>
            {
                { "SESSION_NAME", sessionName },
                { "TIMESTAMP", DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm:ssZ") }
            };

            var configContent = await _templateService.ApplyTemplateVariables(configTemplateContent, variables);

            // Save the config file
            await File.WriteAllTextAsync(Path.Combine(sessionDir, "configs", "session.json"), configContent);

            // Get the plan template content
            var planTemplateContent = await _templateService.GetTemplateContent("default_plan.fsx");

            if (!string.IsNullOrEmpty(planTemplateContent))
            {
                // Apply template variables
                var planContent = await _templateService.ApplyTemplateVariables(planTemplateContent, variables);

                // Save the plan file
                await File.WriteAllTextAsync(Path.Combine(sessionDir, "plans", "template.fsx"), planContent);
            }
            else
            {
                _logger.LogWarning("Plan template not found. Skipping plan creation.");
            }

            // Create README file
            var readmeContent = $@"# TARS Session: {sessionName}

This directory contains the TARS session '{sessionName}' created on {DateTime.UtcNow:yyyy-MM-dd} at {DateTime.UtcNow:HH:mm:ss}.

## Directory Structure

- `configs/`: Configuration files for the session
- `logs/`: Log files generated during execution
- `plans/`: F# script files defining agent workflows
- `output/`: Output files generated by the agents

## Getting Started

1. Edit the configuration in `configs/session.json` if needed
2. Create a new plan or modify the template in `plans/template.fsx`
3. Run the plan using the TARS CLI: `tarscli run --session {sessionName} --plan template.fsx`

## Documentation

For more information, see the TARS documentation in the `docs/` directory of the main repository.
";

            await File.WriteAllTextAsync(Path.Combine(sessionDir, "README.md"), readmeContent);

            _logger.LogInformation($"Session '{sessionName}' initialized successfully");
            Console.WriteLine($"Session '{sessionName}' initialized successfully at {sessionDir}");

            return true;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"Error initializing session: {sessionName}");
            return false;
        }
    }

    public async Task<bool> RunPlan(string sessionName, string planFile)
    {
        try
        {
            _logger.LogInformation($"Running plan '{planFile}' in session '{sessionName}'");

            // Check if session exists
            var sessionDir = Path.Combine(_projectRoot, "sessions", sessionName);

            if (!Directory.Exists(sessionDir))
            {
                _logger.LogError($"Session '{sessionName}' does not exist");
                Console.WriteLine($"Session '{sessionName}' does not exist. Use 'tarscli init {sessionName}' to create it.");
                return false;
            }

            // Check if plan file exists
            var planPath = Path.Combine(sessionDir, "plans", planFile);

            if (!File.Exists(planPath))
            {
                _logger.LogError($"Plan file '{planFile}' does not exist in session '{sessionName}'");
                Console.WriteLine($"Plan file '{planFile}' does not exist in session '{sessionName}'.");
                return false;
            }

            Console.WriteLine($"Executing plan '{planFile}' in session '{sessionName}'...");

            // Execute the script using the ScriptExecutionService
            var (success, output) = await _scriptExecutionService.ExecuteScriptAsync(sessionName, planFile);

            if (success)
            {
                Console.WriteLine("Plan execution completed successfully.");
                Console.WriteLine();
                Console.WriteLine("Output:");
                Console.WriteLine(output);
                return true;
            }
            else
            {
                Console.WriteLine("Plan execution failed.");
                Console.WriteLine();
                Console.WriteLine("Error:");
                Console.WriteLine(output);
                return false;
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"Error running plan '{planFile}' in session '{sessionName}'");
            return false;
        }
    }

    public async Task<bool> ViewTrace(string sessionName, string traceId = "last")
    {
        try
        {
            _logger.LogInformation($"Viewing trace '{traceId}' in session '{sessionName}'");

            // Check if session exists
            var sessionDir = Path.Combine(_projectRoot, "sessions", sessionName);

            if (!Directory.Exists(sessionDir))
            {
                _logger.LogError($"Session '{sessionName}' does not exist");
                Console.WriteLine($"Session '{sessionName}' does not exist. Use 'tarscli init {sessionName}' to create it.");
                return false;
            }

            // Get the log file
            var logDir = Path.Combine(sessionDir, "logs");
            string logFile;

            if (traceId.ToLower() == "last")
            {
                // Get the most recent log file
                var logFiles = Directory.GetFiles(logDir, "run_*.log")
                    .OrderByDescending(f => f)
                    .ToArray();

                if (logFiles.Length == 0)
                {
                    _logger.LogError($"No trace logs found in session '{sessionName}'");
                    Console.WriteLine($"No trace logs found in session '{sessionName}'.");
                    return false;
                }

                logFile = logFiles[0];
            }
            else
            {
                // Try to find a log file with the specified ID
                logFile = Path.Combine(logDir, $"run_{traceId}.log");

                if (!File.Exists(logFile))
                {
                    _logger.LogError($"Trace log '{traceId}' not found in session '{sessionName}'");
                    Console.WriteLine($"Trace log '{traceId}' not found in session '{sessionName}'.");
                    return false;
                }
            }

            // Display the log file
            var logContent = await File.ReadAllTextAsync(logFile);

            Console.WriteLine();
            CliSupport.WriteHeader($"Trace Log: {Path.GetFileName(logFile)}");
            Console.WriteLine(logContent);

            return true;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"Error viewing trace '{traceId}' in session '{sessionName}'");
            return false;
        }
    }
}
