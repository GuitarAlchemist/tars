using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using System.Text;

namespace TarsCli.Services;

public class SessionService
{
    private readonly ILogger<SessionService> _logger;
    private readonly IConfiguration _configuration;
    private readonly string _projectRoot;

    public SessionService(
        ILogger<SessionService> logger,
        IConfiguration configuration)
    {
        _logger = logger;
        _configuration = configuration;
        _projectRoot = _configuration["Tars:ProjectRoot"] ?? 
            Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), 
                "source", "repos", "tars");
    }

    public async Task<bool> InitializeSession(string sessionName)
    {
        try
        {
            _logger.LogInformation($"Initializing session: {sessionName}");
            
            // Create session directory
            var sessionDir = Path.Combine(_projectRoot, "sessions", sessionName);
            
            if (Directory.Exists(sessionDir))
            {
                Console.WriteLine($"Session '{sessionName}' already exists. Do you want to overwrite it? (y/n): ");
                var response = Console.ReadLine()?.ToLower();
                
                if (response != "y" && response != "yes")
                {
                    _logger.LogInformation("Session initialization cancelled by user");
                    return false;
                }
                
                _logger.LogInformation($"Overwriting existing session: {sessionName}");
            }
            
            // Create directory structure
            Directory.CreateDirectory(sessionDir);
            Directory.CreateDirectory(Path.Combine(sessionDir, "logs"));
            Directory.CreateDirectory(Path.Combine(sessionDir, "configs"));
            Directory.CreateDirectory(Path.Combine(sessionDir, "plans"));
            Directory.CreateDirectory(Path.Combine(sessionDir, "output"));
            
            // Create default config file
            var configContent = @"{
  ""session"": {
    ""name"": ""SESSION_NAME"",
    ""description"": ""A TARS session"",
    ""created"": ""TIMESTAMP"",
    ""version"": ""1.0.0""
  },
  ""agents"": {
    ""planner"": {
      ""model"": ""llama3"",
      ""temperature"": 0.7,
      ""description"": ""Plans the overall approach and breaks down tasks""
    },
    ""coder"": {
      ""model"": ""codellama:13b-code"",
      ""temperature"": 0.2,
      ""description"": ""Writes and refines code based on the plan""
    },
    ""critic"": {
      ""model"": ""llama3"",
      ""temperature"": 0.5,
      ""description"": ""Reviews and critiques code and plans""
    }
  },
  ""ollama"": {
    ""baseUrl"": ""http://localhost:11434"",
    ""defaultModel"": ""llama3""
  }
}";
            
            configContent = configContent
                .Replace("SESSION_NAME", sessionName)
                .Replace("TIMESTAMP", DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm:ssZ"));
            
            await File.WriteAllTextAsync(Path.Combine(sessionDir, "configs", "session.json"), configContent);
            
            // Create sample plan template
            var planTemplate = @"// TARS Plan Template
// This is a sample F# script that defines a TARS workflow

#r ""nuget: FSharp.Data""

open System
open FSharp.Data

// Define the workflow
let workflow = async {
    printfn ""Starting TARS workflow...""
    
    // Example: Call the Planner agent
    let! planResult = Async.AwaitTask(TarsEngine.Agents.Planner.CreatePlan(""Create a simple web API""))
    printfn ""Plan created: %s"" planResult
    
    // Example: Call the Coder agent
    let! codeResult = Async.AwaitTask(TarsEngine.Agents.Coder.GenerateCode(planResult))
    printfn ""Code generated: %s"" codeResult
    
    // Example: Call the Critic agent
    let! criticResult = Async.AwaitTask(TarsEngine.Agents.Critic.ReviewCode(codeResult))
    printfn ""Code reviewed: %s"" criticResult
    
    return ""Workflow completed successfully""
}

// Run the workflow
Async.RunSynchronously(workflow)
";
            
            await File.WriteAllTextAsync(Path.Combine(sessionDir, "plans", "template.fsx"), planTemplate);
            
            // Create README file
            var readmeContent = $@"# TARS Session: {sessionName}

This directory contains the TARS session '{sessionName}' created on {DateTime.UtcNow:yyyy-MM-dd} at {DateTime.UtcNow:HH:mm:ss}.

## Directory Structure

- `configs/`: Configuration files for the session
- `logs/`: Log files generated during execution
- `plans/`: F# script files defining agent workflows
- `output/`: Output files generated by the agents

## Getting Started

1. Edit the configuration in `configs/session.json` if needed
2. Create a new plan or modify the template in `plans/template.fsx`
3. Run the plan using the TARS CLI: `tarscli run --session {sessionName} --plan template.fsx`

## Documentation

For more information, see the TARS documentation in the `docs/` directory of the main repository.
";
            
            await File.WriteAllTextAsync(Path.Combine(sessionDir, "README.md"), readmeContent);
            
            _logger.LogInformation($"Session '{sessionName}' initialized successfully");
            Console.WriteLine($"Session '{sessionName}' initialized successfully at {sessionDir}");
            
            return true;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"Error initializing session: {sessionName}");
            return false;
        }
    }

    public async Task<bool> RunPlan(string sessionName, string planFile)
    {
        try
        {
            _logger.LogInformation($"Running plan '{planFile}' in session '{sessionName}'");
            
            // Check if session exists
            var sessionDir = Path.Combine(_projectRoot, "sessions", sessionName);
            
            if (!Directory.Exists(sessionDir))
            {
                _logger.LogError($"Session '{sessionName}' does not exist");
                Console.WriteLine($"Session '{sessionName}' does not exist. Use 'tarscli init {sessionName}' to create it.");
                return false;
            }
            
            // Check if plan file exists
            var planPath = Path.Combine(sessionDir, "plans", planFile);
            
            if (!File.Exists(planPath))
            {
                _logger.LogError($"Plan file '{planFile}' does not exist in session '{sessionName}'");
                Console.WriteLine($"Plan file '{planFile}' does not exist in session '{sessionName}'.");
                return false;
            }
            
            // Create a log file for this run
            var logDir = Path.Combine(sessionDir, "logs");
            var logFile = Path.Combine(logDir, $"run_{DateTime.UtcNow:yyyyMMdd_HHmmss}.log");
            
            // For now, we'll just simulate running the plan
            // In a real implementation, this would execute the F# script
            
            Console.WriteLine($"Executing plan '{planFile}' in session '{sessionName}'...");
            
            // TODO: Implement actual F# script execution
            // This would involve using the F# Compiler Services to execute the script
            
            // For now, just log that we would run it
            var logContent = $@"=== TARS Plan Execution Log ===
Session: {sessionName}
Plan: {planFile}
Started: {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss}

[INFO] Loading plan file: {planPath}
[INFO] Executing plan...
[INFO] Plan execution completed
[INFO] Execution time: 0.0 seconds

=== End of Log ===";
            
            await File.WriteAllTextAsync(logFile, logContent);
            
            Console.WriteLine($"Plan execution completed. Log saved to {logFile}");
            
            return true;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"Error running plan '{planFile}' in session '{sessionName}'");
            return false;
        }
    }

    public async Task<bool> ViewTrace(string sessionName, string traceId = "last")
    {
        try
        {
            _logger.LogInformation($"Viewing trace '{traceId}' in session '{sessionName}'");
            
            // Check if session exists
            var sessionDir = Path.Combine(_projectRoot, "sessions", sessionName);
            
            if (!Directory.Exists(sessionDir))
            {
                _logger.LogError($"Session '{sessionName}' does not exist");
                Console.WriteLine($"Session '{sessionName}' does not exist. Use 'tarscli init {sessionName}' to create it.");
                return false;
            }
            
            // Get the log file
            var logDir = Path.Combine(sessionDir, "logs");
            string logFile;
            
            if (traceId.ToLower() == "last")
            {
                // Get the most recent log file
                var logFiles = Directory.GetFiles(logDir, "run_*.log")
                    .OrderByDescending(f => f)
                    .ToArray();
                
                if (logFiles.Length == 0)
                {
                    _logger.LogError($"No trace logs found in session '{sessionName}'");
                    Console.WriteLine($"No trace logs found in session '{sessionName}'.");
                    return false;
                }
                
                logFile = logFiles[0];
            }
            else
            {
                // Try to find a log file with the specified ID
                logFile = Path.Combine(logDir, $"run_{traceId}.log");
                
                if (!File.Exists(logFile))
                {
                    _logger.LogError($"Trace log '{traceId}' not found in session '{sessionName}'");
                    Console.WriteLine($"Trace log '{traceId}' not found in session '{sessionName}'.");
                    return false;
                }
            }
            
            // Display the log file
            var logContent = await File.ReadAllTextAsync(logFile);
            
            Console.WriteLine();
            CliSupport.WriteHeader($"Trace Log: {Path.GetFileName(logFile)}");
            Console.WriteLine(logContent);
            
            return true;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"Error viewing trace '{traceId}' in session '{sessionName}'");
            return false;
        }
    }
}
