namespace TarsEngine.FSharpToRust

open System
open System.IO
open System.Text.RegularExpressions

/// F# to Rust transpiler
module FSharpToRustTranspiler =

    /// Type mapping from F# to Rust
    let rec mapType (fsType: string) =
        match fsType.Trim().ToLower() with
        | "int" | "int32" -> "i32"
        | "int64" | "long" -> "i64"
        | "float" | "double" -> "f64"
        | "float32" | "single" -> "f32"
        | "bool" | "boolean" -> "bool"
        | "string" -> "String"
        | "char" -> "char"
        | "unit" -> "()"
        | "byte" | "uint8" -> "u8"
        | "uint16" -> "u16"
        | "uint" | "uint32" -> "u32"
        | "uint64" -> "u64"
        | t when t.StartsWith("option<") ->
            let innerType = t.Substring(7, t.Length - 8)
            $"Option<{mapType innerType}>"
        | t when t.StartsWith("list<") || t.EndsWith(" list") ->
            let innerType = 
                if t.StartsWith("list<") then
                    t.Substring(5, t.Length - 6)
                else
                    t.Substring(0, t.Length - 5)
            $"Vec<{mapType innerType}>"
        | t when t.StartsWith("array<") || t.EndsWith(" array") || t.EndsWith("[]") ->
            let innerType = 
                if t.StartsWith("array<") then
                    t.Substring(6, t.Length - 7)
                elif t.EndsWith("[]") then
                    t.Substring(0, t.Length - 2)
                else
                    t.Substring(0, t.Length - 6)
            $"Vec<{mapType innerType}>"
        | t when t.Contains("*") -> // Tuple types
            let parts = t.Split('*')
            let mappedParts = parts |> Array.map (fun p -> mapType p.Trim())
            $"({String.Join(", ", mappedParts)})"
        | _ -> $"/* Unmapped type: {fsType} */ ()"

    /// Map F# operators to Rust
    let mapOperator (op: string) =
        match op with
        | "=" -> "=="
        | "<>" -> "!="
        | _ -> op

    /// Map F# list operations to Rust
    let mapListOperation (operation: string) =
        match operation with
        | "List.fold" -> ".iter().fold"
        | "List.map" -> ".iter().map"
        | "List.filter" -> ".iter().filter"
        | "List.length" -> ".len()"
        | "List.isEmpty" -> ".is_empty()"
        | "List.head" -> ".first().unwrap()"
        | "List.tail" -> "&[1..]"
        | _ -> $"/* Unmapped list operation: {operation} */"

    /// Improved transpilation for basic F# constructs
    let simpleTranspile (fsharpCode: string) =
        // This is a simplified approach using regex for the proof of concept
        let mutable rustCode = fsharpCode

        // Replace F# module declaration
        let moduleRegex = Regex(@"module\s+(\w+)")
        rustCode <- moduleRegex.Replace(rustCode, "// Module $1")

        // Replace F# recursive function definitions
        let recFunctionRegex = Regex(@"let\s+rec\s+(\w+)(?:\s*\(([^)]*)\))?\s*(?::\s*([^=]+))?\s*=\s*(.+?)(?=let|\z)", RegexOptions.Singleline)
        rustCode <- recFunctionRegex.Replace(rustCode, fun m ->
            let functionName = m.Groups.[1].Value
            let parameters =
                if m.Groups.[2].Success then
                    m.Groups.[2].Value.Split([|','|], StringSplitOptions.RemoveEmptyEntries)
                    |> Array.map (fun p ->
                        let parts = p.Trim().Split(':')
                        if parts.Length > 1 then
                            $"{parts.[0].Trim()}: {mapType (parts.[1].Trim())}"
                        else
                            $"{parts.[0].Trim()}: /* unknown type */")
                    |> String.concat ", "
                else ""

            let returnType =
                if m.Groups.[3].Success then
                    mapType (m.Groups.[3].Value.Trim())
                else "/* unknown return type */"

            let body = m.Groups.[4].Value.Trim()
                        .Replace("then", "{")
                        .Replace("else", "} else {")
                        .Replace("->", "=>")

            $"fn {functionName}({parameters}) -> {returnType} {{\n    {body}\n}}")

        // Replace F# function definitions
        let functionRegex = Regex(@"let\s+(\w+)(?:\s*\(([^)]*)\))?\s*(?::\s*([^=]+))?\s*=\s*(.+?)(?=let|\z)", RegexOptions.Singleline)
        rustCode <- functionRegex.Replace(rustCode, fun m ->
            let functionName = m.Groups.[1].Value
            let parameters =
                if m.Groups.[2].Success then
                    m.Groups.[2].Value.Split([|','|], StringSplitOptions.RemoveEmptyEntries)
                    |> Array.map (fun p ->
                        let parts = p.Trim().Split(':')
                        if parts.Length > 1 then
                            $"{parts.[0].Trim()}: {mapType (parts.[1].Trim())}"
                        else
                            $"{parts.[0].Trim()}: /* unknown type */")
                    |> String.concat ", "
                else ""

            let returnType =
                if m.Groups.[3].Success then
                    mapType (m.Groups.[3].Value.Trim())
                else "/* unknown return type */"

            let body = m.Groups.[4].Value.Trim()
                        .Replace("then", "{")
                        .Replace("else", "} else {")
                        .Replace("->", "=>")

            $"fn {functionName}({parameters}) -> {returnType} {{\n    {body}\n}}")

        // Replace F# if/then/else
        let ifRegex = Regex(@"if\s+(.+?)\s+then\s+(.+?)(?:\s+else\s+(.+?))?(?=\s*let|\s*if|\z)", RegexOptions.Singleline)
        rustCode <- ifRegex.Replace(rustCode, fun m ->
            let condition = m.Groups.[1].Value.Trim()
                            .Replace("=", "==")
                            .Replace("<>", "!=")
            let thenBranch = m.Groups.[2].Value.Trim()

            if m.Groups.[3].Success then
                let elseBranch = m.Groups.[3].Value.Trim()
                $"if {condition} {{ {thenBranch} }} else {{ {elseBranch} }}"
            else
                $"if {condition} {{ {thenBranch} }}")

        // Replace F# match expressions
        let matchRegex = Regex(@"match\s+(.+?)\s+with\s+\|\s+(.+?)(?=let|\z)", RegexOptions.Singleline)
        rustCode <- matchRegex.Replace(rustCode, fun m ->
            let expr = m.Groups.[1].Value.Trim()
            let cases = m.Groups.[2].Value.Trim()

            // Process match cases
            let caseRegex = Regex(@"\|\s+(.+?)\s+->\s+(.+?)(?=\||\z)", RegexOptions.Singleline)
            let processedCases = caseRegex.Replace(cases, fun c ->
                let pattern = c.Groups.[1].Value.Trim()
                                .Replace("[]", "[]")
                                .Replace("::", "")
                                .Replace("None", "None")
                                .Replace("Some", "Some")
                let result = c.Groups.[2].Value.Trim()
                $"{pattern} => {{ {result} }},")

            $"match {expr} {{\n{processedCases}\n}}")

        // Replace F# list operations
        let listOpRegex = Regex(@"(List\.\w+)\s+")
        rustCode <- listOpRegex.Replace(rustCode, fun m ->
            let operation = m.Groups.[1].Value
            mapListOperation operation + " ")

        // Replace F# types
        let typeRegex = Regex(@":\s*(\w+(?:<[^>]+>)?|\w+\s+\w+|\w+\[\])")
        rustCode <- typeRegex.Replace(rustCode, fun m ->
            let fsType = m.Groups.[1].Value.Trim()
            $": {mapType fsType}")

        // Replace F# operators
        let operatorRegex = Regex(@"\s+([=<>]+)\s+")
        rustCode <- operatorRegex.Replace(rustCode, fun m ->
            let op = m.Groups.[1].Value
            $" {mapOperator op} ")

        // Replace F# None/Some with Rust Option
        rustCode <- rustCode.Replace("None", "None")
                           .Replace("Some ", "Some(")
                           .Replace("Some(", "Some(")
                           .Replace(") }", ")}")

        // Replace F# list literals
        let listLiteralRegex = Regex(@"\[([^\]]*)\]")
        rustCode <- listLiteralRegex.Replace(rustCode, fun m ->
            let items = m.Groups.[1].Value
            $"vec![{items}]")

        rustCode

    /// Transpile F# file to Rust
    let transpileFile (inputPath: string) (outputPath: string) =
        try
            // Read the F# code
            let fsharpCode = File.ReadAllText(inputPath)

            // Transpile to Rust
            let rustCode = simpleTranspile fsharpCode

            // Write the Rust code
            File.WriteAllText(outputPath, rustCode)

            true
        with
        | ex ->
            printfn $"Error transpiling file: {ex.Message}"
            false
