#!/usr/bin/env dotnet fsi

// SIMPLE WORKING TASK MANAGER - GENERATED BY TARS
// This actually compiles and runs!

open System
open System.IO
open System.Text.Json

type Priority = High | Medium | Low

type TaskItem = {
    Id: Guid
    Title: string
    Description: string
    Priority: Priority
    DueDate: DateTime option
    IsCompleted: bool
    CreatedAt: DateTime
}

type TaskManager() =
    let mutable tasks: TaskItem list = []
    
    member _.AddTask(title: string, description: string, priority: Priority, ?dueDate: DateTime) =
        let task = {
            Id = Guid.NewGuid()
            Title = title
            Description = description
            Priority = priority
            DueDate = dueDate
            IsCompleted = false
            CreatedAt = DateTime.UtcNow
        }
        tasks <- task :: tasks
        printfn "✅ Added task: %s" title
        task
    
    member _.CompleteTask(taskId: Guid) =
        match tasks |> List.tryFind (fun t -> t.Id = taskId) with
        | Some task when not task.IsCompleted ->
            let completedTask = { task with IsCompleted = true }
            tasks <- tasks |> List.map (fun t -> if t.Id = taskId then completedTask else t)
            printfn "🎉 Completed task: %s" task.Title
            Ok completedTask
        | Some _ -> Error "Task is already completed"
        | None -> Error "Task not found"
    
    member _.GetTasks() = tasks
    
    member _.GetTasksByPriority(priority: Priority) =
        tasks |> List.filter (fun t -> t.Priority = priority)
    
    member _.GetOverdueTasks() =
        let now = DateTime.UtcNow
        tasks |> List.filter (fun t -> 
            not t.IsCompleted && 
            match t.DueDate with
            | Some due -> due < now
            | None -> false)
    
    member _.GetTaskStatistics() =
        let total = tasks.Length
        let completed = tasks |> List.filter (fun t -> t.IsCompleted) |> List.length
        {|
            Total = total
            Completed = completed
            Pending = total - completed
            CompletionRate = if total > 0 then (float completed / float total) * 100.0 else 0.0
        |}

// Demo Application
printfn "🚀 SIMPLE TASK MANAGER - GENERATED BY TARS"
printfn "=========================================="
printfn ""

let taskManager = TaskManager()

// Add sample tasks
printfn "➕ Adding sample tasks..."
let task1 = taskManager.AddTask("Complete project proposal", "Write and review the Q2 project proposal", High, DateTime.Today.AddDays(2.0))
let task2 = taskManager.AddTask("Buy groceries", "Milk, bread, eggs, vegetables", Medium, DateTime.Today.AddDays(1.0))
let task3 = taskManager.AddTask("Call dentist", "Schedule annual checkup appointment", Low, DateTime.Today.AddDays(7.0))
let task4 = taskManager.AddTask("Review code", "Review pull requests from team", High, DateTime.Today)

printfn ""
printfn "📊 Current Statistics:"
let stats = taskManager.GetTaskStatistics()
printfn "  Total: %d | Completed: %d | Pending: %d" stats.Total stats.Completed stats.Pending
printfn "  Completion Rate: %.1f%%" stats.CompletionRate

// Complete a task
printfn ""
printfn "✅ Completing a task..."
match taskManager.CompleteTask(task4.Id) with
| Ok _ -> printfn "Task completed successfully!"
| Error msg -> printfn "Error: %s" msg

// Show high priority tasks
printfn ""
printfn "🔥 High Priority Tasks:"
taskManager.GetTasksByPriority(High) |> List.iter (fun t ->
    let status = if t.IsCompleted then "✅" else "⏳"
    printfn "  %s %s - %s" status t.Title t.Description)

// Show overdue tasks
printfn ""
printfn "⚠️ Overdue Tasks:"
let overdueTasks = taskManager.GetOverdueTasks()
if overdueTasks.IsEmpty then
    printfn "  No overdue tasks!"
else
    overdueTasks |> List.iter (fun t ->
        printfn "  • %s (Due: %A)" t.Title t.DueDate)

// Final statistics
printfn ""
printfn "📈 Final Statistics:"
let finalStats = taskManager.GetTaskStatistics()
printfn "  Total: %d | Completed: %d | Pending: %d" finalStats.Total finalStats.Completed finalStats.Pending
printfn "  Completion Rate: %.1f%%" finalStats.CompletionRate

printfn ""
printfn "✅ TARS successfully generated a working task manager!"
printfn "🎯 This demonstrates TARS can translate explorations into working, compiling, executable code!"
