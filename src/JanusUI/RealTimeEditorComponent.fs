module JanusUI.RealTimeEditorComponent

open Elmish
open Fable.React
open Fable.React.Props
open Feliz
open System

// Generated by: frontend_engineer_001
// Pattern: WebSocket Integration
// Research Integration: true
// Auto-generated for Multi-Agent Collaborative Research

type User = {
    UserId: string
    UserName: string
    UserType: string
    IsOnline: bool
    CursorPosition: int
    SelectionRange: int * int
    Color: string
}

type DocumentSection =
    | Abstract
    | Introduction
    | Methodology
    | Results
    | Discussion
    | Conclusion
    | References

type Comment = {
    CommentId: string
    AuthorId: string
    AuthorName: string
    Content: string
    Position: int
    Timestamp: DateTime
    IsResolved: bool
    Replies: Comment list
}

type Change = {
    ChangeId: string
    UserId: string
    Operation: string // "insert", "delete", "replace"
    Position: int
    Content: string
    Timestamp: DateTime
}

type Model = {
    DocumentContent: string
    CurrentSection: DocumentSection
    ConnectedUsers: User list
    Comments: Comment list
    Changes: Change list
    IsConnected: bool
    CurrentUser: User
    SelectedText: string
    CursorPosition: int
    IsEditing: bool
    ShowComments: bool
    ShowChanges: bool
    WebSocketUrl: string
}

type Msg =
    | ConnectWebSocket
    | DisconnectWebSocket
    | WebSocketConnected
    | WebSocketDisconnected
    | UserJoined of User
    | UserLeft of string
    | UserCursorMoved of string * int
    | TextChanged of string
    | TextInserted of int * string
    | TextDeleted of int * int
    | SectionChanged of DocumentSection
    | AddComment of int * string
    | ResolveComment of string
    | ReplyToComment of string * string
    | ToggleComments
    | ToggleChanges
    | SelectText of int * int
    | MoveCursor of int
    | ReceiveChange of Change
    | SendChange of Change

let defaultUser = {
    UserId = "current_user"
    UserName = "Research Agent"
    UserType = "AI Researcher"
    IsOnline = true
    CursorPosition = 0
    SelectionRange = (0, 0)
    Color = "#3498db"
}

let sampleUsers = [
    { UserId = "cosmologist_001"; UserName = "Dr. Cosmos"; UserType = "Cosmologist"; IsOnline = true; CursorPosition = 150; SelectionRange = (0, 0); Color = "#e74c3c" }
    { UserId = "peer_reviewer_001"; UserName = "Prof. Review"; UserType = "Peer Reviewer"; IsOnline = true; CursorPosition = 300; SelectionRange = (0, 0); Color = "#27ae60" }
    { UserId = "data_scientist_001"; UserName = "Dr. Data"; UserType = "Data Scientist"; IsOnline = false; CursorPosition = 0; SelectionRange = (0, 0); Color = "#9b59b6" }
]

let sampleDocument = """# Multi-Agent Investigation of Janus Cosmological Model

## Abstract

The Janus cosmological model proposes a universe with time-reversal symmetry around the Big Bang, featuring dual evolution branches. This study presents a comprehensive multi-agent investigation of the model's mathematical consistency, observational predictions, and viability as an alternative to the standard ΛCDM cosmology.

## Introduction

Recent observations of cosmic acceleration have led to the introduction of dark energy in the standard cosmological model. However, alternative explanations continue to be explored. The Janus model, proposed by Petit and d'Agostini, suggests a universe with two time-symmetric branches evolving from a common Big Bang event.

## Methodology

Our investigation employs a multi-agent approach with specialized AI researchers:
- Theoretical analysis of the Janus field equations
- Statistical comparison with observational data
- Peer review and validation processes
- Collaborative documentation and publication

## Results

[Results section to be completed by research agents]

## Discussion

[Discussion section under collaborative development]

## Conclusion

[Conclusions pending final analysis]

## References

[References to be compiled]
"""

let init () =
    {
        DocumentContent = sampleDocument
        CurrentSection = Abstract
        ConnectedUsers = sampleUsers
        Comments = []
        Changes = []
        IsConnected = false
        CurrentUser = defaultUser
        SelectedText = ""
        CursorPosition = 0
        IsEditing = false
        ShowComments = true
        ShowChanges = true
        WebSocketUrl = "ws://localhost:8080/collaboration"
    }, Cmd.ofMsg ConnectWebSocket

let update msg model =
    match msg with
    | ConnectWebSocket ->
        // Simulate WebSocket connection
        { model with IsConnected = true }, Cmd.ofMsg WebSocketConnected
    
    | DisconnectWebSocket ->
        { model with IsConnected = false }, Cmd.ofMsg WebSocketDisconnected
    
    | WebSocketConnected ->
        model, Cmd.none
    
    | WebSocketDisconnected ->
        { model with ConnectedUsers = [] }, Cmd.none
    
    | UserJoined user ->
        let updatedUsers = user :: (model.ConnectedUsers |> List.filter (fun u -> u.UserId <> user.UserId))
        { model with ConnectedUsers = updatedUsers }, Cmd.none
    
    | UserLeft userId ->
        let updatedUsers = model.ConnectedUsers |> List.filter (fun u -> u.UserId <> userId)
        { model with ConnectedUsers = updatedUsers }, Cmd.none
    
    | UserCursorMoved (userId, position) ->
        let updatedUsers = 
            model.ConnectedUsers 
            |> List.map (fun u -> 
                if u.UserId = userId then { u with CursorPosition = position } else u)
        { model with ConnectedUsers = updatedUsers }, Cmd.none
    
    | TextChanged content ->
        { model with DocumentContent = content }, Cmd.none
    
    | TextInserted (position, text) ->
        let newContent = 
            model.DocumentContent.Substring(0, position) + 
            text + 
            model.DocumentContent.Substring(position)
        { model with DocumentContent = newContent }, Cmd.none
    
    | TextDeleted (start, length) ->
        let newContent = 
            model.DocumentContent.Substring(0, start) + 
            model.DocumentContent.Substring(start + length)
        { model with DocumentContent = newContent }, Cmd.none
    
    | SectionChanged section ->
        { model with CurrentSection = section }, Cmd.none
    
    | AddComment (position, content) ->
        let newComment = {
            CommentId = Guid.NewGuid().ToString()
            AuthorId = model.CurrentUser.UserId
            AuthorName = model.CurrentUser.UserName
            Content = content
            Position = position
            Timestamp = DateTime.UtcNow
            IsResolved = false
            Replies = []
        }
        { model with Comments = newComment :: model.Comments }, Cmd.none
    
    | ResolveComment commentId ->
        let updatedComments = 
            model.Comments 
            |> List.map (fun c -> 
                if c.CommentId = commentId then { c with IsResolved = true } else c)
        { model with Comments = updatedComments }, Cmd.none
    
    | ReplyToComment (commentId, reply) ->
        // Implementation for comment replies
        model, Cmd.none
    
    | ToggleComments ->
        { model with ShowComments = not model.ShowComments }, Cmd.none
    
    | ToggleChanges ->
        { model with ShowChanges = not model.ShowChanges }, Cmd.none
    
    | SelectText (start, endPos) ->
        let selectedText = 
            if start < endPos && start >= 0 && endPos <= model.DocumentContent.Length then
                model.DocumentContent.Substring(start, endPos - start)
            else ""
        { model with SelectedText = selectedText }, Cmd.none
    
    | MoveCursor position ->
        { model with CursorPosition = position }, Cmd.none
    
    | ReceiveChange change ->
        { model with Changes = change :: model.Changes }, Cmd.none
    
    | SendChange change ->
        { model with Changes = change :: model.Changes }, Cmd.none

let sectionToString = function
    | Abstract -> "Abstract"
    | Introduction -> "Introduction"
    | Methodology -> "Methodology"
    | Results -> "Results"
    | Discussion -> "Discussion"
    | Conclusion -> "Conclusion"
    | References -> "References"

let userPresenceIndicator user =
    div [
        Style [
            Display "flex"
            AlignItems "center"
            Padding "8px"
            Margin "4px"
            BackgroundColor (if user.IsOnline then "#d5f4e6" else "#ffeaa7")
            BorderRadius "6px"
            BorderLeft (sprintf "4px solid %s" user.Color)
        ]
    ] [
        div [
            Style [
                Width "12px"
                Height "12px"
                BorderRadius "50%"
                BackgroundColor (if user.IsOnline then "#27ae60" else "#f39c12")
                MarginRight "8px"
            ]
        ] []
        div [] [
            strong [] [ str user.UserName ]
            br []
            small [ Style [ Color "#7f8c8d" ] ] [ str user.UserType ]
        ]
        div [ Style [ MarginLeft "auto"; FontSize "12px"; Color "#7f8c8d" ] ] [
            str (if user.IsOnline then "Online" else "Offline")
        ]
    ]

let commentBubble comment =
    div [
        Style [
            BackgroundColor "#fff3cd"
            Border "1px solid #ffeaa7"
            BorderRadius "8px"
            Padding "12px"
            Margin "8px 0"
            Position "relative"
        ]
    ] [
        div [ Style [ Display "flex"; JustifyContent "space-between"; AlignItems "center"; MarginBottom "8px" ] ] [
            strong [ Style [ Color "#856404" ] ] [ str comment.AuthorName ]
            small [ Style [ Color "#6c757d" ] ] [ str (comment.Timestamp.ToString("HH:mm")) ]
        ]
        p [ Style [ Margin "0"; Color "#856404" ] ] [ str comment.Content ]
        if not comment.IsResolved then
            button [
                Style [
                    BackgroundColor "#28a745"
                    Color "white"
                    Border "none"
                    Padding "4px 8px"
                    BorderRadius "4px"
                    FontSize "12px"
                    Cursor "pointer"
                    MarginTop "8px"
                ]
            ] [ str "✓ Resolve" ]
    ]

let sectionNavigator currentSection dispatch =
    let sections = [Abstract; Introduction; Methodology; Results; Discussion; Conclusion; References]
    div [
        Style [
            Display "flex"
            FlexWrap "wrap"
            Gap "8px"
            Padding "16px"
            BackgroundColor "#f8f9fa"
            BorderRadius "8px"
            MarginBottom "16px"
        ]
    ] [
        for section in sections do
            let isActive = section = currentSection
            button [
                OnClick (fun _ -> dispatch (SectionChanged section))
                Style [
                    BackgroundColor (if isActive then "#007bff" else "white")
                    Color (if isActive then "white" else "#007bff")
                    Border "1px solid #007bff"
                    Padding "8px 16px"
                    BorderRadius "4px"
                    Cursor "pointer"
                    FontWeight (if isActive then "bold" else "normal")
                ]
            ] [ str (sectionToString section) ]
    ]

let collaborativeEditor model dispatch =
    div [
        Style [
            Position "relative"
            Border "1px solid #ddd"
            BorderRadius "8px"
            MinHeight "400px"
            BackgroundColor "white"
        ]
    ] [
        // Editor toolbar
        div [
            Style [
                Display "flex"
                JustifyContent "space-between"
                AlignItems "center"
                Padding "12px"
                BackgroundColor "#f8f9fa"
                BorderBottom "1px solid #ddd"
                BorderRadius "8px 8px 0 0"
            ]
        ] [
            div [ Style [ Display "flex"; Gap "8px" ] ] [
                button [ Style [ Padding "6px 12px"; BorderRadius "4px"; Border "1px solid #ddd"; BackgroundColor "white" ] ] [ str "📝 Edit" ]
                button [ Style [ Padding "6px 12px"; BorderRadius "4px"; Border "1px solid #ddd"; BackgroundColor "white" ] ] [ str "💬 Comment" ]
                button [ Style [ Padding "6px 12px"; BorderRadius "4px"; Border "1px solid #ddd"; BackgroundColor "white" ] ] [ str "📋 Suggest" ]
            ]
            div [ Style [ Display "flex"; AlignItems "center"; Gap "8px" ] ] [
                span [ Style [ FontSize "12px"; Color "#6c757d" ] ] [ 
                    str (sprintf "Connected: %d users" (model.ConnectedUsers |> List.filter (fun u -> u.IsOnline) |> List.length))
                ]
                div [
                    Style [
                        Width "12px"
                        Height "12px"
                        BorderRadius "50%"
                        BackgroundColor (if model.IsConnected then "#28a745" else "#dc3545")
                    ]
                ] []
            ]
        ]
        
        // Main editor area
        textarea [
            Value model.DocumentContent
            OnChange (fun e -> dispatch (TextChanged e.target?value))
            Style [
                Width "100%"
                Height "400px"
                Border "none"
                Padding "16px"
                FontFamily "Monaco, 'Courier New', monospace"
                FontSize "14px"
                LineHeight "1.6"
                Resize "none"
                Outline "none"
            ]
            Placeholder "Start typing your research document..."
        ]
        
        // User cursors overlay (simulated)
        for user in model.ConnectedUsers do
            if user.IsOnline && user.UserId <> model.CurrentUser.UserId then
                div [
                    Style [
                        Position "absolute"
                        Top (sprintf "%dpx" (100 + user.CursorPosition / 10))
                        Left "20px"
                        Width "2px"
                        Height "20px"
                        BackgroundColor user.Color
                        ZIndex 10
                    ]
                ] [
                    div [
                        Style [
                            Position "absolute"
                            Top "-25px"
                            Left "0"
                            BackgroundColor user.Color
                            Color "white"
                            Padding "2px 6px"
                            BorderRadius "4px"
                            FontSize "10px"
                            WhiteSpace "nowrap"
                        ]
                    ] [ str user.UserName ]
                ]
    ]

let view model dispatch =
    div [
        Class "realtime-editor"
        Style [
            FontFamily "Arial, sans-serif"
            Padding "20px"
            BackgroundColor "#f5f5f5"
            MinHeight "100vh"
        ]
    ] [
        // Header
        div [
            Style [
                BackgroundColor "#2c3e50"
                Color "white"
                Padding "20px"
                BorderRadius "8px"
                MarginBottom "20px"
                TextAlign "center"
            ]
        ] [
            h1 [ Style [ Margin "0" ] ] [ str "📝 Real-Time Collaborative Research Editor" ]
            p [ Style [ Margin "8px 0 0 0"; Opacity "0.8" ] ] [ 
                str "Multi-agent collaborative document editing with live synchronization" 
            ]
        ]

        div [ Style [ Display "grid"; GridTemplateColumns "1fr 300px"; Gap "20px" ] ] [
            // Main editor area
            div [] [
                // Section navigator
                sectionNavigator model.CurrentSection dispatch
                
                // Collaborative editor
                div [
                    Style [
                        BackgroundColor "white"
                        BorderRadius "8px"
                        BoxShadow "0 2px 4px rgba(0,0,0,0.1)"
                        Overflow "hidden"
                    ]
                ] [
                    collaborativeEditor model dispatch
                ]
                
                // Editor controls
                div [
                    Style [
                        BackgroundColor "white"
                        Padding "16px"
                        BorderRadius "8px"
                        MarginTop "16px"
                        BoxShadow "0 2px 4px rgba(0,0,0,0.1)"
                    ]
                ] [
                    div [ Style [ Display "flex"; Gap "12px"; AlignItems "center" ] ] [
                        button [
                            OnClick (fun _ -> dispatch ToggleComments)
                            Style [
                                BackgroundColor (if model.ShowComments then "#007bff" else "#6c757d")
                                Color "white"
                                Border "none"
                                Padding "8px 16px"
                                BorderRadius "4px"
                                Cursor "pointer"
                            ]
                        ] [ str (sprintf "💬 Comments (%d)" model.Comments.Length) ]
                        
                        button [
                            OnClick (fun _ -> dispatch ToggleChanges)
                            Style [
                                BackgroundColor (if model.ShowChanges then "#007bff" else "#6c757d")
                                Color "white"
                                Border "none"
                                Padding "8px 16px"
                                BorderRadius "4px"
                                Cursor "pointer"
                            ]
                        ] [ str (sprintf "📝 Changes (%d)" model.Changes.Length) ]
                        
                        div [ Style [ MarginLeft "auto"; FontSize "14px"; Color "#6c757d" ] ] [
                            str (sprintf "Current section: %s" (sectionToString model.CurrentSection))
                        ]
                    ]
                ]
            ]
            
            // Sidebar
            div [] [
                // Connected users
                div [
                    Style [
                        BackgroundColor "white"
                        Padding "16px"
                        BorderRadius "8px"
                        MarginBottom "16px"
                        BoxShadow "0 2px 4px rgba(0,0,0,0.1)"
                    ]
                ] [
                    h3 [ Style [ MarginTop "0"; Color "#2c3e50" ] ] [ str "👥 Connected Users" ]
                    div [] (model.ConnectedUsers |> List.map userPresenceIndicator)
                ]
                
                // Comments panel
                if model.ShowComments then
                    div [
                        Style [
                            BackgroundColor "white"
                            Padding "16px"
                            BorderRadius "8px"
                            MarginBottom "16px"
                            BoxShadow "0 2px 4px rgba(0,0,0,0.1)"
                            MaxHeight "400px"
                            OverflowY "auto"
                        ]
                    ] [
                        h3 [ Style [ MarginTop "0"; Color "#2c3e50" ] ] [ str "💬 Comments" ]
                        if model.Comments.IsEmpty then
                            p [ Style [ Color "#6c757d"; FontStyle "italic" ] ] [ str "No comments yet" ]
                        else
                            div [] (model.Comments |> List.map commentBubble)
                    ]
                
                // Changes panel
                if model.ShowChanges then
                    div [
                        Style [
                            BackgroundColor "white"
                            Padding "16px"
                            BorderRadius "8px"
                            BoxShadow "0 2px 4px rgba(0,0,0,0.1)"
                            MaxHeight "300px"
                            OverflowY "auto"
                        ]
                    ] [
                        h3 [ Style [ MarginTop "0"; Color "#2c3e50" ] ] [ str "📝 Recent Changes" ]
                        if model.Changes.IsEmpty then
                            p [ Style [ Color "#6c757d"; FontStyle "italic" ] ] [ str "No changes yet" ]
                        else
                            div [] [
                                for change in model.Changes |> List.take (min 5 model.Changes.Length) do
                                    div [
                                        Style [
                                            Padding "8px"
                                            Margin "4px 0"
                                            BackgroundColor "#f8f9fa"
                                            BorderRadius "4px"
                                            FontSize "12px"
                                        ]
                                    ] [
                                        strong [] [ str change.Operation ]
                                        br []
                                        str (sprintf "by %s at %s" change.UserId (change.Timestamp.ToString("HH:mm")))
                                    ]
                            ]
                    ]
            ]
        ]
    ]

// Program definition
let program =
    Program.mkProgram init update view
