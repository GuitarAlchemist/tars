module JanusUI.ResearchDashboardComponent

open Elmish
open Fable.React
open Fable.React.Props
open Feliz

// Generated by: frontend_engineer_001
// Pattern: Model-View-Update
// Research Integration: true
// Auto-generated for Janus Research Program

type ResearchPhase =
    | Initialization
    | ScientificDomain
    | CosmologySpecific
    | PeerReview

type ResearchMetrics = {
    TasksCompleted: int
    TasksTotal: int
    EffectivenessScore: float
    AutonomyLevel: float
    GrammarEvolution: int
}

type AgentStatus = {
    AgentId: string
    AgentType: string
    Performance: float
    CurrentTask: string
    Status: string
}

type Model = {
    CurrentPhase: ResearchPhase
    Metrics: ResearchMetrics
    Agents: AgentStatus list
    LastUpdate: System.DateTime
    IsLoading: bool
    ErrorMessage: string option
}

type Msg =
    | LoadDashboard
    | UpdateMetrics of ResearchMetrics
    | UpdateAgentStatus of string * AgentStatus
    | PhaseTransition of ResearchPhase
    | RefreshData
    | HandleError of string

let init () =
    {
        CurrentPhase = Initialization
        Metrics = {
            TasksCompleted = 0
            TasksTotal = 20
            EffectivenessScore = 0.70
            AutonomyLevel = 0.75
            GrammarEvolution = 0
        }
        Agents = [
            { AgentId = "research_director_001"; AgentType = "ResearchDirector"; Performance = 0.72; CurrentTask = "Project coordination"; Status = "Active" }
            { AgentId = "cosmologist_001"; AgentType = "TheoreticalCosmologist"; Performance = 0.78; CurrentTask = "Janus model analysis"; Status = "Active" }
            { AgentId = "data_scientist_001"; AgentType = "AstronomicalDataScientist"; Performance = 0.75; CurrentTask = "Data collection"; Status = "Active" }
        ]
        LastUpdate = System.DateTime.UtcNow
        IsLoading = false
        ErrorMessage = None
    }, Cmd.ofMsg LoadDashboard

let update msg model =
    match msg with
    | LoadDashboard ->
        { model with IsLoading = true }, Cmd.none
    
    | UpdateMetrics metrics ->
        { model with 
            Metrics = metrics
            LastUpdate = System.DateTime.UtcNow
            IsLoading = false 
        }, Cmd.none
    
    | UpdateAgentStatus (agentId, status) ->
        let updatedAgents = 
            model.Agents 
            |> List.map (fun agent -> 
                if agent.AgentId = agentId then status else agent)
        { model with Agents = updatedAgents }, Cmd.none
    
    | PhaseTransition phase ->
        { model with CurrentPhase = phase }, Cmd.none
    
    | RefreshData ->
        { model with IsLoading = true }, Cmd.ofMsg LoadDashboard
    
    | HandleError error ->
        { model with ErrorMessage = Some error; IsLoading = false }, Cmd.none

let phaseToString = function
    | Initialization -> "Research Initiation"
    | ScientificDomain -> "Scientific Domain Development"
    | CosmologySpecific -> "Cosmology-Specific Analysis"
    | PeerReview -> "Peer Review & Publication"

let phaseColor = function
    | Initialization -> "#3498db"
    | ScientificDomain -> "#e74c3c"
    | CosmologySpecific -> "#9b59b6"
    | PeerReview -> "#27ae60"

let progressBar value total =
    let percentage = (float value / float total) * 100.0
    div [ Class "progress-container" ] [
        div [ 
            Class "progress-bar"
            Style [ 
                Width (sprintf "%.1f%%" percentage)
                BackgroundColor "#3498db"
                Height "20px"
                BorderRadius "10px"
                Transition "width 0.3s ease"
            ]
        ] []
        span [ Class "progress-text" ] [ 
            str (sprintf "%d/%d (%.1f%%)" value total percentage) 
        ]
    ]

let metricCard title value unit color =
    div [ 
        Class "metric-card"
        Style [
            Border (sprintf "2px solid %s" color)
            BorderRadius "8px"
            Padding "16px"
            Margin "8px"
            BackgroundColor "#f8f9fa"
            TextAlign "center"
            MinWidth "150px"
        ]
    ] [
        h3 [ Style [ Color color; MarginBottom "8px" ] ] [ str title ]
        div [ 
            Style [ 
                FontSize "24px"
                FontWeight "bold"
                Color "#2c3e50"
                MarginBottom "4px"
            ] 
        ] [ str (sprintf "%.1f" value) ]
        small [ Style [ Color "#7f8c8d" ] ] [ str unit ]
    ]

let agentStatusCard agent =
    let statusColor = if agent.Status = "Active" then "#27ae60" else "#e74c3c"
    div [
        Class "agent-card"
        Style [
            Border "1px solid #ddd"
            BorderRadius "6px"
            Padding "12px"
            Margin "8px 0"
            BackgroundColor "#ffffff"
            BoxShadow "0 2px 4px rgba(0,0,0,0.1)"
        ]
    ] [
        div [ Style [ Display "flex"; JustifyContent "space-between"; AlignItems "center" ] ] [
            div [] [
                strong [] [ str agent.AgentId ]
                br []
                small [ Style [ Color "#7f8c8d" ] ] [ str agent.AgentType ]
            ]
            div [ 
                Style [ 
                    Color statusColor
                    FontWeight "bold"
                    Padding "4px 8px"
                    BorderRadius "4px"
                    BackgroundColor (statusColor + "20")
                ]
            ] [ str agent.Status ]
        ]
        div [ Style [ MarginTop "8px" ] ] [
            small [] [ str ("Task: " + agent.CurrentTask) ]
            br []
            progressBar (int (agent.Performance * 100.0)) 100
        ]
    ]

let view model dispatch =
    div [ 
        Class "research-dashboard"
        Style [
            FontFamily "Arial, sans-serif"
            Padding "20px"
            BackgroundColor "#ecf0f1"
            MinHeight "100vh"
        ]
    ] [
        // Header
        div [ 
            Style [ 
                BackgroundColor "#2c3e50"
                Color "white"
                Padding "20px"
                BorderRadius "8px"
                MarginBottom "20px"
                TextAlign "center"
            ]
        ] [
            h1 [ Style [ Margin "0" ] ] [ str "🚀 Janus Research Program Dashboard" ]
            p [ Style [ Margin "8px 0 0 0"; Opacity "0.8" ] ] [ 
                str ("Last Updated: " + model.LastUpdate.ToString("yyyy-MM-dd HH:mm:ss")) 
            ]
        ]

        // Current Phase
        div [ 
            Style [ 
                BackgroundColor (phaseColor model.CurrentPhase)
                Color "white"
                Padding "16px"
                BorderRadius "8px"
                MarginBottom "20px"
                TextAlign "center"
            ]
        ] [
            h2 [ Style [ Margin "0" ] ] [ str ("Current Phase: " + phaseToString model.CurrentPhase) ]
        ]

        // Metrics Row
        div [ 
            Style [ 
                Display "flex"
                FlexWrap "wrap"
                JustifyContent "center"
                MarginBottom "20px"
            ]
        ] [
            metricCard "Tasks Progress" (float model.Metrics.TasksCompleted) (sprintf "/%d" model.Metrics.TasksTotal) "#3498db"
            metricCard "Effectiveness" (model.Metrics.EffectivenessScore * 100.0) "%" "#e74c3c"
            metricCard "Autonomy Level" (model.Metrics.AutonomyLevel * 100.0) "%" "#9b59b6"
            metricCard "Grammar Evolution" (float model.Metrics.GrammarEvolution) "events" "#27ae60"
        ]

        // Progress Overview
        div [
            Style [
                BackgroundColor "white"
                Padding "20px"
                BorderRadius "8px"
                MarginBottom "20px"
                BoxShadow "0 2px 4px rgba(0,0,0,0.1)"
            ]
        ] [
            h3 [ Style [ MarginTop "0"; Color "#2c3e50" ] ] [ str "📊 Research Progress" ]
            progressBar model.Metrics.TasksCompleted model.Metrics.TasksTotal
        ]

        // Agent Status
        div [
            Style [
                BackgroundColor "white"
                Padding "20px"
                BorderRadius "8px"
                MarginBottom "20px"
                BoxShadow "0 2px 4px rgba(0,0,0,0.1)"
            ]
        ] [
            h3 [ Style [ MarginTop "0"; Color "#2c3e50" ] ] [ str "🤖 Agent Status" ]
            div [] (model.Agents |> List.map agentStatusCard)
        ]

        // Control Panel
        div [
            Style [
                BackgroundColor "white"
                Padding "20px"
                BorderRadius "8px"
                BoxShadow "0 2px 4px rgba(0,0,0,0.1)"
                TextAlign "center"
            ]
        ] [
            h3 [ Style [ MarginTop "0"; Color "#2c3e50" ] ] [ str "🎛️ Control Panel" ]
            button [
                OnClick (fun _ -> dispatch RefreshData)
                Style [
                    BackgroundColor "#3498db"
                    Color "white"
                    Border "none"
                    Padding "12px 24px"
                    BorderRadius "6px"
                    Cursor "pointer"
                    FontSize "16px"
                    Margin "8px"
                ]
            ] [ str "🔄 Refresh Data" ]
            
            button [
                OnClick (fun _ -> dispatch (PhaseTransition ScientificDomain))
                Style [
                    BackgroundColor "#e74c3c"
                    Color "white"
                    Border "none"
                    Padding "12px 24px"
                    BorderRadius "6px"
                    Cursor "pointer"
                    FontSize "16px"
                    Margin "8px"
                ]
            ] [ str "⚡ Advance Phase" ]
        ]

        // Loading/Error States
        match model.IsLoading, model.ErrorMessage with
        | true, _ ->
            div [ 
                Style [ 
                    Position "fixed"
                    Top "50%"
                    Left "50%"
                    Transform "translate(-50%, -50%)"
                    BackgroundColor "rgba(0,0,0,0.8)"
                    Color "white"
                    Padding "20px"
                    BorderRadius "8px"
                ]
            ] [ str "🔄 Loading..." ]
        | false, Some error ->
            div [
                Style [
                    BackgroundColor "#e74c3c"
                    Color "white"
                    Padding "16px"
                    BorderRadius "8px"
                    MarginTop "20px"
                ]
            ] [ str ("❌ Error: " + error) ]
        | false, None -> fragment []
    ]

// Subscription for real-time updates
let subscription model =
    Cmd.none // Would implement WebSocket subscriptions for real-time data

// Program definition
let program =
    Program.mkProgram init update view
    |> Program.withSubscription subscription
