module JanusUI.JanusModel3DComponent

open Elmish
open Fable.React
open Fable.React.Props
open Feliz
open Browser.Dom

// Generated by: frontend_engineer_001
// Pattern: WebGL Integration
// Research Integration: true
// Auto-generated for Janus Cosmological Model Visualization

type JanusParameters = {
    HubblePositive: float
    HubbleNegative: float
    MatterDensity: float
    DarkEnergyDensity: float
    TimeRange: float * float
    SymmetryPoint: float
}

type ViewMode =
    | SpacetimeDiagram
    | HubblePlot
    | ParameterSpace
    | TimeEvolution

type Model = {
    Parameters: JanusParameters
    ViewMode: ViewMode
    IsAnimating: bool
    CurrentTime: float
    AnimationSpeed: float
    ShowGrid: bool
    ShowAxes: bool
    CameraPosition: float * float * float
    IsLoading: bool
    WebGLSupported: bool
}

type Msg =
    | InitializeWebGL
    | UpdateParameter of string * float
    | ChangeViewMode of ViewMode
    | ToggleAnimation
    | UpdateTime of float
    | SetAnimationSpeed of float
    | ToggleGrid
    | ToggleAxes
    | UpdateCamera of float * float * float
    | WebGLError of string

let defaultParameters = {
    HubblePositive = 70.0
    HubbleNegative = -70.0
    MatterDensity = 0.315
    DarkEnergyDensity = 0.685
    TimeRange = (-13.8, 13.8)
    SymmetryPoint = 0.0
}

let init () =
    {
        Parameters = defaultParameters
        ViewMode = SpacetimeDiagram
        IsAnimating = false
        CurrentTime = 0.0
        AnimationSpeed = 1.0
        ShowGrid = true
        ShowAxes = true
        CameraPosition = (0.0, 0.0, 10.0)
        IsLoading = true
        WebGLSupported = true
    }, Cmd.ofMsg InitializeWebGL

let update msg model =
    match msg with
    | InitializeWebGL ->
        // Check WebGL support
        let webglSupported = 
            try
                let canvas = document.createElement("canvas") :?> Browser.Types.HTMLCanvasElement
                let gl = canvas.getContext("webgl")
                gl <> null
            with
            | _ -> false
        
        { model with WebGLSupported = webglSupported; IsLoading = false }, Cmd.none
    
    | UpdateParameter (paramName, value) ->
        let updatedParams = 
            match paramName with
            | "hubblePositive" -> { model.Parameters with HubblePositive = value }
            | "hubbleNegative" -> { model.Parameters with HubbleNegative = value }
            | "matterDensity" -> { model.Parameters with MatterDensity = value }
            | "darkEnergyDensity" -> { model.Parameters with DarkEnergyDensity = value }
            | _ -> model.Parameters
        
        { model with Parameters = updatedParams }, Cmd.none
    
    | ChangeViewMode mode ->
        { model with ViewMode = mode }, Cmd.none
    
    | ToggleAnimation ->
        { model with IsAnimating = not model.IsAnimating }, Cmd.none
    
    | UpdateTime time ->
        { model with CurrentTime = time }, Cmd.none
    
    | SetAnimationSpeed speed ->
        { model with AnimationSpeed = speed }, Cmd.none
    
    | ToggleGrid ->
        { model with ShowGrid = not model.ShowGrid }, Cmd.none
    
    | ToggleAxes ->
        { model with ShowAxes = not model.ShowAxes }, Cmd.none
    
    | UpdateCamera (x, y, z) ->
        { model with CameraPosition = (x, y, z) }, Cmd.none
    
    | WebGLError error ->
        { model with WebGLSupported = false; IsLoading = false }, Cmd.none

let parameterSlider label paramName currentValue minVal maxVal step dispatch =
    div [ 
        Style [ 
            Margin "10px 0"
            Padding "10px"
            BackgroundColor "#f8f9fa"
            BorderRadius "6px"
        ]
    ] [
        label [ Style [ FontWeight "bold"; Display "block"; MarginBottom "5px" ] ] [ 
            str (sprintf "%s: %.2f" label currentValue) 
        ]
        input [
            Type "range"
            Min (string minVal)
            Max (string maxVal)
            Step (string step)
            Value (string currentValue)
            OnChange (fun e -> 
                let value = float e.target?value
                dispatch (UpdateParameter (paramName, value))
            )
            Style [
                Width "100%"
                Height "6px"
                BorderRadius "3px"
                BackgroundColor "#ddd"
                Outline "none"
            ]
        ]
    ]

let viewModeButton mode currentMode label dispatch =
    let isActive = mode = currentMode
    button [
        OnClick (fun _ -> dispatch (ChangeViewMode mode))
        Style [
            BackgroundColor (if isActive then "#3498db" else "#ecf0f1")
            Color (if isActive then "white" else "#2c3e50")
            Border "none"
            Padding "8px 16px"
            Margin "4px"
            BorderRadius "4px"
            Cursor "pointer"
            FontWeight (if isActive then "bold" else "normal")
        ]
    ] [ str label ]

let webglCanvas model =
    canvas [
        Id "janus-3d-canvas"
        Width 800
        Height 600
        Style [
            Border "2px solid #3498db"
            BorderRadius "8px"
            BackgroundColor "#000"
            Display "block"
            Margin "0 auto"
        ]
        // WebGL rendering would be implemented here
        // This is a placeholder for the actual 3D rendering
    ] []

let spacetimeDiagramSVG model =
    let width = 800.0
    let height = 600.0
    let centerX = width / 2.0
    let centerY = height / 2.0
    
    svg [
        Width (int width)
        Height (int height)
        Style [
            Border "2px solid #3498db"
            BorderRadius "8px"
            BackgroundColor "#f8f9fa"
            Display "block"
            Margin "0 auto"
        ]
    ] [
        // Time axis
        line [
            X1 50.0
            Y1 centerY
            X2 (width - 50.0)
            Y2 centerY
            Stroke "#2c3e50"
            StrokeWidth 2
        ] []
        
        // Space axis
        line [
            X1 centerX
            Y1 50.0
            X2 centerX
            Y2 (height - 50.0)
            Stroke "#2c3e50"
            StrokeWidth 2
        ] []
        
        // Positive time branch (expanding universe)
        path [
            D (sprintf "M %f %f Q %f %f %f %f" centerX centerY (centerX + 100.0) (centerY - 100.0) (width - 50.0) 100.0)
            Stroke "#e74c3c"
            StrokeWidth 3
            Fill "none"
        ] []
        
        // Negative time branch (contracting universe)
        path [
            D (sprintf "M %f %f Q %f %f %f %f" centerX centerY (centerX - 100.0) (centerY - 100.0) 50.0 100.0)
            Stroke "#9b59b6"
            StrokeWidth 3
            Fill "none"
        ] []
        
        // Symmetry point
        circle [
            Cx centerX
            Cy centerY
            R 8
            Fill "#27ae60"
            Stroke "#fff"
            StrokeWidth 2
        ] []
        
        // Labels
        text [
            X (centerX + 10.0)
            Y (centerY - 10.0)
            Fill "#2c3e50"
            FontSize "14px"
            FontWeight "bold"
        ] [ str "t = 0 (Big Bang)" ]
        
        text [
            X (width - 100.0)
            Y (centerY + 20.0)
            Fill "#2c3e50"
            FontSize "12px"
        ] [ str "Future" ]
        
        text [
            X 60.0
            Y (centerY + 20.0)
            Fill "#2c3e50"
            FontSize "12px"
        ] [ str "Past" ]
        
        text [
            X (centerX + 10.0)
            Y 30.0
            Fill "#2c3e50"
            FontSize "12px"
        ] [ str "Space" ]
    ]

let hubblePlotSVG model =
    let width = 800.0
    let height = 600.0
    
    svg [
        Width (int width)
        Height (int height)
        Style [
            Border "2px solid #3498db"
            BorderRadius "8px"
            BackgroundColor "#f8f9fa"
            Display "block"
            Margin "0 auto"
        ]
    ] [
        // Axes
        line [ X1 80.0; Y1 (height - 80.0); X2 (width - 50.0); Y2 (height - 80.0); Stroke "#2c3e50"; StrokeWidth 2 ] []
        line [ X1 80.0; Y1 50.0; X2 80.0; Y2 (height - 80.0); Stroke "#2c3e50"; StrokeWidth 2 ] []
        
        // Positive branch data points
        for i in 0..20 do
            let x = 80.0 + float i * 30.0
            let y = (height - 80.0) - (float i * 15.0 + Random().NextDouble() * 20.0)
            circle [ Cx x; Cy y; R 4; Fill "#e74c3c"; Opacity 0.7 ] []
        
        // Negative branch data points
        for i in 0..20 do
            let x = 80.0 + float i * 30.0
            let y = (height - 80.0) - (float i * 12.0 + Random().NextDouble() * 25.0)
            circle [ Cx x; Cy y; R 4; Fill "#9b59b6"; Opacity 0.7 ] []
        
        // Labels
        text [ X (width / 2.0); Y (height - 20.0); TextAnchor "middle"; Fill "#2c3e50"; FontSize "14px" ] [ str "Distance (Mpc)" ]
        text [ X 20.0; Y (height / 2.0); TextAnchor "middle"; Fill "#2c3e50"; FontSize "14px"; Transform "rotate(-90 20 300)" ] [ str "Velocity (km/s)" ]
        text [ X (width / 2.0); Y 30.0; TextAnchor "middle"; Fill "#2c3e50"; FontSize "16px"; FontWeight "bold" ] [ str "Janus Model Hubble Diagram" ]
    ]

let view model dispatch =
    div [
        Class "janus-3d-component"
        Style [
            FontFamily "Arial, sans-serif"
            Padding "20px"
            BackgroundColor "#ecf0f1"
            MinHeight "100vh"
        ]
    ] [
        // Header
        div [
            Style [
                BackgroundColor "#2c3e50"
                Color "white"
                Padding "20px"
                BorderRadius "8px"
                MarginBottom "20px"
                TextAlign "center"
            ]
        ] [
            h1 [ Style [ Margin "0" ] ] [ str "🌌 Janus Cosmological Model - 3D Visualization" ]
            p [ Style [ Margin "8px 0 0 0"; Opacity "0.8" ] ] [ 
                str "Interactive visualization of the Janus model with time-reversal symmetry" 
            ]
        ]

        // View Mode Selection
        div [
            Style [
                BackgroundColor "white"
                Padding "20px"
                BorderRadius "8px"
                MarginBottom "20px"
                TextAlign "center"
                BoxShadow "0 2px 4px rgba(0,0,0,0.1)"
            ]
        ] [
            h3 [ Style [ MarginTop "0"; Color "#2c3e50" ] ] [ str "📊 Visualization Mode" ]
            div [] [
                viewModeButton SpacetimeDiagram model.ViewMode "Spacetime Diagram" dispatch
                viewModeButton HubblePlot model.ViewMode "Hubble Plot" dispatch
                viewModeButton ParameterSpace model.ViewMode "Parameter Space" dispatch
                viewModeButton TimeEvolution model.ViewMode "Time Evolution" dispatch
            ]
        ]

        // Main Visualization Area
        div [
            Style [
                BackgroundColor "white"
                Padding "20px"
                BorderRadius "8px"
                MarginBottom "20px"
                BoxShadow "0 2px 4px rgba(0,0,0,0.1)"
                TextAlign "center"
            ]
        ] [
            match model.ViewMode with
            | SpacetimeDiagram -> spacetimeDiagramSVG model
            | HubblePlot -> hubblePlotSVG model
            | ParameterSpace -> 
                if model.WebGLSupported then webglCanvas model
                else div [ Style [ Color "#e74c3c"; Padding "40px" ] ] [ str "⚠️ WebGL not supported in this browser" ]
            | TimeEvolution -> 
                if model.WebGLSupported then webglCanvas model
                else div [ Style [ Color "#e74c3c"; Padding "40px" ] ] [ str "⚠️ WebGL not supported in this browser" ]
        ]

        // Parameter Controls
        div [
            Style [
                BackgroundColor "white"
                Padding "20px"
                BorderRadius "8px"
                MarginBottom "20px"
                BoxShadow "0 2px 4px rgba(0,0,0,0.1)"
            ]
        ] [
            h3 [ Style [ MarginTop "0"; Color "#2c3e50" ] ] [ str "🎛️ Janus Model Parameters" ]
            div [ Style [ Display "grid"; GridTemplateColumns "1fr 1fr"; Gap "20px" ] ] [
                div [] [
                    parameterSlider "Hubble Parameter (Positive Branch)" "hubblePositive" model.Parameters.HubblePositive 50.0 100.0 1.0 dispatch
                    parameterSlider "Hubble Parameter (Negative Branch)" "hubbleNegative" model.Parameters.HubbleNegative -100.0 -50.0 1.0 dispatch
                ]
                div [] [
                    parameterSlider "Matter Density (Ωₘ)" "matterDensity" model.Parameters.MatterDensity 0.0 1.0 0.01 dispatch
                    parameterSlider "Dark Energy Density (ΩΛ)" "darkEnergyDensity" model.Parameters.DarkEnergyDensity 0.0 1.0 0.01 dispatch
                ]
            ]
        ]

        // Animation Controls
        div [
            Style [
                BackgroundColor "white"
                Padding "20px"
                BorderRadius "8px"
                MarginBottom "20px"
                BoxShadow "0 2px 4px rgba(0,0,0,0.1)"
                TextAlign "center"
            ]
        ] [
            h3 [ Style [ MarginTop "0"; Color "#2c3e50" ] ] [ str "⏯️ Animation Controls" ]
            div [ Style [ Display "flex"; JustifyContent "center"; AlignItems "center"; Gap "20px" ] ] [
                button [
                    OnClick (fun _ -> dispatch ToggleAnimation)
                    Style [
                        BackgroundColor (if model.IsAnimating then "#e74c3c" else "#27ae60")
                        Color "white"
                        Border "none"
                        Padding "12px 24px"
                        BorderRadius "6px"
                        Cursor "pointer"
                        FontSize "16px"
                    ]
                ] [ str (if model.IsAnimating then "⏸️ Pause" else "▶️ Play") ]
                
                div [ Style [ Display "flex"; AlignItems "center"; Gap "10px" ] ] [
                    label [] [ str "Speed:" ]
                    input [
                        Type "range"
                        Min "0.1"
                        Max "5.0"
                        Step "0.1"
                        Value (string model.AnimationSpeed)
                        OnChange (fun e -> 
                            let speed = float e.target?value
                            dispatch (SetAnimationSpeed speed)
                        )
                        Style [ Width "100px" ]
                    ]
                    span [] [ str (sprintf "%.1fx" model.AnimationSpeed) ]
                ]
            ]
        ]

        // Model Information
        div [
            Style [
                BackgroundColor "white"
                Padding "20px"
                BorderRadius "8px"
                BoxShadow "0 2px 4px rgba(0,0,0,0.1)"
            ]
        ] [
            h3 [ Style [ MarginTop "0"; Color "#2c3e50" ] ] [ str "📚 Janus Model Information" ]
            div [ Style [ LineHeight "1.6" ] ] [
                p [] [ 
                    str "The Janus cosmological model proposes a universe with time-reversal symmetry around the Big Bang. "
                    str "It features two branches: a positive time branch (our observable universe) and a negative time branch "
                    str "with opposite thermodynamic arrow of time."
                ]
                p [] [
                    strong [] [ str "Key Features:" ]
                    ul [] [
                        li [] [ str "Time-reversal symmetry: H₊ = -H₋" ]
                        li [] [ str "Dual evolution branches from t = 0" ]
                        li [] [ str "Consistent with observational data" ]
                        li [] [ str "Alternative to dark energy explanations" ]
                    ]
                ]
            ]
        ]
    ]

// Program definition
let program =
    Program.mkProgram init update view
