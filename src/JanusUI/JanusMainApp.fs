module JanusUI.JanusMainApp

open Elmish
open Fable.React
open Fable.React.Props
open Feliz

// Generated by: tech_lead_001
// Pattern: Elmish Application Architecture
// Research Integration: true
// Main application orchestrating all Janus UI components

type AppPage =
    | Dashboard
    | Visualization3D
    | CollaborativeEditor
    | DataAnalysis
    | Settings

type AppModel = {
    CurrentPage: AppPage
    DashboardModel: ResearchDashboardComponent.Model option
    Visualization3DModel: JanusModel3DComponent.Model option
    EditorModel: RealTimeEditorComponent.Model option
    IsLoading: bool
    AppTitle: string
    Version: string
    LastSync: System.DateTime
}

type AppMsg =
    | NavigateTo of AppPage
    | DashboardMsg of ResearchDashboardComponent.Msg
    | Visualization3DMsg of JanusModel3DComponent.Msg
    | EditorMsg of RealTimeEditorComponent.Msg
    | InitializeApp
    | SyncData
    | AppError of string

let init () =
    {
        CurrentPage = Dashboard
        DashboardModel = None
        Visualization3DModel = None
        EditorModel = None
        IsLoading = true
        AppTitle = "Janus Research Program - Autonomous UI"
        Version = "3.0.0"
        LastSync = System.DateTime.UtcNow
    }, Cmd.ofMsg InitializeApp

let update msg model =
    match msg with
    | NavigateTo page ->
        let newModel = { model with CurrentPage = page }
        let cmd = 
            match page with
            | Dashboard when model.DashboardModel.IsNone ->
                let (dashModel, dashCmd) = ResearchDashboardComponent.init ()
                Cmd.map DashboardMsg dashCmd
            | Visualization3D when model.Visualization3DModel.IsNone ->
                let (vizModel, vizCmd) = JanusModel3DComponent.init ()
                Cmd.map Visualization3DMsg vizCmd
            | CollaborativeEditor when model.EditorModel.IsNone ->
                let (editorModel, editorCmd) = RealTimeEditorComponent.init ()
                Cmd.map EditorMsg editorCmd
            | _ -> Cmd.none
        newModel, cmd
    
    | DashboardMsg dashMsg ->
        match model.DashboardModel with
        | Some dashModel ->
            let (newDashModel, dashCmd) = ResearchDashboardComponent.update dashMsg dashModel
            { model with DashboardModel = Some newDashModel }, Cmd.map DashboardMsg dashCmd
        | None ->
            let (dashModel, dashCmd) = ResearchDashboardComponent.init ()
            let (newDashModel, newDashCmd) = ResearchDashboardComponent.update dashMsg dashModel
            { model with DashboardModel = Some newDashModel }, Cmd.map DashboardMsg newDashCmd
    
    | Visualization3DMsg vizMsg ->
        match model.Visualization3DModel with
        | Some vizModel ->
            let (newVizModel, vizCmd) = JanusModel3DComponent.update vizMsg vizModel
            { model with Visualization3DModel = Some newVizModel }, Cmd.map Visualization3DMsg vizCmd
        | None ->
            let (vizModel, vizCmd) = JanusModel3DComponent.init ()
            let (newVizModel, newVizCmd) = JanusModel3DComponent.update vizMsg vizModel
            { model with Visualization3DModel = Some newVizModel }, Cmd.map Visualization3DMsg newVizCmd
    
    | EditorMsg editorMsg ->
        match model.EditorModel with
        | Some editorModel ->
            let (newEditorModel, editorCmd) = RealTimeEditorComponent.update editorMsg editorModel
            { model with EditorModel = Some newEditorModel }, Cmd.map EditorMsg editorCmd
        | None ->
            let (editorModel, editorCmd) = RealTimeEditorComponent.init ()
            let (newEditorModel, newEditorCmd) = RealTimeEditorComponent.update editorMsg editorModel
            { model with EditorModel = Some newEditorModel }, Cmd.map EditorMsg newEditorCmd
    
    | InitializeApp ->
        // Initialize all components
        let (dashModel, dashCmd) = ResearchDashboardComponent.init ()
        let (vizModel, vizCmd) = JanusModel3DComponent.init ()
        let (editorModel, editorCmd) = RealTimeEditorComponent.init ()
        
        {
            model with
                DashboardModel = Some dashModel
                Visualization3DModel = Some vizModel
                EditorModel = Some editorModel
                IsLoading = false
        }, Cmd.batch [
            Cmd.map DashboardMsg dashCmd
            Cmd.map Visualization3DMsg vizCmd
            Cmd.map EditorMsg editorCmd
        ]
    
    | SyncData ->
        { model with LastSync = System.DateTime.UtcNow }, Cmd.none
    
    | AppError error ->
        // Handle application-level errors
        model, Cmd.none

let pageToString = function
    | Dashboard -> "Dashboard"
    | Visualization3D -> "3D Visualization"
    | CollaborativeEditor -> "Collaborative Editor"
    | DataAnalysis -> "Data Analysis"
    | Settings -> "Settings"

let pageIcon = function
    | Dashboard -> "📊"
    | Visualization3D -> "🌌"
    | CollaborativeEditor -> "📝"
    | DataAnalysis -> "📈"
    | Settings -> "⚙️"

let navigationButton page currentPage dispatch =
    let isActive = page = currentPage
    button [
        OnClick (fun _ -> dispatch (NavigateTo page))
        Style [
            Display "flex"
            AlignItems "center"
            Gap "8px"
            Padding "12px 20px"
            Border "none"
            BackgroundColor (if isActive then "#3498db" else "transparent")
            Color (if isActive then "white" else "#2c3e50")
            Cursor "pointer"
            BorderRadius "6px"
            Margin "4px 0"
            Width "100%"
            TextAlign "left"
            FontWeight (if isActive then "bold" else "normal")
            Transition "all 0.3s ease"
        ]
        OnMouseEnter (fun e -> 
            if not isActive then
                e.target?style?backgroundColor <- "#ecf0f1"
        )
        OnMouseLeave (fun e ->
            if not isActive then
                e.target?style?backgroundColor <- "transparent"
        )
    ] [
        span [ Style [ FontSize "18px" ] ] [ str (pageIcon page) ]
        span [] [ str (pageToString page) ]
    ]

let sidebar model dispatch =
    div [
        Style [
            Width "250px"
            BackgroundColor "white"
            BorderRight "1px solid #ddd"
            Padding "20px"
            Height "100vh"
            OverflowY "auto"
            BoxShadow "2px 0 4px rgba(0,0,0,0.1)"
        ]
    ] [
        // App header
        div [
            Style [
                TextAlign "center"
                MarginBottom "30px"
                Padding "20px 0"
                BorderBottom "1px solid #ecf0f1"
            ]
        ] [
            h2 [ 
                Style [ 
                    Margin "0"
                    Color "#2c3e50"
                    FontSize "18px"
                    FontWeight "bold"
                ]
            ] [ str "🚀 JANUS" ]
            p [ 
                Style [ 
                    Margin "4px 0 0 0"
                    Color "#7f8c8d"
                    FontSize "12px"
                ]
            ] [ str ("v" + model.Version) ]
            small [ 
                Style [ 
                    Color "#95a5a6"
                    FontSize "10px"
                ]
            ] [ str "Autonomous Research UI" ]
        ]
        
        // Navigation menu
        nav [] [
            navigationButton Dashboard model.CurrentPage dispatch
            navigationButton Visualization3D model.CurrentPage dispatch
            navigationButton CollaborativeEditor model.CurrentPage dispatch
            navigationButton DataAnalysis model.CurrentPage dispatch
            navigationButton Settings model.CurrentPage dispatch
        ]
        
        // Status panel
        div [
            Style [
                MarginTop "30px"
                Padding "16px"
                BackgroundColor "#f8f9fa"
                BorderRadius "8px"
                Border "1px solid #e9ecef"
            ]
        ] [
            h4 [ Style [ Margin "0 0 12px 0"; Color "#2c3e50"; FontSize "14px" ] ] [ str "📡 System Status" ]
            div [ Style [ FontSize "12px"; LineHeight "1.5" ] ] [
                div [ Style [ Display "flex"; JustifyContent "space-between"; MarginBottom "4px" ] ] [
                    span [] [ str "Connection:" ]
                    span [ Style [ Color "#27ae60"; FontWeight "bold" ] ] [ str "🟢 Online" ]
                ]
                div [ Style [ Display "flex"; JustifyContent "space-between"; MarginBottom "4px" ] ] [
                    span [] [ str "Agents:" ]
                    span [ Style [ Color "#3498db"; FontWeight "bold" ] ] [ str "8 Active" ]
                ]
                div [ Style [ Display "flex"; JustifyContent "space-between"; MarginBottom "4px" ] ] [
                    span [] [ str "Grammar:" ]
                    span [ Style [ Color "#9b59b6"; FontWeight "bold" ] ] [ str "Tier 4" ]
                ]
                div [ Style [ Display "flex"; JustifyContent "space-between" ] ] [
                    span [] [ str "Last Sync:" ]
                    span [ Style [ Color "#7f8c8d" ] ] [ str (model.LastSync.ToString("HH:mm")) ]
                ]
            ]
        ]
        
        // Quick actions
        div [
            Style [
                MarginTop "20px"
                Padding "16px"
                BackgroundColor "#e8f5e8"
                BorderRadius "8px"
                Border "1px solid #c3e6c3"
            ]
        ] [
            h4 [ Style [ Margin "0 0 12px 0"; Color "#27ae60"; FontSize "14px" ] ] [ str "⚡ Quick Actions" ]
            div [ Style [ Display "flex"; FlexDirection "column"; Gap "8px" ] ] [
                button [
                    OnClick (fun _ -> dispatch SyncData)
                    Style [
                        Padding "8px 12px"
                        Border "1px solid #27ae60"
                        BackgroundColor "white"
                        Color "#27ae60"
                        BorderRadius "4px"
                        Cursor "pointer"
                        FontSize "12px"
                    ]
                ] [ str "🔄 Sync Data" ]
                
                button [
                    Style [
                        Padding "8px 12px"
                        Border "1px solid #3498db"
                        BackgroundColor "white"
                        Color "#3498db"
                        BorderRadius "4px"
                        Cursor "pointer"
                        FontSize "12px"
                    ]
                ] [ str "📊 Generate Report" ]
            ]
        ]
    ]

let mainContent model dispatch =
    div [
        Style [
            Flex "1"
            Padding "0"
            BackgroundColor "#f5f5f5"
            OverflowY "auto"
            Height "100vh"
        ]
    ] [
        match model.CurrentPage with
        | Dashboard ->
            match model.DashboardModel with
            | Some dashModel -> ResearchDashboardComponent.view dashModel (DashboardMsg >> dispatch)
            | None -> div [ Style [ Padding "40px"; TextAlign "center" ] ] [ str "Loading Dashboard..." ]
        
        | Visualization3D ->
            match model.Visualization3DModel with
            | Some vizModel -> JanusModel3DComponent.view vizModel (Visualization3DMsg >> dispatch)
            | None -> div [ Style [ Padding "40px"; TextAlign "center" ] ] [ str "Loading 3D Visualization..." ]
        
        | CollaborativeEditor ->
            match model.EditorModel with
            | Some editorModel -> RealTimeEditorComponent.view editorModel (EditorMsg >> dispatch)
            | None -> div [ Style [ Padding "40px"; TextAlign "center" ] ] [ str "Loading Collaborative Editor..." ]
        
        | DataAnalysis ->
            div [
                Style [
                    Padding "40px"
                    TextAlign "center"
                    BackgroundColor "white"
                    Margin "20px"
                    BorderRadius "8px"
                    BoxShadow "0 2px 4px rgba(0,0,0,0.1)"
                ]
            ] [
                h2 [ Style [ Color "#2c3e50" ] ] [ str "📈 Data Analysis Module" ]
                p [ Style [ Color "#7f8c8d" ] ] [ str "Advanced data analysis components coming soon..." ]
                div [ Style [ MarginTop "20px" ] ] [
                    button [
                        Style [
                            Padding "12px 24px"
                            BackgroundColor "#3498db"
                            Color "white"
                            Border "none"
                            BorderRadius "6px"
                            Cursor "pointer"
                        ]
                    ] [ str "🚀 Launch Analysis" ]
                ]
            ]
        
        | Settings ->
            div [
                Style [
                    Padding "40px"
                    BackgroundColor "white"
                    Margin "20px"
                    BorderRadius "8px"
                    BoxShadow "0 2px 4px rgba(0,0,0,0.1)"
                ]
            ] [
                h2 [ Style [ Color "#2c3e50"; MarginTop "0" ] ] [ str "⚙️ Application Settings" ]
                
                div [ Style [ MarginBottom "20px" ] ] [
                    h3 [ Style [ Color "#34495e" ] ] [ str "🎨 UI Preferences" ]
                    div [ Style [ Display "grid"; GridTemplateColumns "1fr 1fr"; Gap "20px" ] ] [
                        div [] [
                            label [ Style [ Display "block"; MarginBottom "8px"; FontWeight "bold" ] ] [ str "Theme:" ]
                            select [ Style [ Padding "8px"; BorderRadius "4px"; Border "1px solid #ddd"; Width "100%" ] ] [
                                option [ Value "light" ] [ str "Light" ]
                                option [ Value "dark" ] [ str "Dark" ]
                                option [ Value "auto" ] [ str "Auto" ]
                            ]
                        ]
                        div [] [
                            label [ Style [ Display "block"; MarginBottom "8px"; FontWeight "bold" ] ] [ str "Language:" ]
                            select [ Style [ Padding "8px"; BorderRadius "4px"; Border "1px solid #ddd"; Width "100%" ] ] [
                                option [ Value "en" ] [ str "English" ]
                                option [ Value "fr" ] [ str "Français" ]
                                option [ Value "de" ] [ str "Deutsch" ]
                            ]
                        ]
                    ]
                ]
                
                div [ Style [ MarginBottom "20px" ] ] [
                    h3 [ Style [ Color "#34495e" ] ] [ str "🔧 Research Settings" ]
                    div [] [
                        label [ Style [ Display "flex"; AlignItems "center"; MarginBottom "12px" ] ] [
                            input [ Type "checkbox"; Style [ MarginRight "8px" ] ]
                            str "Enable real-time collaboration"
                        ]
                        label [ Style [ Display "flex"; AlignItems "center"; MarginBottom "12px" ] ] [
                            input [ Type "checkbox"; Style [ MarginRight "8px" ] ]
                            str "Auto-save documents"
                        ]
                        label [ Style [ Display "flex"; AlignItems "center"; MarginBottom "12px" ] ] [
                            input [ Type "checkbox"; Style [ MarginRight "8px" ] ]
                            str "Enable grammar evolution notifications"
                        ]
                    ]
                ]
                
                div [ Style [ TextAlign "center"; MarginTop "30px" ] ] [
                    button [
                        Style [
                            Padding "12px 24px"
                            BackgroundColor "#27ae60"
                            Color "white"
                            Border "none"
                            BorderRadius "6px"
                            Cursor "pointer"
                            MarginRight "12px"
                        ]
                    ] [ str "💾 Save Settings" ]
                    
                    button [
                        Style [
                            Padding "12px 24px"
                            BackgroundColor "#95a5a6"
                            Color "white"
                            Border "none"
                            BorderRadius "6px"
                            Cursor "pointer"
                        ]
                    ] [ str "🔄 Reset to Defaults" ]
                ]
            ]
    ]

let view model dispatch =
    div [
        Style [
            Display "flex"
            FontFamily "Arial, sans-serif"
            Height "100vh"
            OverflowX "hidden"
        ]
    ] [
        sidebar model dispatch
        mainContent model dispatch
        
        // Loading overlay
        if model.IsLoading then
            div [
                Style [
                    Position "fixed"
                    Top "0"
                    Left "0"
                    Width "100%"
                    Height "100%"
                    BackgroundColor "rgba(0,0,0,0.8)"
                    Display "flex"
                    JustifyContent "center"
                    AlignItems "center"
                    ZIndex 1000
                ]
            ] [
                div [
                    Style [
                        BackgroundColor "white"
                        Padding "40px"
                        BorderRadius "12px"
                        TextAlign "center"
                        BoxShadow "0 4px 20px rgba(0,0,0,0.3)"
                    ]
                ] [
                    div [ Style [ FontSize "48px"; MarginBottom "20px" ] ] [ str "🚀" ]
                    h2 [ Style [ Margin "0 0 16px 0"; Color "#2c3e50" ] ] [ str "Initializing Janus Research UI" ]
                    p [ Style [ Margin "0"; Color "#7f8c8d" ] ] [ str "Loading autonomous research components..." ]
                ]
            ]
    ]

// Program definition
let program =
    Program.mkProgram init update view
