DESCRIBE {
    name: "TARS Infrastructure & Packaging Demo"
    version: "1.0"
    author: "TARS Autonomous System"
    description: "Demonstrates infrastructure component generation and MSI packaging capabilities"
    tags: ["infrastructure", "docker", "packaging", "msi", "wix", "redis", "mongodb", "mysql"]
}

CONFIG {
    model: "llama3"
    temperature: 0.7
    max_tokens: 3000
    autonomous: true
}

VARIABLE microservices_stack {
    value: {
        name: "MicroservicesStack"
        description: "Complete microservices infrastructure with databases and messaging"
        components: [
            {
                type: "POSTGRESQL"
                name: "postgres"
                version: "15-alpine"
                port: 5432
                environment: {
                    POSTGRES_DB: "microservices"
                    POSTGRES_USER: "admin"
                    POSTGRES_PASSWORD: "password123"
                }
            },
            {
                type: "REDIS"
                name: "redis"
                version: "7-alpine"
                port: 6379
                environment: {}
            },
            {
                type: "RABBITMQ"
                name: "rabbitmq"
                version: "3-management-alpine"
                port: 5672
                environment: {
                    RABBITMQ_DEFAULT_USER: "admin"
                    RABBITMQ_DEFAULT_PASS: "password123"
                }
            },
            {
                type: "ELASTICSEARCH"
                name: "elasticsearch"
                version: "8.8.0"
                port: 9200
                environment: {
                    "discovery.type": "single-node"
                    "ES_JAVA_OPTS": "-Xms512m -Xmx512m"
                }
            }
        ]
        networks: ["microservices_network"]
        volumes: ["postgres_data", "redis_data", "rabbitmq_data", "elasticsearch_data"]
    }
}

VARIABLE lamp_stack {
    value: {
        name: "LAMPStack"
        description: "Traditional LAMP stack with MySQL and Redis"
        components: [
            {
                type: "MYSQL"
                name: "mysql"
                version: "8.0"
                port: 3306
                environment: {
                    MYSQL_ROOT_PASSWORD: "rootpassword"
                    MYSQL_DATABASE: "webapp"
                    MYSQL_USER: "webuser"
                    MYSQL_PASSWORD: "webpassword"
                }
            },
            {
                type: "REDIS"
                name: "redis"
                version: "7-alpine"
                port: 6379
                environment: {}
            }
        ]
        networks: ["lamp_network"]
        volumes: ["mysql_data", "redis_data"]
    }
}

// Phase 1: Generate Microservices Infrastructure Stack
ACTION {
    type: "infrastructure_generation"
    description: "Generate complete microservices infrastructure stack"
    
    INFRASTRUCTURE {
        type: "create"
        stack_type: "INFRASTRUCTURE_STACK"
        name: "${microservices_stack.name}"
        output_directory: "output/infrastructure/${microservices_stack.name}"
        components: "${microservices_stack.components}"
        networks: "${microservices_stack.networks}"
        volumes: "${microservices_stack.volumes}"
        description: "${microservices_stack.description}"
    }
    
    FSHARP {
        printfn "üèóÔ∏è MICROSERVICES INFRASTRUCTURE GENERATED"
        printfn "========================================"
        printfn ""
        printfn "Stack Details:"
        printfn "  Name: %s" microservices_stack.name
        printfn "  Components: %d" microservices_stack.components.Length
        printfn "  Networks: %d" microservices_stack.networks.Length
        printfn "  Volumes: %d" microservices_stack.volumes.Length
        printfn "  Output: output/infrastructure/%s" microservices_stack.name
        printfn ""
        printfn "Generated Files:"
        printfn "  ‚úÖ docker-compose.yml - Main orchestration file"
        printfn "  ‚úÖ .env - Environment configuration"
        printfn "  ‚úÖ start.sh - Startup script"
        printfn "  ‚úÖ stop.sh - Shutdown script"
        printfn "  ‚úÖ monitor.sh - Monitoring script"
        printfn "  ‚úÖ README.md - Documentation"
        printfn ""
        printfn "Infrastructure Components:"
        for component in microservices_stack.components do
            printfn "  ‚Ä¢ %s (%s) - Port %d" component.name component.type component.port
        printfn ""
    }
}

// Phase 2: Generate LAMP Stack
ACTION {
    type: "infrastructure_generation"
    description: "Generate LAMP stack infrastructure"
    
    INFRASTRUCTURE {
        type: "create"
        stack_type: "PREDEFINED_STACK"
        name: "${lamp_stack.name}"
        output_directory: "output/infrastructure/${lamp_stack.name}"
        predefined_type: "LAMP"
    }
    
    FSHARP {
        printfn "üî• LAMP STACK INFRASTRUCTURE GENERATED"
        printfn "====================================="
        printfn ""
        printfn "Stack Details:"
        printfn "  Name: %s" lamp_stack.name
        printfn "  Type: LAMP (Linux, Apache, MySQL, PHP)"
        printfn "  Components: %d" lamp_stack.components.Length
        printfn "  Output: output/infrastructure/%s" lamp_stack.name
        printfn ""
        printfn "LAMP Components:"
        for component in lamp_stack.components do
            printfn "  ‚Ä¢ %s (%s) - Port %d" component.name component.type component.port
        printfn ""
    }
}

// Phase 3: Generate Individual Redis Component
ACTION {
    type: "infrastructure_generation"
    description: "Generate standalone Redis component"
    
    INFRASTRUCTURE {
        type: "create"
        stack_type: "INFRASTRUCTURE_COMPONENT"
        component_type: "REDIS"
        name: "StandaloneRedis"
        output_directory: "output/infrastructure/StandaloneRedis"
        version: "7-alpine"
        port: 6379
    }
    
    FSHARP {
        printfn "üî¥ STANDALONE REDIS COMPONENT GENERATED"
        printfn "======================================"
        printfn ""
        printfn "Component Details:"
        printfn "  Name: StandaloneRedis"
        printfn "  Type: Redis"
        printfn "  Version: 7-alpine"
        printfn "  Port: 6379"
        printfn "  Output: output/infrastructure/StandaloneRedis"
        printfn ""
        printfn "Usage:"
        printfn "  cd output/infrastructure/StandaloneRedis"
        printfn "  ./start.sh"
        printfn "  redis-cli -h localhost -p 6379"
        printfn ""
    }
}

// Phase 4: Create TARS Self-Packaging Installer
ACTION {
    type: "packaging_generation"
    description: "Generate MSI installer for TARS itself"
    
    PACKAGING {
        type: "create_installer"
        installer_type: "TARS_INSTALLER"
        version: "1.0.0"
        output_directory: "output/packaging/TARS-Installer"
        auto_build: false
    }
    
    FSHARP {
        printfn "üì¶ TARS MSI INSTALLER GENERATED"
        printfn "==============================="
        printfn ""
        printfn "Installer Details:"
        printfn "  Product: TARS Autonomous Reasoning System"
        printfn "  Version: 1.0.0"
        printfn "  Type: MSI (Windows Installer)"
        printfn "  Output: output/packaging/TARS-Installer"
        printfn ""
        printfn "Generated Files:"
        printfn "  ‚úÖ TARS.wxs - WiX source file"
        printfn "  ‚úÖ TARS.wixproj - WiX project file"
        printfn "  ‚úÖ build.cmd - Build script"
        printfn ""
        printfn "To build MSI:"
        printfn "  cd output/packaging/TARS-Installer"
        printfn "  build.cmd"
        printfn ""
        printfn "Requirements:"
        printfn "  ‚Ä¢ WiX Toolset 3.x"
        printfn "  ‚Ä¢ Visual Studio Build Tools"
        printfn ""
    }
}

// Phase 5: Create Infrastructure Stack Installer
ACTION {
    type: "packaging_generation"
    description: "Generate MSI installer for microservices infrastructure"
    
    PACKAGING {
        type: "create_installer"
        installer_type: "INFRASTRUCTURE_INSTALLER"
        stack_name: "${microservices_stack.name}"
        version: "1.0.0"
        output_directory: "output/packaging/MicroservicesInfrastructure-Installer"
        auto_build: false
    }
    
    FSHARP {
        printfn "üèóÔ∏è INFRASTRUCTURE MSI INSTALLER GENERATED"
        printfn "=========================================="
        printfn ""
        printfn "Installer Details:"
        printfn "  Product: %s Infrastructure" microservices_stack.name
        printfn "  Version: 1.0.0"
        printfn "  Type: MSI (Windows Installer)"
        printfn "  Output: output/packaging/MicroservicesInfrastructure-Installer"
        printfn ""
        printfn "This installer will deploy:"
        printfn "  ‚Ä¢ Docker Compose configuration"
        printfn "  ‚Ä¢ Environment files"
        printfn "  ‚Ä¢ Management scripts"
        printfn "  ‚Ä¢ Documentation"
        printfn ""
        printfn "Target Installation:"
        printfn "  ‚Ä¢ Program Files\\TARS\\MicroservicesInfrastructure\\"
        printfn "  ‚Ä¢ Start Menu shortcuts"
        printfn "  ‚Ä¢ Uninstall support"
        printfn ""
    }
}

// Phase 6: Demonstrate Docker Compose Generation
ACTION {
    type: "docker_compose_demo"
    description: "Show generated Docker Compose content"
    
    FSHARP {
        printfn "üê≥ DOCKER COMPOSE GENERATION DEMO"
        printfn "================================="
        printfn ""
        
        // Simulate Docker Compose generation
        let dockerCompose = """version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: microservices
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - microservices_network
    healthcheck:
      test: ["pg_isready -U admin -d microservices"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - microservices_network
    healthcheck:
      test: ["redis-cli ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

networks:
  microservices_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local"""
        
        printfn "Generated Docker Compose Sample:"
        printfn "```yaml"
        let lines = dockerCompose.Split('\n')
        for i in 0..min 20 (lines.Length - 1) do
            printfn "%s" lines.[i]
        printfn "# ... (truncated for demo)"
        printfn "```"
        printfn ""
    }
}

// Phase 7: Demonstrate WiX Installer Generation
ACTION {
    type: "wix_installer_demo"
    description: "Show generated WiX installer content"
    
    FSHARP {
        printfn "üîß WIX INSTALLER GENERATION DEMO"
        printfn "================================"
        printfn ""
        
        // Simulate WiX generation
        let wixContent = """<?xml version="1.0" encoding="UTF-8"?>
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
  <Product Id="12345678-1234-5678-9ABC-123456789012"
           Name="TARS"
           Language="1033"
           Version="1.0.0"
           Manufacturer="TARS Development Team"
           UpgradeCode="87654321-4321-8765-CBA9-876543210987">

    <Package InstallerVersion="500"
             Compressed="yes"
             InstallScope="perMachine"
             Platform="x64"
             Description="TARS Autonomous Reasoning System"
             Comments="Installer for TARS"
             Keywords="Installer" />

    <Media Id="1" Cabinet="media1.cab" EmbedCab="yes" />

    <Directory Id="TARGETDIR" Name="SourceDir">
      <Directory Id="ProgramFilesFolder">
        <Directory Id="ManufacturerFolder" Name="TARS">
          <Directory Id="INSTALLFOLDER" Name="TARS">
            <Component Id="Component0" Guid="11111111-1111-1111-1111-111111111111">
              <File Id="File0"
                    Name="TarsEngine.FSharp.Cli.exe"
                    Source="TarsEngine.FSharp.Cli.exe"
                    KeyPath="yes"
                    Vital="yes" />
            </Component>
          </Directory>
        </Directory>
      </Directory>
    </Directory>

    <Feature Id="MainFeature"
             Title="TARS"
             Description="Main TARS application"
             Level="1">
      <ComponentRef Id="Component0" />
    </Feature>

    <UIRef Id="WixUI_InstallDir" />
    <Property Id="WIXUI_INSTALLDIR" Value="INSTALLFOLDER" />

  </Product>
</Wix>"""
        
        printfn "Generated WiX Source Sample:"
        printfn "```xml"
        let lines = wixContent.Split('\n')
        for i in 0..min 25 (lines.Length - 1) do
            printfn "%s" lines.[i]
        printfn "# ... (truncated for demo)"
        printfn "```"
        printfn ""
    }
}

// Phase 8: Summary and next steps
ACTION {
    type: "demo_summary"
    description: "Summarize infrastructure and packaging capabilities"
    
    FSHARP {
        printfn ""
        printfn "================================================================"
        printfn "    TARS INFRASTRUCTURE & PACKAGING DEMO COMPLETE!"
        printfn "================================================================"
        printfn ""
        printfn "‚úÖ INFRASTRUCTURE CAPABILITIES DEMONSTRATED:"
        printfn "  üèóÔ∏è Complete microservices stack generation"
        printfn "  üî• LAMP stack generation"
        printfn "  üî¥ Individual component generation (Redis, MySQL, PostgreSQL, etc.)"
        printfn "  üê≥ Docker Compose orchestration"
        printfn "  üìú Management scripts (start, stop, monitor)"
        printfn "  üìñ Comprehensive documentation"
        printfn ""
        printfn "‚úÖ PACKAGING CAPABILITIES DEMONSTRATED:"
        printfn "  üì¶ TARS self-packaging MSI installer"
        printfn "  üèóÔ∏è Infrastructure stack MSI installers"
        printfn "  üîß WiX project generation"
        printfn "  üìã Windows Installer (MSI) support"
        printfn "  üéØ Professional deployment packages"
        printfn ""
        printfn "üéØ GENERATED OUTPUTS:"
        printfn "  Infrastructure Stacks:"
        printfn "    ‚Ä¢ output/infrastructure/MicroservicesStack/"
        printfn "    ‚Ä¢ output/infrastructure/LAMPStack/"
        printfn "    ‚Ä¢ output/infrastructure/StandaloneRedis/"
        printfn ""
        printfn "  MSI Installers:"
        printfn "    ‚Ä¢ output/packaging/TARS-Installer/"
        printfn "    ‚Ä¢ output/packaging/MicroservicesInfrastructure-Installer/"
        printfn ""
        printfn "üöÄ SUPPORTED INFRASTRUCTURE COMPONENTS:"
        printfn "  ‚Ä¢ Redis (caching, sessions)"
        printfn "  ‚Ä¢ MongoDB (document database)"
        printfn "  ‚Ä¢ MySQL (relational database)"
        printfn "  ‚Ä¢ PostgreSQL (advanced relational database)"
        printfn "  ‚Ä¢ RabbitMQ (message broker)"
        printfn "  ‚Ä¢ Elasticsearch (search engine)"
        printfn "  ‚Ä¢ Kafka (event streaming)"
        printfn "  ‚Ä¢ MinIO (object storage)"
        printfn "  ‚Ä¢ Prometheus (monitoring)"
        printfn "  ‚Ä¢ Grafana (visualization)"
        printfn ""
        printfn "üîß USAGE INSTRUCTIONS:"
        printfn "  Infrastructure:"
        printfn "    cd output/infrastructure/MicroservicesStack"
        printfn "    ./start.sh"
        printfn ""
        printfn "  MSI Building:"
        printfn "    cd output/packaging/TARS-Installer"
        printfn "    build.cmd"
        printfn ""
        printfn "üìã REQUIREMENTS:"
        printfn "  ‚Ä¢ Docker Desktop (for infrastructure)"
        printfn "  ‚Ä¢ WiX Toolset 3.x (for MSI building)"
        printfn "  ‚Ä¢ Visual Studio Build Tools (for MSI building)"
        printfn ""
        printfn "================================================================"
        printfn "    TARS: FULL INFRASTRUCTURE & PACKAGING CAPABILITIES! üéâ"
        printfn "    Real Docker Orchestration + Professional MSI Installers!"
        printfn "================================================================"
    }
}
