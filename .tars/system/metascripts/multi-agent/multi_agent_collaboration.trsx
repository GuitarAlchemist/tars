// TODO: Convert old format blocks to FSHARP blocks
DESCRIBE {
    name: "TARS Multi-Agent Collaboration Metascript"
    version: "1.0"
    author: "TARS"
    description: "A metascript for coordinating multiple agents to solve complex problems"
}

CONFIG {
    model: "llama3"
    temperature: 0.5
    max_tokens: 4000
}

// Define variables for configuration
VARIABLE config {
    value: {
        project_name: "TARS Self-Improvement System",
        task_complexity: "high",
        deadline_days: 14,
        required_skills: ["architecture", "coding", "testing", "documentation"],
        output_directory: "projects/self_improvement"
    }
}

// Define the project manager agent
AGENT project_manager {
    description: "An agent that manages the overall project and coordinates other agents"
    capabilities: ["task_planning", "resource_allocation", "progress_tracking"]
    
    TASK create_project_plan {
        description: "Create a project plan with tasks and dependencies"
        
        FUNCTION break_down_tasks {
            parameters: ["project_name", "required_skills"]
            
            ACTION {
                type: "task_breakdown"
                project_name: "${project_name}"
                required_skills: "${required_skills}"
            }
            
            RETURN {
                value: {
                    tasks: [
                        {
                            id: "T1",
                            name: "Define system architecture",
                            description: "Create the high-level architecture for the self-improvement system",
                            required_skills: ["architecture"],
                            estimated_hours: 8,
                            dependencies: []
                        },
                        {
                            id: "T2",
                            name: "Design core components",
                            description: "Design the core components of the system",
                            required_skills: ["architecture", "coding"],
                            estimated_hours: 16,
                            dependencies: ["T1"]
                        },
                        {
                            id: "T3",
                            name: "Implement core components",
                            description: "Implement the core components of the system",
                            required_skills: ["coding"],
                            estimated_hours: 24,
                            dependencies: ["T2"]
                        },
                        {
                            id: "T4",
                            name: "Write unit tests",
                            description: "Write unit tests for the core components",
                            required_skills: ["testing"],
                            estimated_hours: 16,
                            dependencies: ["T3"]
                        },
                        {
                            id: "T5",
                            name: "Write integration tests",
                            description: "Write integration tests for the system",
                            required_skills: ["testing"],
                            estimated_hours: 16,
                            dependencies: ["T3"]
                        },
                        {
                            id: "T6",
                            name: "Write documentation",
                            description: "Write documentation for the system",
                            required_skills: ["documentation"],
                            estimated_hours: 16,
                            dependencies: ["T3"]
                        },
                        {
                            id: "T7",
                            name: "Final integration",
                            description: "Integrate all components and ensure they work together",
                            required_skills: ["coding", "testing"],
                            estimated_hours: 8,
                            dependencies: ["T4", "T5"]
                        },
                        {
                            id: "T8",
                            name: "Final review",
                            description: "Review the entire system and make final adjustments",
                            required_skills: ["architecture", "coding", "testing", "documentation"],
                            estimated_hours: 8,
                            dependencies: ["T6", "T7"]
                        }
                    ]
                }
            }
        }
        
        FUNCTION create_schedule {
            parameters: ["tasks", "deadline_days"]
            
            ACTION {
                type: "create_schedule"
                tasks: "${tasks}"
                deadline_days: "${deadline_days}"
            }
            
            RETURN {
                value: {
                    schedule: [
                        {
                            task_id: "T1",
                            start_day: 1,
                            end_day: 2
                        },
                        {
                            task_id: "T2",
                            start_day: 3,
                            end_day: 5
                        },
                        {
                            task_id: "T3",
                            start_day: 6,
                            end_day: 9
                        },
                        {
                            task_id: "T4",
                            start_day: 10,
                            end_day: 12
                        },
                        {
                            task_id: "T5",
                            start_day: 10,
                            end_day: 12
                        },
                        {
                            task_id: "T6",
                            start_day: 10,
                            end_day: 12
                        },
                        {
                            task_id: "T7",
                            start_day: 13,
                            end_day: 13
                        },
                        {
                            task_id: "T8",
                            start_day: 14,
                            end_day: 14
                        }
                    ]
                }
            }
        }
    }
    
    TASK track_progress {
        description: "Track progress of the project"
        
        FUNCTION update_task_status {
            parameters: ["task_id", "status", "completion_percentage"]
            
            ACTION {
                type: "update_task"
                task_id: "${task_id}"
                status: "${status}"
                completion_percentage: "${completion_percentage}"
            }
            
            RETURN {
                value: {
                    updated: true
                }
            }
        }
        
        FUNCTION generate_progress_report {
            parameters: ["tasks"]
            
            ACTION {
                type: "generate_report"
                tasks: "${tasks}"
                report_type: "progress"
            }
            
            RETURN {
                value: {
                    report: "Progress Report: 50% complete..."  // Placeholder
                }
            }
        }
    }
}

// Define the architect agent
AGENT architect {
    description: "An agent that designs system architecture"
    capabilities: ["system_design", "component_design", "interface_design"]
    
    TASK design_architecture {
        description: "Design the system architecture"
        
        FUNCTION create_high_level_design {
            parameters: ["project_name"]
            
            ACTION {
                type: "design_architecture"
                project_name: "${project_name}"
                design_level: "high"
            }
            
            RETURN {
                value: {
                    components: [
                        {
                            name: "AnalysisEngine",
                            description: "Analyzes code for potential improvements",
                            interfaces: ["ICodeAnalyzer", "IPatternDetector"]
                        },
                        {
                            name: "RefactoringEngine",
                            description: "Applies refactorings to code",
                            interfaces: ["IRefactorer", "ICodeGenerator"]
                        },
                        {
                            name: "TestingEngine",
                            description: "Tests code to ensure it works correctly",
                            interfaces: ["ITestRunner", "ITestGenerator"]
                        },
                        {
                            name: "DocumentationEngine",
                            description: "Generates documentation for code",
                            interfaces: ["IDocumentationGenerator"]
                        },
                        {
                            name: "IntegrationEngine",
                            description: "Integrates all components",
                            interfaces: ["IWorkflowCoordinator"]
                        }
                    ],
                    diagrams: [
                        {
                            type: "component_diagram",
                            content: "Component diagram content would go here"
                        },
                        {
                            type: "sequence_diagram",
                            content: "Sequence diagram content would go here"
                        }
                    ]
                }
            }
        }
        
        FUNCTION design_interfaces {
            parameters: ["components"]
            
            ACTION {
                type: "design_interfaces"
                components: "${components}"
            }
            
            RETURN {
                value: {
                    interfaces: [
                        {
                            name: "ICodeAnalyzer",
                            methods: [
                                {
                                    name: "AnalyzeCode",
                                    parameters: ["string code", "AnalysisOptions options"],
                                    return_type: "AnalysisResult"
                                }
                            ]
                        },
                        // Additional interfaces would be defined here
                    ]
                }
            }
        }
    }
}

// Define the developer agent
AGENT developer {
    description: "An agent that implements code"
    capabilities: ["coding", "debugging", "code_review"]
    
    TASK implement_component {
        description: "Implement a component based on design"
        
        FUNCTION write_code {
            parameters: ["component", "interfaces"]
            
            ACTION {
                type: "write_code"
                component: "${component}"
                interfaces: "${interfaces}"
                language: "csharp"
            }
            
            RETURN {
                value: {
                    files: [
                        {
                            name: "${component.name}.cs",
                            content: "// Code content would go here"
                        },
                        {
                            name: "I${component.name}.cs",
                            content: "// Interface content would go here"
                        }
                    ]
                }
            }
        }
        
        FUNCTION debug_code {
            parameters: ["files"]
            
            ACTION {
                type: "debug_code"
                files: "${files}"
            }
            
            RETURN {
                value: {
                    issues_fixed: 3,  // Placeholder
                    files: []  // Updated files would go here
                }
            }
        }
    }
}

// Define the tester agent
AGENT tester {
    description: "An agent that tests code"
    capabilities: ["unit_testing", "integration_testing", "test_reporting"]
    
    TASK write_tests {
        description: "Write tests for a component"
        
        FUNCTION write_unit_tests {
            parameters: ["component", "interfaces"]
            
            ACTION {
                type: "write_tests"
                component: "${component}"
                interfaces: "${interfaces}"
                test_type: "unit"
            }
            
            RETURN {
                value: {
                    files: [
                        {
                            name: "${component.name}Tests.cs",
                            content: "// Test content would go here"
                        }
                    ]
                }
            }
        }
        
        FUNCTION write_integration_tests {
            parameters: ["components"]
            
            ACTION {
                type: "write_tests"
                components: "${components}"
                test_type: "integration"
            }
            
            RETURN {
                value: {
                    files: [
                        {
                            name: "IntegrationTests.cs",
                            content: "// Test content would go here"
                        }
                    ]
                }
            }
        }
    }
    
    TASK run_tests {
        description: "Run tests and report results"
        
        FUNCTION execute_tests {
            parameters: ["test_files"]
            
            ACTION {
                type: "run_tests"
                test_files: "${test_files}"
            }
            
            RETURN {
                value: {
                    passed: 42,  // Placeholder
                    failed: 3,
                    skipped: 1,
                    test_report: "Test report content would go here"
                }
            }
        }
    }
}

// Define the documentation writer agent
AGENT documentation_writer {
    description: "An agent that writes documentation"
    capabilities: ["technical_writing", "api_documentation", "user_guide_creation"]
    
    TASK write_documentation {
        description: "Write documentation for the system"
        
        FUNCTION write_api_docs {
            parameters: ["components", "interfaces"]
            
            ACTION {
                type: "write_documentation"
                components: "${components}"
                interfaces: "${interfaces}"
                doc_type: "api"
            }
            
            RETURN {
                value: {
                    files: [
                        {
                            name: "api_documentation.md",
                            content: "# API Documentation\n\n..."  // Placeholder
                        }
                    ]
                }
            }
        }
        
        FUNCTION write_user_guide {
            parameters: ["components"]
            
            ACTION {
                type: "write_documentation"
                components: "${components}"
                doc_type: "user_guide"
            }
            
            RETURN {
                value: {
                    files: [
                        {
                            name: "user_guide.md",
                            content: "# User Guide\n\n..."  // Placeholder
                        }
                    ]
                }
            }
        }
    }
}

// Main workflow
TARS {
    // Initialize the workflow
    ACTION {
        type: "log"
        message: "Starting multi-agent collaboration workflow for project: ${config.value.project_name}"
    }
    
    // Create output directory if it doesn't exist
    ACTION {
        type: "ensure_directory"
        path: "${config.value.output_directory}"
    }
    
    // Create project plan
    ACTION {
        type: "log"
        message: "Creating project plan"
    }
    
    VARIABLE project_tasks {
        value: {}
    }
    
    ACTION {
        type: "execute"
        agent: "project_manager"
        task: "create_project_plan"
        function: "break_down_tasks"
        parameters: {
            project_name: "${config.value.project_name}",
            required_skills: "${config.value.required_skills}"
        }
        output_variable: "project_tasks"
    }
    
    VARIABLE project_schedule {
        value: {}
    }
    
    ACTION {
        type: "execute"
        agent: "project_manager"
        task: "create_project_plan"
        function: "create_schedule"
        parameters: {
            tasks: "${project_tasks.value.tasks}",
            deadline_days: "${config.value.deadline_days}"
        }
        output_variable: "project_schedule"
    }
    
    // Design architecture (Task T1)
    ACTION {
        type: "log"
        message: "Designing system architecture"
    }
    
    VARIABLE architecture {
        value: {}
    }
    
    ACTION {
        type: "execute"
        agent: "architect"
        task: "design_architecture"
        function: "create_high_level_design"
        parameters: {
            project_name: "${config.value.project_name}"
        }
        output_variable: "architecture"
    }
    
    // Update task status
    ACTION {
        type: "execute"
        agent: "project_manager"
        task: "track_progress"
        function: "update_task_status"
        parameters: {
            task_id: "T1",
            status: "completed",
            completion_percentage: 100
        }
    }
    
    // Design interfaces (Task T2)
    ACTION {
        type: "log"
        message: "Designing interfaces"
    }
    
    VARIABLE interfaces {
        value: {}
    }
    
    ACTION {
        type: "execute"
        agent: "architect"
        task: "design_architecture"
        function: "design_interfaces"
        parameters: {
            components: "${architecture.value.components}"
        }
        output_variable: "interfaces"
    }
    
    // Update task status
    ACTION {
        type: "execute"
        agent: "project_manager"
        task: "track_progress"
        function: "update_task_status"
        parameters: {
            task_id: "T2",
            status: "completed",
            completion_percentage: 100
        }
    }
    
    // Implement components (Task T3)
    ACTION {
        type: "log"
        message: "Implementing components"
    }
    
    VARIABLE all_component_files {
        value: {
            files: []
        }
    }
    
    FOR {
        variable: "component"
        range: "${architecture.value.components}"
        
        ACTION {
            type: "log"
            message: "Implementing component: ${component.name}"
        }
        
        VARIABLE component_files {
            value: {}
        }
        
        ACTION {
            type: "execute"
            agent: "developer"
            task: "implement_component"
            function: "write_code"
            parameters: {
                component: "${component}",
                interfaces: "${interfaces.value.interfaces}"
            }
            output_variable: "component_files"
        }
        
        // Debug the code
        ACTION {
            type: "execute"
            agent: "developer"
            task: "implement_component"
            function: "debug_code"
            parameters: {
                files: "${component_files.value.files}"
            }
        }
        
        // Add component files to all files
        FOR {
            variable: "file"
            range: "${component_files.value.files}"
            
            ACTION {
                type: "append"
                target: "all_component_files.value.files"
                value: "${file}"
            }
        }
    }
    
    // Save all component files
    FOR {
        variable: "file"
        range: "${all_component_files.value.files}"
        
        ACTION {
            type: "write_file"
            path: "${config.value.output_directory}/${file.name}"
            content: "${file.content}"
        }
    }
    
    // Update task status
    ACTION {
        type: "execute"
        agent: "project_manager"
        task: "track_progress"
        function: "update_task_status"
        parameters: {
            task_id: "T3",
            status: "completed",
            completion_percentage: 100
        }
    }
    
    // Write unit tests (Task T4)
    ACTION {
        type: "log"
        message: "Writing unit tests"
    }
    
    VARIABLE all_unit_test_files {
        value: {
            files: []
        }
    }
    
    FOR {
        variable: "component"
        range: "${architecture.value.components}"
        
        ACTION {
            type: "log"
            message: "Writing unit tests for component: ${component.name}"
        }
        
        VARIABLE component_test_files {
            value: {}
        }
        
        ACTION {
            type: "execute"
            agent: "tester"
            task: "write_tests"
            function: "write_unit_tests"
            parameters: {
                component: "${component}",
                interfaces: "${interfaces.value.interfaces}"
            }
            output_variable: "component_test_files"
        }
        
        // Add test files to all test files
        FOR {
            variable: "file"
            range: "${component_test_files.value.files}"
            
            ACTION {
                type: "append"
                target: "all_unit_test_files.value.files"
                value: "${file}"
            }
        }
    }
    
    // Save all unit test files
    FOR {
        variable: "file"
        range: "${all_unit_test_files.value.files}"
        
        ACTION {
            type: "write_file"
            path: "${config.value.output_directory}/tests/${file.name}"
            content: "${file.content}"
        }
    }
    
    // Update task status
    ACTION {
        type: "execute"
        agent: "project_manager"
        task: "track_progress"
        function: "update_task_status"
        parameters: {
            task_id: "T4",
            status: "completed",
            completion_percentage: 100
        }
    }
    
    // Write integration tests (Task T5)
    ACTION {
        type: "log"
        message: "Writing integration tests"
    }
    
    VARIABLE integration_test_files {
        value: {}
    }
    
    ACTION {
        type: "execute"
        agent: "tester"
        task: "write_tests"
        function: "write_integration_tests"
        parameters: {
            components: "${architecture.value.components}"
        }
        output_variable: "integration_test_files"
    }
    
    // Save all integration test files
    FOR {
        variable: "file"
        range: "${integration_test_files.value.files}"
        
        ACTION {
            type: "write_file"
            path: "${config.value.output_directory}/tests/${file.name}"
            content: "${file.content}"
        }
    }
    
    // Update task status
    ACTION {
        type: "execute"
        agent: "project_manager"
        task: "track_progress"
        function: "update_task_status"
        parameters: {
            task_id: "T5",
            status: "completed",
            completion_percentage: 100
        }
    }
    
    // Write documentation (Task T6)
    ACTION {
        type: "log"
        message: "Writing documentation"
    }
    
    VARIABLE api_docs {
        value: {}
    }
    
    ACTION {
        type: "execute"
        agent: "documentation_writer"
        task: "write_documentation"
        function: "write_api_docs"
        parameters: {
            components: "${architecture.value.components}",
            interfaces: "${interfaces.value.interfaces}"
        }
        output_variable: "api_docs"
    }
    
    VARIABLE user_guide {
        value: {}
    }
    
    ACTION {
        type: "execute"
        agent: "documentation_writer"
        task: "write_documentation"
        function: "write_user_guide"
        parameters: {
            components: "${architecture.value.components}"
        }
        output_variable: "user_guide"
    }
    
    // Save all documentation files
    FOR {
        variable: "file"
        range: "${api_docs.value.files}"
        
        ACTION {
            type: "write_file"
            path: "${config.value.output_directory}/docs/${file.name}"
            content: "${file.content}"
        }
    }
    
    FOR {
        variable: "file"
        range: "${user_guide.value.files}"
        
        ACTION {
            type: "write_file"
            path: "${config.value.output_directory}/docs/${file.name}"
            content: "${file.content}"
        }
    }
    
    // Update task status
    ACTION {
        type: "execute"
        agent: "project_manager"
        task: "track_progress"
        function: "update_task_status"
        parameters: {
            task_id: "T6",
            status: "completed",
            completion_percentage: 100
        }
    }
    
    // Run all tests (Task T7)
    ACTION {
        type: "log"
        message: "Running tests"
    }
    
    VARIABLE all_test_files {
        value: {
            files: []
        }
    }
    
    // Combine unit and integration test files
    FOR {
        variable: "file"
        range: "${all_unit_test_files.value.files}"
        
        ACTION {
            type: "append"
            target: "all_test_files.value.files"
            value: "${file}"
        }
    }
    
    FOR {
        variable: "file"
        range: "${integration_test_files.value.files}"
        
        ACTION {
            type: "append"
            target: "all_test_files.value.files"
            value: "${file}"
        }
    }
    
    VARIABLE test_results {
        value: {}
    }
    
    ACTION {
        type: "execute"
        agent: "tester"
        task: "run_tests"
        function: "execute_tests"
        parameters: {
            test_files: "${all_test_files.value.files}"
        }
        output_variable: "test_results"
    }
    
    // Save test results
    ACTION {
        type: "write_file"
        path: "${config.value.output_directory}/test_results.md"
        content: "${test_results.value.test_report}"
    }
    
    // Update task status
    ACTION {
        type: "execute"
        agent: "project_manager"
        task: "track_progress"
        function: "update_task_status"
        parameters: {
            task_id: "T7",
            status: "completed",
            completion_percentage: 100
        }
    }
    
    // Generate final project report (Task T8)
    ACTION {
        type: "log"
        message: "Generating final project report"
    }
    
    VARIABLE progress_report {
        value: {}
    }
    
    ACTION {
        type: "execute"
        agent: "project_manager"
        task: "track_progress"
        function: "generate_progress_report"
        parameters: {
            tasks: "${project_tasks.value.tasks}"
        }
        output_variable: "progress_report"
    }
    
    // Save progress report
    ACTION {
        type: "write_file"
        path: "${config.value.output_directory}/project_report.md"
        content: "${progress_report.value.report}"
    }
    
    // Update task status
    ACTION {
        type: "execute"
        agent: "project_manager"
        task: "track_progress"
        function: "update_task_status"
        parameters: {
            task_id: "T8",
            status: "completed",
            completion_percentage: 100
        }
    }
    
    // Notify about completion
    ACTION {
        type: "notify"
        message: "Multi-agent collaboration workflow completed for project: ${config.value.project_name}"
        channels: ["slack", "email"]
    }
}

