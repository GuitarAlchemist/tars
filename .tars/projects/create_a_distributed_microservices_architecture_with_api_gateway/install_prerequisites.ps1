# Autonomous Prerequisite Installation Script
# Generated by TARS for: Distributed Microservices Architecture with API Gateway
# Technology Stack: Java Spring Boot + Docker + Maven

Write-Host "🚀 TARS AUTONOMOUS PREREQUISITE INSTALLER" -ForegroundColor Green
Write-Host "=========================================" -ForegroundColor Green
Write-Host "📦 Installing prerequisites for Java microservices architecture" -ForegroundColor Cyan
Write-Host ""

# Function to check if running as administrator
function Test-Administrator {
    $currentUser = [Security.Principal.WindowsIdentity]::GetCurrent()
    $principal = New-Object Security.Principal.WindowsPrincipal($currentUser)
    return $principal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}

# Check administrator privileges
if (-not (Test-Administrator)) {
    Write-Host "❌ This script requires administrator privileges" -ForegroundColor Red
    Write-Host "🔄 Restarting as administrator..." -ForegroundColor Yellow
    Start-Process PowerShell -Verb RunAs -ArgumentList "-File `"$PSCommandPath`""
    exit
}

Write-Host "✅ Running with administrator privileges" -ForegroundColor Green
Write-Host ""

# Phase 1: Install Java JDK 17
Write-Host "☕ PHASE 1: Installing Java JDK 17" -ForegroundColor Yellow
Write-Host "=================================" -ForegroundColor Yellow

try {
    # Check if Java is already installed
    $javaVersion = java -version 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "✅ Java is already installed: $($javaVersion[0])" -ForegroundColor Green
    } else {
        Write-Host "📦 Installing OpenJDK 17..." -ForegroundColor Cyan
        winget install Microsoft.OpenJDK.17 --accept-package-agreements --accept-source-agreements
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "✅ Java JDK 17 installed successfully" -ForegroundColor Green
            
            # Set JAVA_HOME environment variable
            $javaPath = "C:\Program Files\Microsoft\jdk-17.0.9.8-hotspot"
            [Environment]::SetEnvironmentVariable("JAVA_HOME", $javaPath, "Machine")
            Write-Host "✅ JAVA_HOME set to: $javaPath" -ForegroundColor Green
        } else {
            Write-Host "❌ Java installation failed" -ForegroundColor Red
            exit 1
        }
    }
} catch {
    Write-Host "❌ Java installation error: $_" -ForegroundColor Red
    exit 1
}

Write-Host ""

# Phase 2: Install Maven
Write-Host "📦 PHASE 2: Installing Apache Maven" -ForegroundColor Yellow
Write-Host "===================================" -ForegroundColor Yellow

try {
    # Check if Maven is already installed
    $mavenVersion = mvn -version 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "✅ Maven is already installed: $($mavenVersion[0])" -ForegroundColor Green
    } else {
        Write-Host "📦 Installing Apache Maven..." -ForegroundColor Cyan
        winget install Apache.Maven --accept-package-agreements --accept-source-agreements
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "✅ Apache Maven installed successfully" -ForegroundColor Green
        } else {
            Write-Host "❌ Maven installation failed" -ForegroundColor Red
            exit 1
        }
    }
} catch {
    Write-Host "❌ Maven installation error: $_" -ForegroundColor Red
    exit 1
}

Write-Host ""

# Phase 3: Install Docker Desktop
Write-Host "🐳 PHASE 3: Installing Docker Desktop" -ForegroundColor Yellow
Write-Host "=====================================" -ForegroundColor Yellow

try {
    # Check if Docker is already installed
    $dockerVersion = docker --version 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "✅ Docker is already installed: $dockerVersion" -ForegroundColor Green
    } else {
        Write-Host "📦 Installing Docker Desktop..." -ForegroundColor Cyan
        winget install Docker.DockerDesktop --accept-package-agreements --accept-source-agreements
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "✅ Docker Desktop installed successfully" -ForegroundColor Green
            Write-Host "⚠️ Docker Desktop requires a restart to complete installation" -ForegroundColor Yellow
        } else {
            Write-Host "❌ Docker installation failed" -ForegroundColor Red
            exit 1
        }
    }
} catch {
    Write-Host "❌ Docker installation error: $_" -ForegroundColor Red
    exit 1
}

Write-Host ""

# Phase 4: Install Git (if not present)
Write-Host "📝 PHASE 4: Installing Git" -ForegroundColor Yellow
Write-Host "=========================" -ForegroundColor Yellow

try {
    $gitVersion = git --version 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "✅ Git is already installed: $gitVersion" -ForegroundColor Green
    } else {
        Write-Host "📦 Installing Git..." -ForegroundColor Cyan
        winget install Git.Git --accept-package-agreements --accept-source-agreements
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "✅ Git installed successfully" -ForegroundColor Green
        } else {
            Write-Host "❌ Git installation failed" -ForegroundColor Red
        }
    }
} catch {
    Write-Host "❌ Git installation error: $_" -ForegroundColor Red
}

Write-Host ""

# Phase 5: Verification
Write-Host "✅ PHASE 5: Installation Verification" -ForegroundColor Yellow
Write-Host "=====================================" -ForegroundColor Yellow

Write-Host "🔍 Verifying installations..." -ForegroundColor Cyan

# Refresh environment variables
$env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")

# Verify Java
try {
    $javaCheck = java -version 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "✅ Java: $($javaCheck[0])" -ForegroundColor Green
    } else {
        Write-Host "❌ Java: Not working properly" -ForegroundColor Red
    }
} catch {
    Write-Host "❌ Java: Verification failed" -ForegroundColor Red
}

# Verify Maven
try {
    $mavenCheck = mvn -version 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "✅ Maven: $($mavenCheck[0])" -ForegroundColor Green
    } else {
        Write-Host "❌ Maven: Not working properly" -ForegroundColor Red
    }
} catch {
    Write-Host "❌ Maven: Verification failed" -ForegroundColor Red
}

# Verify Docker
try {
    $dockerCheck = docker --version 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "✅ Docker: $dockerCheck" -ForegroundColor Green
    } else {
        Write-Host "❌ Docker: Not working properly (may need restart)" -ForegroundColor Yellow
    }
} catch {
    Write-Host "❌ Docker: Verification failed (may need restart)" -ForegroundColor Yellow
}

# Verify Git
try {
    $gitCheck = git --version 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "✅ Git: $gitCheck" -ForegroundColor Green
    } else {
        Write-Host "❌ Git: Not working properly" -ForegroundColor Red
    }
} catch {
    Write-Host "❌ Git: Verification failed" -ForegroundColor Red
}

Write-Host ""
Write-Host "🎉 PREREQUISITE INSTALLATION COMPLETE" -ForegroundColor Green
Write-Host "=====================================" -ForegroundColor Green
Write-Host ""
Write-Host "📋 NEXT STEPS:" -ForegroundColor Cyan
Write-Host "1. Restart your computer to complete Docker installation" -ForegroundColor White
Write-Host "2. Open Docker Desktop and complete setup" -ForegroundColor White
Write-Host "3. Navigate to the project directory" -ForegroundColor White
Write-Host "4. Run: mvn clean install" -ForegroundColor White
Write-Host "5. Run: docker-compose up -d" -ForegroundColor White
Write-Host ""
Write-Host "🚀 Your microservices architecture will be ready!" -ForegroundColor Green
Write-Host ""
Write-Host "📊 INSTALLATION SUMMARY:" -ForegroundColor Cyan
Write-Host "- Java JDK 17: Required for Spring Boot microservices" -ForegroundColor White
Write-Host "- Apache Maven: Build tool for Java projects" -ForegroundColor White
Write-Host "- Docker Desktop: Container platform for microservices" -ForegroundColor White
Write-Host "- Git: Version control system" -ForegroundColor White
Write-Host ""
Write-Host "Generated by TARS Autonomous Prerequisite Installer" -ForegroundColor Gray
Write-Host "Technology Stack: Java Spring Boot Microservices" -ForegroundColor Gray
