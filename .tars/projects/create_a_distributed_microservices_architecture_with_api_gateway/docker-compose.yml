version: '3.8'

services:
  # PostgreSQL Database for User Service
  user-db:
    image: postgres:15
    container_name: user-database
    environment:
      POSTGRES_DB: userdb
      POSTGRES_USER: userservice
      POSTGRES_PASSWORD: userpass123
    ports:
      - "5432:5432"
    volumes:
      - user_data:/var/lib/postgresql/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U userservice -d userdb"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB Database for Order Service
  order-db:
    image: mongo:6.0
    container_name: order-database
    environment:
      MONGO_INITDB_ROOT_USERNAME: orderservice
      MONGO_INITDB_ROOT_PASSWORD: orderpass123
      MONGO_INITDB_DATABASE: orderdb
    ports:
      - "27017:27017"
    volumes:
      - order_data:/data/db
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RabbitMQ Message Queue
  message-queue:
    image: rabbitmq:3.12-management
    container_name: rabbitmq-server
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
    ports:
      - "5672:5672"    # AMQP port
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # User Microservice
  user-service:
    build:
      context: .
      dockerfile: Dockerfile.user
    container_name: user-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://user-db:5432/userdb
      SPRING_DATASOURCE_USERNAME: userservice
      SPRING_DATASOURCE_PASSWORD: userpass123
      RABBITMQ_HOST: message-queue
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: admin
      RABBITMQ_PASSWORD: admin123
    ports:
      - "8081:8080"
    depends_on:
      user-db:
        condition: service_healthy
      message-queue:
        condition: service_healthy
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/users/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Order Microservice
  order-service:
    build:
      context: .
      dockerfile: Dockerfile.order
    container_name: order-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATA_MONGODB_URI: mongodb://orderservice:orderpass123@order-db:27017/orderdb
      RABBITMQ_HOST: message-queue
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: admin
      RABBITMQ_PASSWORD: admin123
      USER_SERVICE_URL: http://user-service:8080
    ports:
      - "8082:8080"
    depends_on:
      order-db:
        condition: service_healthy
      message-queue:
        condition: service_healthy
      user-service:
        condition: service_healthy
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/orders/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile.gateway
    container_name: api-gateway
    environment:
      SPRING_PROFILES_ACTIVE: docker
      USER_SERVICE_URL: http://user-service:8080
      ORDER_SERVICE_URL: http://order-service:8080
      EUREKA_CLIENT_ENABLED: false
    ports:
      - "8080:8080"
    depends_on:
      user-service:
        condition: service_healthy
      order-service:
        condition: service_healthy
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - microservices-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - microservices-network
    depends_on:
      - prometheus

volumes:
  user_data:
    driver: local
  order_data:
    driver: local
  rabbitmq_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  microservices-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
