open System

type Task = { Id: int; Title: string; Done: bool; Priority: string }

let mutable tasks = []

let addTask title priority =
    let id = List.length tasks + 1
    let task = { Id = id; Title = title; Done = false; Priority = priority }
    tasks <- task :: tasks
    printfn "✅ Added %s task: %s" priority title

let completeTask id =
    tasks <- tasks |> List.map (fun t -> 
        if t.Id = id then { t with Done = true }
        else t)
    printfn "🎉 Completed task %d" id

let showTasks () =
    printfn "📋 Current Tasks:"
    tasks |> List.iter (fun t ->
        let status = if t.Done then "✅" else "⏳"
        printfn "  %s [%s] %d. %s" status t.Priority t.Id t.Title)

[<EntryPoint>]
let main argv =
    printfn "🚀 TRACED TASK MANAGER - Generated by TARS"
    printfn "=========================================="
    printfn "🔍 This application was generated with full tracing!"
    printfn ""
    
    addTask "Design system architecture" "High"
    addTask "Implement core features" "High"
    addTask "Write documentation" "Medium"
    addTask "Deploy to production" "Low"
    
    showTasks()
    
    completeTask 1
    
    printfn ""
    showTasks()
    
    printfn ""
    printfn "✅ TARS generated working code with full tracing!"
    printfn "🔍 Check .tars/traces/ for detailed execution trace"
    0
