DESCRIBE {
    name: "Detailed Exploration Analysis"
    version: "2.0"
    description: "Comprehensive exploration analysis with full path details and summaries before code generation"
    author: "TARS Autonomous System"
    date: "2025-01-30"
    output_location: ".tars/explorations/detailed"
}

CONFIG {
    model: "llama3"
    temperature: 0.2
    max_tokens: 1500
    autonomous: true
    trace_level: "detailed"
}

// Define explorations to analyze
VARIABLE explorations {
    value: [
        "Create a real-time collaborative document editor with WebSocket support",
        "Build a distributed microservices architecture with API gateway and service discovery", 
        "Develop a machine learning pipeline for sentiment analysis with data visualization",
        "Design a blockchain-based cryptocurrency wallet with transaction history"
    ]
}

// Log the start of detailed analysis
ACTION {
    type: "log"
    message: "🔍📊 DETAILED EXPLORATION ANALYSIS - METASCRIPT APPROACH"
}

ACTION {
    type: "log"
    message: "========================================================="
}

ACTION {
    type: "log"
    message: "🎯 Analyzing ${explorations.length} explorations with full detail..."
}

// Process each exploration with detailed analysis
FSHARP {
    open System
    open System.IO
    open System.Text.Json

    type ExplorationComplexity = Simple | Medium | Complex | VeryComplex
    type ExplorationCategory = WebApp | API | AI_ML | Blockchain | Tool

    type ExplorationAnalysis = {
        Id: string
        Description: string
        Category: ExplorationCategory
        Complexity: ExplorationComplexity
        EstimatedLinesOfCode: int
        RequiredFeatures: string list
        TechnicalChallenges: string list
        Dependencies: string list
        ExpectedDuration: string
        BusinessValue: string
        RiskLevel: string
        FullProjectPath: string
        SummaryPath: string
        MetadataPath: string
    }

    let analyzeExploration (description: string) (index: int) =
        printfn ""
        printfn "🔍 [%d] EXPLORATION ANALYSIS" (index + 1)
        printfn "================================"
        printfn "📝 Description: %s" description
        printfn ""
        
        let id = Guid.NewGuid().ToString("N")[..7]
        let timestamp = DateTime.Now.ToString("yyyyMMdd_HHmmss")
        
        // Determine category
        let category = 
            let desc = description.ToLower()
            if desc.Contains("websocket") || desc.Contains("real-time") || desc.Contains("collaborative") then WebApp
            elif desc.Contains("microservice") || desc.Contains("api") || desc.Contains("gateway") then API
            elif desc.Contains("machine learning") || desc.Contains("ml") || desc.Contains("sentiment") then AI_ML
            elif desc.Contains("blockchain") || desc.Contains("cryptocurrency") || desc.Contains("wallet") then Blockchain
            else Tool
        
        // Determine complexity
        let complexity = 
            let desc = description.ToLower()
            let veryComplexKeywords = ["distributed"; "microservice"; "blockchain"; "machine learning"]
            let complexKeywords = ["real-time"; "websocket"; "api gateway"; "sentiment analysis"]
            let mediumKeywords = ["collaborative"; "visualization"; "transaction"]
            
            if veryComplexKeywords |> List.exists desc.Contains then VeryComplex
            elif complexKeywords |> List.exists desc.Contains then Complex
            elif mediumKeywords |> List.exists desc.Contains then Medium
            else Simple
        
        // Estimate lines of code
        let estimatedLOC = 
            match complexity with
            | Simple -> 100
            | Medium -> 250
            | Complex -> 500
            | VeryComplex -> 1000
        
        // Extract required features
        let requiredFeatures = 
            let features = ResizeArray<string>()
            let desc = description.ToLower()
            
            if desc.Contains("real-time") then features.Add("Real-time processing")
            if desc.Contains("websocket") then features.Add("WebSocket communication")
            if desc.Contains("collaborative") then features.Add("Multi-user collaboration")
            if desc.Contains("microservice") then features.Add("Microservices architecture")
            if desc.Contains("api") then features.Add("REST API endpoints")
            if desc.Contains("gateway") then features.Add("API Gateway")
            if desc.Contains("service discovery") then features.Add("Service discovery")
            if desc.Contains("machine learning") then features.Add("ML model training")
            if desc.Contains("sentiment") then features.Add("Sentiment analysis")
            if desc.Contains("visualization") then features.Add("Data visualization")
            if desc.Contains("blockchain") then features.Add("Blockchain integration")
            if desc.Contains("cryptocurrency") then features.Add("Cryptocurrency operations")
            if desc.Contains("wallet") then features.Add("Digital wallet")
            if desc.Contains("transaction") then features.Add("Transaction management")
            
            features |> Seq.toList
        
        // Determine technical challenges
        let technicalChallenges = 
            match complexity with
            | Simple -> ["Basic F# syntax"; "Simple data structures"]
            | Medium -> ["Concurrency handling"; "Data validation"; "Error management"]
            | Complex -> ["Real-time synchronization"; "Performance optimization"; "Complex state management"]
            | VeryComplex -> ["Distributed systems coordination"; "Advanced algorithms"; "Scalability design"; "Security implementation"]
        
        // Determine dependencies
        let dependencies = 
            let deps = ResizeArray<string>()
            deps.Add("FSharp.Core")
            
            if requiredFeatures |> List.exists (fun f -> f.Contains("WebSocket")) then deps.Add("SignalR")
            if requiredFeatures |> List.exists (fun f -> f.Contains("API")) then deps.Add("ASP.NET Core")
            if requiredFeatures |> List.exists (fun f -> f.Contains("ML")) then deps.Add("ML.NET")
            if requiredFeatures |> List.exists (fun f -> f.Contains("visualization")) then deps.Add("Plotly.NET")
            if requiredFeatures |> List.exists (fun f -> f.Contains("Blockchain")) then deps.Add("NBitcoin")
            
            deps |> Seq.toList
        
        // Create project paths
        let projectName = sprintf "Exploration_%s_%s" id timestamp
        let baseProjectPath = Path.Combine(".tars", "explorations", "detailed", projectName)
        let summaryPath = Path.Combine(baseProjectPath, "EXPLORATION-SUMMARY.md")
        let metadataPath = Path.Combine(baseProjectPath, "metadata.json")
        
        let analysis = {
            Id = id
            Description = description
            Category = category
            Complexity = complexity
            EstimatedLinesOfCode = estimatedLOC
            RequiredFeatures = requiredFeatures
            TechnicalChallenges = technicalChallenges
            Dependencies = dependencies
            ExpectedDuration = match complexity with
                | Simple -> "2-4 hours"
                | Medium -> "1-2 days"
                | Complex -> "3-5 days"
                | VeryComplex -> "1-2 weeks"
            BusinessValue = match complexity with
                | Simple -> "Medium"
                | Medium -> "Medium-High"
                | Complex -> "High"
                | VeryComplex -> "Very High"
            RiskLevel = match complexity with
                | Simple -> "Low"
                | Medium -> "Low-Medium"
                | Complex -> "Medium"
                | VeryComplex -> "Medium-High"
            FullProjectPath = baseProjectPath
            SummaryPath = summaryPath
            MetadataPath = metadataPath
        }
        
        printfn "📊 [ANALYSIS] Results:"
        printfn "  🆔 ID: %s" analysis.Id
        printfn "  📂 Category: %A" analysis.Category
        printfn "  🎯 Complexity: %A" analysis.Complexity
        printfn "  📏 Estimated LOC: %d lines" analysis.EstimatedLinesOfCode
        printfn "  ⏱️ Expected Duration: %s" analysis.ExpectedDuration
        printfn "  💰 Business Value: %s" analysis.BusinessValue
        printfn "  ⚠️ Risk Level: %s" analysis.RiskLevel
        printfn "  📁 Full Project Path: %s" analysis.FullProjectPath
        printfn ""
        printfn "🎯 Required Features (%d):" analysis.RequiredFeatures.Length
        analysis.RequiredFeatures |> List.iter (fun f -> printfn "  • %s" f)
        printfn ""
        printfn "🚧 Technical Challenges (%d):" analysis.TechnicalChallenges.Length
        analysis.TechnicalChallenges |> List.iter (fun c -> printfn "  • %s" c)
        printfn ""
        printfn "📦 Dependencies (%d):" analysis.Dependencies.Length
        analysis.Dependencies |> List.iter (fun d -> printfn "  • %s" d)
        
        analysis
    
    let createProjectStructure (analysis: ExplorationAnalysis) =
        printfn ""
        printfn "📁 [STRUCTURE] Creating project structure..."
        printfn "============================================="
        
        // Create directory structure
        Directory.CreateDirectory(analysis.FullProjectPath) |> ignore
        Directory.CreateDirectory(Path.Combine(analysis.FullProjectPath, "src")) |> ignore
        Directory.CreateDirectory(Path.Combine(analysis.FullProjectPath, "tests")) |> ignore
        Directory.CreateDirectory(Path.Combine(analysis.FullProjectPath, "docs")) |> ignore
        Directory.CreateDirectory(Path.Combine(analysis.FullProjectPath, "scripts")) |> ignore
        
        printfn "📂 Created directories:"
        printfn "  📁 %s/src/ (source code)" analysis.FullProjectPath
        printfn "  📁 %s/tests/ (unit tests)" analysis.FullProjectPath
        printfn "  📁 %s/docs/ (documentation)" analysis.FullProjectPath
        printfn "  📁 %s/scripts/ (automation)" analysis.FullProjectPath
        
        // Create detailed summary
        let summaryContent = sprintf """# 🔍 Exploration Analysis: %s

**Generated by TARS Metascript:** %s  
**Analysis ID:** `%s`  
**Full Project Path:** `%s`

## 📊 Analysis Overview

| Attribute | Value |
|-----------|-------|
| **Category** | %A |
| **Complexity** | %A |
| **Estimated LOC** | %d lines |
| **Expected Duration** | %s |
| **Business Value** | %s |
| **Risk Level** | %s |

## 🎯 Required Features (%d)

%s

## 🚧 Technical Challenges (%d)

%s

## 📦 Dependencies (%d)

%s

## 📁 Project Structure

```
%s/
├── src/                    # F# source code
├── tests/                  # Unit and integration tests
├── docs/                   # Project documentation
├── scripts/                # Build and deployment automation
├── EXPLORATION-SUMMARY.md  # This analysis document
└── metadata.json          # Machine-readable metadata
```

## 🔄 TARS Blue/Green Workflow

1. **🔵 Blue Node Creation** - Generate experimental implementation
2. **🧪 QA Validation** - Comprehensive quality assurance testing
3. **🟢 Green Promotion** - Promote to stable green node if passing
4. **📊 Continuous Monitoring** - Performance and stability tracking

## 🎯 Promotion Criteria

- ✅ Compilation success rate: 100%%
- ✅ Runtime stability: No crashes in 10 test runs
- ✅ Feature completeness: All required features implemented
- ✅ Code quality: Follows F# best practices
- ✅ Performance: Meets complexity-appropriate benchmarks
- ✅ Documentation: Complete and accurate

---
*Generated by TARS Autonomous Exploration Analysis System*  
*Metascript: detailed-exploration-analysis.trsx*
""" 
            analysis.Description
            (DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss"))
            analysis.Id
            analysis.FullProjectPath
            analysis.Category
            analysis.Complexity
            analysis.EstimatedLinesOfCode
            analysis.ExpectedDuration
            analysis.BusinessValue
            analysis.RiskLevel
            analysis.RequiredFeatures.Length
            (analysis.RequiredFeatures |> List.map (sprintf "- %s") |> String.concat "\n")
            analysis.TechnicalChallenges.Length
            (analysis.TechnicalChallenges |> List.map (sprintf "- %s") |> String.concat "\n")
            analysis.Dependencies.Length
            (analysis.Dependencies |> List.map (sprintf "- %s") |> String.concat "\n")
            analysis.FullProjectPath
        
        File.WriteAllText(analysis.SummaryPath, summaryContent)
        
        // Create metadata JSON
        let metadataJson = JsonSerializer.Serialize(analysis, JsonSerializerOptions(WriteIndented = true))
        File.WriteAllText(analysis.MetadataPath, metadataJson)
        
        printfn "📄 Created analysis files:"
        printfn "  📋 %s" analysis.SummaryPath
        printfn "  📊 %s" analysis.MetadataPath
        
        analysis
    
    // Process all explorations
    let explorations = [
        "Create a real-time collaborative document editor with WebSocket support"
        "Build a distributed microservices architecture with API gateway and service discovery"
        "Develop a machine learning pipeline for sentiment analysis with data visualization"
        "Design a blockchain-based cryptocurrency wallet with transaction history"
    ]
    
    let analysisResults = 
        explorations 
        |> List.mapi (fun i exploration ->
            let analysis = analyzeExploration exploration i
            let finalAnalysis = createProjectStructure analysis
            printfn "✅ [COMPLETE] Analysis %d complete!" (i + 1)
            printfn ""
            finalAnalysis)
    
    // Return summary for metascript
    sprintf "Analyzed %d explorations successfully" analysisResults.Length
}

// Store the analysis result
VARIABLE analysis_result {
    value: "${_last_result}"
}

ACTION {
    type: "log"
    message: "📊 Analysis Result: ${analysis_result}"
}

// Final summary
ACTION {
    type: "log"
    message: ""
}

ACTION {
    type: "log"
    message: "📊 [FINAL SUMMARY] Detailed Exploration Analysis Complete"
}

ACTION {
    type: "log"
    message: "============================================================"
}

ACTION {
    type: "log"
    message: "✅ All explorations analyzed with comprehensive detail!"
}

ACTION {
    type: "log"
    message: "📁 Project structures created with full documentation!"
}

ACTION {
    type: "log"
    message: "🎯 Ready for blue node code generation with complete context!"
}

ACTION {
    type: "log"
    message: "🔍 Each exploration has full path, summary, and metadata!"
}

ACTION {
    type: "log"
    message: ""
}

ACTION {
    type: "log"
    message: "🧠🤖 TARS METASCRIPT-FIRST EXPLORATION ANALYSIS COMPLETE!"
}
