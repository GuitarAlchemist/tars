namespace TarsEngine.FSharp.ProjectGeneration

open System
open TarsEngine.FSharp.ProjectGeneration.AutoProjectGenerator

/// <summary>
/// Content generators for different types of project artifacts
/// Each method generates realistic, production-ready content
/// </summary>
module ContentGenerators =
    
    /// <summary>
    /// Generate requirements document
    /// </summary>
    let generateRequirementsDocument (analysis: ProjectAnalysis) : string =
        $"""# {analysis.ProjectName} - Requirements Document

## Project Overview
**Name:** {analysis.ProjectName}
**Description:** {analysis.Description}
**Complexity:** {analysis.Complexity}
**Estimated Duration:** {analysis.EstimatedDuration}

## Functional Requirements
{analysis.Features |> List.map (fun f -> $"- {f}") |> String.concat "\n"}

## Non-Functional Requirements
{analysis.Requirements |> List.map (fun r -> $"- {r}") |> String.concat "\n"}

## Technology Stack
{analysis.TechnologyStack |> List.map (fun t -> $"- {t}") |> String.concat "\n"}

## Architecture Pattern
{analysis.Architecture}

## Success Criteria
- All functional requirements implemented and tested
- Performance benchmarks met
- Security requirements satisfied
- Deployment pipeline operational

---
*Generated by TARS Autonomous Project Generator*
*Date: {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss} UTC*
"""

    /// <summary>
    /// Generate user stories
    /// </summary>
    let generateUserStories (analysis: ProjectAnalysis) : string =
        let stories = 
            match analysis.ProjectName.ToLowerInvariant() with
            | name when name.Contains("task") ->
                [
                    "As a user, I want to create tasks quickly so that I can capture my thoughts without interruption"
                    "As a user, I want to prioritize my tasks so that I can focus on what's most important"
                    "As a team member, I want to collaborate on shared tasks so that we can work together effectively"
                    "As a manager, I want to track team progress so that I can ensure project success"
                ]
            | name when name.Contains("blog") ->
                [
                    "As a writer, I want to create and publish blog posts so that I can share my thoughts"
                    "As a reader, I want to browse and search posts so that I can find interesting content"
                    "As an admin, I want to moderate content so that I can maintain quality standards"
                ]
            | name when name.Contains("ecommerce") ->
                [
                    "As a customer, I want to browse products so that I can find what I need"
                    "As a customer, I want to add items to cart so that I can purchase multiple items"
                    "As a seller, I want to manage my inventory so that I can track stock levels"
                    "As an admin, I want to process orders so that customers receive their purchases"
                ]
            | _ ->
                [
                    "As a user, I want to access the application so that I can use its features"
                    "As a user, I want to manage my data so that I can keep it organized"
                    "As an admin, I want to configure the system so that it meets our needs"
                ]
        
        $"""# User Stories - {analysis.ProjectName}

## Core User Stories

{stories |> List.mapi (fun i story -> $"### Story {i + 1}\n**{story}**\n\n**Acceptance Criteria:**\n- Feature is accessible and intuitive\n- Data is validated and secure\n- Performance meets requirements\n- Error handling is comprehensive\n") |> String.concat "\n"}

---
*Generated by TARS Product Management Team*
"""

    /// <summary>
    /// Generate system architecture
    /// </summary>
    let generateSystemArchitecture (analysis: ProjectAnalysis) : string =
        let architecturePattern = 
            match analysis.Architecture with
            | "Microservices" -> """
## Microservices Architecture

```
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   Web Client    │    │  Mobile Client  │    │   Admin Panel   │
│    (React)      │    │   (React Native)│    │    (React)      │
└─────────┬───────┘    └─────────┬───────┘    └─────────┬───────┘
          │                      │                      │
          └──────────────────────┼──────────────────────┘
                                 │
                    ┌─────────────┴─────────────┐
                    │      API Gateway          │
                    │    (Load Balancer)        │
                    └─────────────┬─────────────┘
                                 │
        ┌────────────────────────┼────────────────────────┐
        │                       │                        │
┌───────▼────────┐    ┌─────────▼────────┐    ┌─────────▼────────┐
│  Core Service  │    │   User Service   │    │   Data Service   │
│   (F# + ASP)   │    │   (F# + ASP)     │    │   (F# + ASP)     │
└───────┬────────┘    └─────────┬────────┘    └─────────┬────────┘
        │                       │                        │
        └───────────────────────┼────────────────────────┘
                               │
                    ┌──────────▼──────────┐
                    │    Message Bus      │
                    │   (RabbitMQ/Redis)  │
                    └─────────────────────┘
```"""
            | "Modular Monolith" -> """
## Modular Monolith Architecture

```
┌─────────────────────────────────────────────────────────────┐
│                    Web Application                          │
│  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐         │
│  │     UI      │  │     API     │  │   Admin     │         │
│  │  (React)    │  │ Controllers │  │   Panel     │         │
│  └─────────────┘  └─────────────┘  └─────────────┘         │
│                           │                                │
│  ┌─────────────────────────┼─────────────────────────┐     │
│  │              Business Logic Layer                 │     │
│  │  ┌─────────┐  ┌─────────┐  ┌─────────┐           │     │
│  │  │ Module1 │  │ Module2 │  │ Module3 │           │     │
│  │  │ Service │  │ Service │  │ Service │           │     │
│  │  └─────────┘  └─────────┘  └─────────┘           │     │
│  └─────────────────────────┼─────────────────────────┘     │
│                           │                                │
│  ┌─────────────────────────┼─────────────────────────┐     │
│  │                Data Access Layer                  │     │
│  │              ┌─────────────────┐                  │     │
│  │              │   Repository    │                  │     │
│  │              │    Pattern      │                  │     │
│  │              └─────────────────┘                  │     │
│  └─────────────────────────┼─────────────────────────┘     │
└─────────────────────────────┼─────────────────────────────┘
                             │
                    ┌────────▼────────┐
                    │    Database     │
                    │   (PostgreSQL)  │
                    └─────────────────┘
```"""
            | _ -> """
## Layered Architecture

```
┌─────────────────────────────────────────────────────────────┐
│                  Presentation Layer                         │
│  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐         │
│  │  Web UI     │  │  REST API   │  │  Admin UI   │         │
│  │  (React)    │  │ Controllers │  │  (React)    │         │
│  └─────────────┘  └─────────────┘  └─────────────┘         │
└─────────────────────────┬───────────────────────────────────┘
                         │
┌─────────────────────────┼───────────────────────────────────┐
│                  Business Logic Layer                      │
│  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐         │
│  │  Services   │  │ Validators  │  │  Workflows  │         │
│  │             │  │             │  │             │         │
│  └─────────────┘  └─────────────┘  └─────────────┘         │
└─────────────────────────┬───────────────────────────────────┘
                         │
┌─────────────────────────┼───────────────────────────────────┐
│                   Data Access Layer                        │
│  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐         │
│  │ Repositories│  │   Entities  │  │   Context   │         │
│  │             │  │             │  │             │         │
│  └─────────────┘  └─────────────┘  └─────────────┘         │
└─────────────────────────┬───────────────────────────────────┘
                         │
                ┌────────▼────────┐
                │    Database     │
                │   (PostgreSQL)  │
                └─────────────────┘
```"""
        
        $"""# {analysis.ProjectName} - System Architecture

## Overview
This document describes the system architecture for {analysis.ProjectName}, a {analysis.Complexity} application built using {analysis.Architecture} pattern.

{architecturePattern}

## Technology Stack

### Backend
{analysis.TechnologyStack |> List.filter (fun t -> t.Contains("F#") || t.Contains("ASP") || t.Contains("PostgreSQL")) |> List.map (fun t -> $"- **{t}**") |> String.concat "\n"}

### Infrastructure
{analysis.TechnologyStack |> List.filter (fun t -> t.Contains("Docker") || t.Contains("Kubernetes") || t.Contains("Redis")) |> List.map (fun t -> $"- **{t}**") |> String.concat "\n"}

## Key Design Principles
- **Separation of Concerns**: Clear boundaries between layers
- **Dependency Inversion**: High-level modules don't depend on low-level modules
- **Single Responsibility**: Each component has one reason to change
- **Open/Closed Principle**: Open for extension, closed for modification

## Security Architecture
- JWT-based authentication
- Role-based authorization
- Input validation and sanitization
- SQL injection prevention
- XSS protection
- HTTPS enforcement

---
*Generated by TARS Architecture Team*
"""

    /// <summary>
    /// Generate database schema
    /// </summary>
    let generateDatabaseSchema (analysis: ProjectAnalysis) : string =
        let coreSchema = 
            match analysis.ProjectName.ToLowerInvariant() with
            | name when name.Contains("task") -> """
-- Core Tables for Task Management

CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    is_active BOOLEAN DEFAULT true
);

CREATE TABLE projects (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(255) NOT NULL,
    description TEXT,
    owner_id UUID REFERENCES users(id),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    status VARCHAR(50) DEFAULT 'active'
);

CREATE TABLE tasks (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    title VARCHAR(500) NOT NULL,
    description TEXT,
    priority INTEGER DEFAULT 2,
    status VARCHAR(50) DEFAULT 'pending',
    due_date TIMESTAMP WITH TIME ZONE,
    created_by UUID REFERENCES users(id),
    assigned_to UUID REFERENCES users(id),
    project_id UUID REFERENCES projects(id),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);"""
            | name when name.Contains("blog") -> """
-- Core Tables for Blog Platform

CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    username VARCHAR(50) UNIQUE NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    display_name VARCHAR(100),
    bio TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    is_active BOOLEAN DEFAULT true
);

CREATE TABLE categories (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(100) UNIQUE NOT NULL,
    slug VARCHAR(100) UNIQUE NOT NULL,
    description TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE TABLE posts (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    title VARCHAR(255) NOT NULL,
    slug VARCHAR(255) UNIQUE NOT NULL,
    content TEXT NOT NULL,
    excerpt TEXT,
    author_id UUID REFERENCES users(id),
    category_id UUID REFERENCES categories(id),
    status VARCHAR(50) DEFAULT 'draft',
    published_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);"""
            | _ -> """
-- Generic Application Schema

CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    is_active BOOLEAN DEFAULT true
);

CREATE TABLE entities (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(255) NOT NULL,
    description TEXT,
    owner_id UUID REFERENCES users(id),
    data JSONB DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);"""
        
        $"""-- {analysis.ProjectName} Database Schema
-- Generated by TARS Architecture Team
-- Date: {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss} UTC

{coreSchema}

-- Indexes for Performance
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_active ON users(is_active);

-- Audit Trail
CREATE TABLE audit_log (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    table_name VARCHAR(100) NOT NULL,
    record_id UUID NOT NULL,
    action VARCHAR(50) NOT NULL,
    old_values JSONB,
    new_values JSONB,
    user_id UUID REFERENCES users(id),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Functions and Triggers
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Apply updated_at trigger to all tables with updated_at column
-- (Add triggers for each table as needed)
"""

    /// <summary>
    /// Generate domain models in F#
    /// </summary>
    let generateDomainModels (analysis: ProjectAnalysis) : string =
        let domainTypes = 
            match analysis.ProjectName.ToLowerInvariant() with
            | name when name.Contains("task") -> """
/// Task priority levels
type Priority = 
    | Low = 1
    | Medium = 2  
    | High = 3
    | Critical = 4

/// Task status enumeration
type TaskStatus =
    | Pending
    | InProgress
    | Completed
    | Cancelled

/// User domain model
type User = {
    Id: Guid
    Email: string
    FirstName: string
    LastName: string
    CreatedAt: DateTime
    IsActive: bool
}

/// Task domain model
type Task = {
    Id: Guid
    Title: string
    Description: string option
    Priority: Priority
    Status: TaskStatus
    DueDate: DateTime option
    CreatedBy: Guid
    AssignedTo: Guid option
    ProjectId: Guid option
    CreatedAt: DateTime
    UpdatedAt: DateTime
}

/// Project domain model
type Project = {
    Id: Guid
    Name: string
    Description: string option
    OwnerId: Guid
    Status: string
    CreatedAt: DateTime
}"""
            | name when name.Contains("blog") -> """
/// Post status enumeration
type PostStatus =
    | Draft
    | Published
    | Archived

/// User domain model
type User = {
    Id: Guid
    Username: string
    Email: string
    DisplayName: string option
    Bio: string option
    CreatedAt: DateTime
    IsActive: bool
}

/// Category domain model
type Category = {
    Id: Guid
    Name: string
    Slug: string
    Description: string option
    CreatedAt: DateTime
}

/// Blog post domain model
type Post = {
    Id: Guid
    Title: string
    Slug: string
    Content: string
    Excerpt: string option
    AuthorId: Guid
    CategoryId: Guid option
    Status: PostStatus
    PublishedAt: DateTime option
    CreatedAt: DateTime
    UpdatedAt: DateTime
}"""
            | _ -> """
/// Generic entity status
type EntityStatus =
    | Active
    | Inactive
    | Archived

/// User domain model
type User = {
    Id: Guid
    Email: string
    FirstName: string option
    LastName: string option
    CreatedAt: DateTime
    IsActive: bool
}

/// Generic entity model
type Entity = {
    Id: Guid
    Name: string
    Description: string option
    OwnerId: Guid
    Data: Map<string, obj>
    CreatedAt: DateTime
    UpdatedAt: DateTime
}"""
        
        $"""namespace {analysis.ProjectName}.Core.Domain

open System

{domainTypes}

/// Common result type for operations
type Result<'TSuccess, 'TError> =
    | Success of 'TSuccess
    | Error of 'TError

/// Domain events
type DomainEvent = {{
    Id: Guid
    EventType: string
    AggregateId: Guid
    Data: obj
    OccurredAt: DateTime
    UserId: Guid option
}}

/// Validation error
type ValidationError = {{
    Field: string
    Message: string
}}

/// Domain error types
type DomainError =
    | ValidationErrors of ValidationError list
    | NotFound of string
    | Unauthorized of string
    | BusinessRuleViolation of string
    | ExternalServiceError of string

// Generated by TARS Senior Development Team
// Date: {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss} UTC
"""
