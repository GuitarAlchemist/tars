@page "/chat-legacy"
@namespace TarsApp.Components.Pages.Legacy
@using Microsoft.AspNetCore.Components.Web
@inject IChatClient ChatClient
@inject ISnackbar Snackbar

<PageTitle>TARS - Chat (Legacy)</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudText Typo="Typo.h3" Class="mb-4">AI Assistant (Legacy)</MudText>
    
    <MudPaper Class="pa-4" Elevation="3">
        <div class="d-flex flex-column" style="height: 60vh;">
            <div class="flex-grow-1 overflow-auto mb-4" style="overflow-y: auto;">
                @if (messages.Count == 0)
                {
                    <MudText Align="Align.Center" Class="my-4">Start a conversation with TARS</MudText>
                }
                else
                {
                    @foreach (var message in messages)
                    {
                        <MudPaper Class="pa-3 mb-2" Elevation="0" 
                                 Style="@(message.IsUser ? "background-color: #e3f2fd; margin-left: 20%;" : "background-color: #f5f5f5; margin-right: 20%;")"
                                 Width="80%">
                            <MudText Typo="Typo.body1">@message.Content</MudText>
                            <MudText Typo="Typo.caption" Class="mt-1">@message.Timestamp.ToString("g")</MudText>
                        </MudPaper>
                    }
                    
                    @if (isGenerating)
                    {
                        <MudPaper Class="pa-3 mb-2" Elevation="0" Style="background-color: #f5f5f5; margin-right: 20%;" Width="80%">
                            <MudProgressLinear Indeterminate="true" Color="Color.Primary" Class="mb-2" />
                            <MudText Typo="Typo.caption">TARS is thinking...</MudText>
                        </MudPaper>
                    }
                }
            </div>
            
            <MudPaper Elevation="0" Class="d-flex align-center">
                <MudTextField @bind-Value="userInput" Label="Type your message" 
                              Variant="Variant.Outlined" Class="flex-grow-1 mr-2"
                              Disabled="@isGenerating"
                              @onkeydown="@HandleKeyPress" />
                              
                <MudButton Variant="Variant.Filled" Color="Color.Primary" 
                           OnClick="SendMessage" Disabled="@(isGenerating || string.IsNullOrWhiteSpace(userInput))">
                    <MudIcon Icon="@Icons.Material.Filled.Send" />
                </MudButton>
            </MudPaper>
        </div>
    </MudPaper>
</MudContainer>

@code {
    private string userInput = "";
    private List<ChatMessage> messages = new();
    private bool isGenerating = false;
    
    private class ChatMessage
    {
        public string Content { get; set; }
        public bool IsUser { get; set; }
        public DateTime Timestamp { get; set; } = DateTime.Now;
    }
    
    protected override async Task OnInitializedAsync()
    {
        // Optional: Add a welcome message
        messages.Add(new ChatMessage 
        { 
            Content = "Hello! I'm TARS, your AI assistant. How can I help you today?", 
            IsUser = false 
        });
    }
    
    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(userInput))
            return;
            
        var userMessage = new ChatMessage { Content = userInput, IsUser = true };
        messages.Add(userMessage);
        
        var userInputCopy = userInput;
        userInput = "";
        
        isGenerating = true;
        StateHasChanged();
        
        try
        {
            // Use the ChatClient to get a response
            var response = await GetAIResponse(userInputCopy);
            
            messages.Add(new ChatMessage { Content = response, IsUser = false });
        }
        catch (Exception ex)
        {
            messages.Add(new ChatMessage 
            { 
                Content = "I'm sorry, I encountered an error processing your request.", 
                IsUser = false 
            });
            
            Snackbar.Add("Error: " + ex.Message, Severity.Error);
        }
        finally
        {
            isGenerating = false;
        }
    }
    
    private async Task<string> GetAIResponse(string userMessage)
    {
        try
        {
            // Simulate AI response for now
            await Task.Delay(1000);
            
            // In a real implementation, you would use the ChatClient
            // var response = await ChatClient.GetChatCompletionsAsync(userMessage);
            // return response.Content;
            
            return "I'm TARS, your AI assistant. I'm here to help with your software development tasks. What would you like me to do?";
        }
        catch
        {
            throw;
        }
    }
    
    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(userInput) && !isGenerating)
        {
            await SendMessage();
        }
    }
}
