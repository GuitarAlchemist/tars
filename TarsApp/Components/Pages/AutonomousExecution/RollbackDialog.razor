@using TarsEngine.Models
@using TarsEngine.Services
@using TarsApp.Models
@inject RollbackManager RollbackManager
@inject ILogger<RollbackDialog> Logger

<MudForm @ref="form" Model="@options">
    <MudGrid>
        <MudItem xs="12">
            <MudCard Elevation="0">
                <MudCardContent>
                    <MudText Typo="Typo.h6" Class="mb-4">Rollback Options</MudText>
                    <MudGrid>
                        <MudItem xs="12">
                            <MudRadioGroup T="RollbackType" @bind-SelectedOption="@rollbackType">
                                <MudRadio T="RollbackType" Option="@RollbackType.All" Color="Color.Primary">Roll back all changes</MudRadio>
                                <MudRadio T="RollbackType" Option="@RollbackType.Transaction" Color="Color.Primary">Roll back specific transaction</MudRadio>
                                <MudRadio T="RollbackType" Option="@RollbackType.File" Color="Color.Primary">Roll back specific file</MudRadio>
                            </MudRadioGroup>
                        </MudItem>

                        @if (rollbackType == RollbackType.Transaction)
                        {
                            <MudItem xs="12">
                                <MudSelect @bind-Value="options.TransactionId" Label="Transaction" Required="true">
                                    @foreach (var transaction in transactions)
                                    {
                                        <MudSelectItem Value="@transaction.Id">@transaction.Name</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                        }

                        @if (rollbackType == RollbackType.File)
                        {
                            <MudItem xs="12">
                                <MudSelect @bind-Value="options.FilePath" Label="File" Required="true">
                                    @foreach (var file in backedUpFiles)
                                    {
                                        <MudSelectItem Value="@file">@file</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                        }

                        <MudItem xs="12">
                            <MudSwitch T="bool" @bind-Checked="options.Force" Label="Force Rollback" Color="Color.Error" />
                            <MudText Typo="Typo.caption">Force rollback even if there are conflicts</MudText>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <MudItem xs="12">
            <MudAlert Severity="Severity.Warning" Class="mb-4">
                <MudText Typo="Typo.body1">
                    <strong>Warning:</strong> Rolling back changes cannot be undone. Make sure you have saved any important changes.
                </MudText>
            </MudAlert>

            <MudButton Variant="Variant.Filled" Color="Color.Error" FullWidth="true" OnClick="Rollback">
                Roll Back Changes
            </MudButton>
        </MudItem>
    </MudGrid>
</MudForm>

@code {
    [Parameter]
    public string ContextId { get; set; } = string.Empty;

    [Parameter]
    public EventCallback OnRollback { get; set; }

    private MudForm form = null!;
    private RollbackOptions options = new();
    private RollbackType rollbackType = RollbackType.All;
    private List<Transaction> transactions = [];
    private List<string> backedUpFiles = [];

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        // Initialize options with defaults
        options = new RollbackOptions
        {
            All = true,
            Force = false
        };

        // Load transactions and backed up files
        await LoadDataAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        try
        {
            // In a real implementation, this would load data from the services
            // For now, use mock data

            // Load transactions
            transactions =
            [
                new Transaction { Id = "TRX-1", Name = "Modify Authentication Service", Description = "Changes to authentication service" },
                new Transaction { Id = "TRX-2", Name = "Update API Controllers", Description = "Changes to API controllers" },
                new Transaction { Id = "TRX-3", Name = "Add Logging", Description = "Add logging to services" }
            ];

            // Load backed up files
            backedUpFiles =
            [
                "src/Services/AuthService.cs",
                "src/Controllers/AuthController.cs",
                "src/Services/CacheService.cs",
                "src/Controllers/ApiController.cs"
            ];
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading rollback data");
        }
    }

    private async Task Rollback()
    {
        await form.Validate();

        if (form.IsValid)
        {
            // Update options based on rollback type
            options.All = rollbackType == RollbackType.All;
            options.TransactionId = rollbackType == RollbackType.Transaction ? options.TransactionId : null;
            options.FilePath = rollbackType == RollbackType.File ? options.FilePath : null;

            await OnRollback.InvokeAsync();
        }
    }

    private enum RollbackType
    {
        All,
        Transaction,
        File
    }

    public class RollbackOptions
    {
        public bool All { get; set; }
        public string? TransactionId { get; set; }
        public string? FilePath { get; set; }
        public bool Force { get; set; }
    }
}
