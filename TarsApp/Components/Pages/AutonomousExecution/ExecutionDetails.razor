@using TarsEngine.Models
@using TarsApp.Services.Interfaces
@using TarsApp.ViewModels
@using TarsApp.Models
@inject IExecutionPlannerService ExecutionPlannerService
@inject ILogger<ExecutionDetails> Logger

<MudGrid>
    <MudItem xs="12">
        <MudCard Elevation="0">
            <MudCardContent>
                <MudText Typo="Typo.h6" Class="mb-4">Execution Details</MudText>
                <MudGrid>
                    <MudItem xs="12" md="6">
                        <MudField Label="ID" Variant="Variant.Outlined">@context?.Id</MudField>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudField Label="Improvement" Variant="Variant.Outlined">@improvementName</MudField>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudField Label="Status" Variant="Variant.Outlined">
                            <MudChip T="string" Color="@statusColor" Size="Size.Small" Text="@status"></MudChip>
                        </MudField>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudField Label="Mode" Variant="Variant.Outlined">@context?.Mode</MudField>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudField Label="Environment" Variant="Variant.Outlined">@context?.Environment</MudField>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudField Label="Created At" Variant="Variant.Outlined">@context?.CreatedAt.ToString("yyyy-MM-dd HH:mm:ss")</MudField>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudField Label="Completed At" Variant="Variant.Outlined">@(completedAt?.ToString("yyyy-MM-dd HH:mm:ss") ?? "N/A")</MudField>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudField Label="Duration" Variant="Variant.Outlined">@duration</MudField>
                    </MudItem>
                </MudGrid>
            </MudCardContent>
        </MudCard>
    </MudItem>

    <MudItem xs="12">
        <MudTabs Elevation="0" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-0">
            <MudTabPanel Text="Files" Icon="@Icons.Material.Filled.Folder">
                <MudCard Elevation="0">
                    <MudCardContent>
                        <MudTabs Elevation="0" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-0">
                            @if (context?.ModifiedFiles.Count > 0)
                            {
                                <MudTabPanel Text="Modified" Icon="@Icons.Material.Filled.Edit">
                                    <MudList T="string" Dense="true" Items="context.ModifiedFiles">
                                        @foreach (var file in context.ModifiedFiles)
                                        {
                                            <MudListItem T="string" Text="@file" Icon="@Icons.Material.Filled.Edit" IconColor="Color.Warning">
                                                @file
                                            </MudListItem>
                                        }
                                    </MudList>
                                </MudTabPanel>
                            }
                            @if (context?.CreatedFiles.Count > 0)
                            {
                                <MudTabPanel Text="Created" Icon="@Icons.Material.Filled.Add">
                                    <MudList T="string" Dense="true" Items="context.CreatedFiles">
                                        @foreach (var file in context.CreatedFiles)
                                        {
                                            <MudListItem T="string" Text="@file" Icon="@Icons.Material.Filled.Add" IconColor="Color.Success">
                                                @file
                                            </MudListItem>
                                        }
                                    </MudList>
                                </MudTabPanel>
                            }
                            @if (context?.DeletedFiles.Count > 0)
                            {
                                <MudTabPanel Text="Deleted" Icon="@Icons.Material.Filled.Delete">
                                    <MudList T="string" Dense="true" Items="context.DeletedFiles">
                                        @foreach (var file in context.DeletedFiles)
                                        {
                                            <MudListItem T="string" Text="@file" Icon="@Icons.Material.Filled.Delete" IconColor="Color.Error">
                                                @file
                                            </MudListItem>
                                        }
                                    </MudList>
                                </MudTabPanel>
                            }
                        </MudTabs>
                    </MudCardContent>
                </MudCard>
            </MudTabPanel>

            <MudTabPanel Text="Logs" Icon="@Icons.Material.Filled.List">
                <MudCard Elevation="0">
                    <MudCardContent>
                        <MudPaper Class="pa-4" Style="max-height: 400px; overflow-y: auto; background-color: #1e1e1e;">
                            @foreach (var log in context?.Logs.OrderByDescending(l => l.Timestamp).Take(100) ?? [])
                            {
                                <MudText Style="@GetLogStyle(log)">[@log.Timestamp.ToString("HH:mm:ss")] [@log.Level] @log.Message</MudText>
                            }
                        </MudPaper>
                    </MudCardContent>
                </MudCard>
            </MudTabPanel>

            <MudTabPanel Text="Errors" Icon="@Icons.Material.Filled.Error">
                <MudCard Elevation="0">
                    <MudCardContent>
                        @if (context?.Errors.Count > 0)
                        {
                            <MudList T="TarsEngine.Models.ExecutionError" Dense="true" Items="context.Errors">
                                @foreach (var error in context.Errors.OrderByDescending(e => e.Timestamp))
                                {
                                    <MudListItem T="TarsEngine.Models.ExecutionError" Text="@error.Message" Icon="@Icons.Material.Filled.Error" IconColor="Color.Error">
                                        <div>
                                            <MudText Typo="Typo.body1">@error.Message</MudText>
                                            <MudText Typo="Typo.caption">@error.Timestamp.ToString("yyyy-MM-dd HH:mm:ss")</MudText>
                                            @if (!string.IsNullOrEmpty(error.StackTrace))
                                            {
                                                <MudExpansionPanel>
                                                    <TitleContent>
                                                        <MudText Typo="Typo.body2">Stack Trace</MudText>
                                                    </TitleContent>
                                                    <ChildContent>
                                                        <MudText Typo="Typo.caption" Style="white-space: pre-wrap; font-family: monospace;">@error.StackTrace</MudText>
                                                    </ChildContent>
                                                </MudExpansionPanel>
                                            }
                                        </div>
                                    </MudListItem>
                                }
                            </MudList>
                        }
                        else
                        {
                            <MudAlert Severity="Severity.Success">No errors reported</MudAlert>
                        }
                    </MudCardContent>
                </MudCard>
            </MudTabPanel>

            <MudTabPanel Text="Metrics" Icon="@Icons.Material.Filled.ShowChart">
                <MudCard Elevation="0">
                    <MudCardContent>
                        <MudTable Items="@metrics" Dense="true" Hover="true" Breakpoint="Breakpoint.Sm">
                            <HeaderContent>
                                <MudTh>Metric</MudTh>
                                <MudTh>Value</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Metric">@context.Key</MudTd>
                                <MudTd DataLabel="Value">@context.Value</MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudCardContent>
                </MudCard>
            </MudTabPanel>

            <MudTabPanel Text="State" Icon="@Icons.Material.Filled.Storage">
                <MudCard Elevation="0">
                    <MudCardContent>
                        <MudTable Items="@state" Dense="true" Hover="true" Breakpoint="Breakpoint.Sm">
                            <HeaderContent>
                                <MudTh>Key</MudTh>
                                <MudTh>Value</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Key">@context.Key</MudTd>
                                <MudTd DataLabel="Value">@context.Value</MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudCardContent>
                </MudCard>
            </MudTabPanel>
        </MudTabs>
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public string ContextId { get; set; } = string.Empty;

    private ExecutionContext? context;
    private string improvementName = "N/A";
    private string status = "Unknown";
    private Color statusColor = Color.Default;
    private DateTime? completedAt;
    private string duration = "N/A";
    private List<KeyValuePair<string, string>> metrics = [];
    private List<KeyValuePair<string, string>> state = [];

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadContextAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await LoadContextAsync();
    }

    private async Task LoadContextAsync()
    {
        try
        {
            // In a real implementation, this would get the execution context from the service
            // For now, use mock data
            context = await GetExecutionContextAsync();

            if (context != null)
            {
                // Set improvement name
                improvementName = GetImprovementName(context.ImprovementId);

                // Set status
                status = GetStatusText(context);
                statusColor = GetStatusColor(context);

                // Set completed at
                completedAt = context.GetState<DateTime?>("CompletedAt");

                // Set duration
                if (completedAt != null)
                {
                    var durationTime = completedAt.Value - context.CreatedAt;
                    duration = $"{durationTime.TotalMinutes:F0}m";
                }
                else
                {
                    var durationTime = DateTime.UtcNow - context.CreatedAt;
                    duration = $"{durationTime.TotalMinutes:F0}m (ongoing)";
                }

                // Set metrics
                metrics = context.Metrics.Select(m => new KeyValuePair<string, string>(m.Key, m.Value.ToString())).ToList();

                // Set state
                state = context.State.Select(s => new KeyValuePair<string, string>(s.Key, s.Value.ToString() ?? "null")).ToList();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading execution context");
        }
    }

    private async Task<ExecutionContext?> GetExecutionContextAsync()
    {
        // In a real implementation, this would get the execution context from the service
        // For now, return a mock context based on the ID

        if (ContextId == "CTX-123")
        {
            return new ExecutionContext
            {
                Id = "CTX-123",
                ExecutionPlanId = "PLAN-123",
                ImprovementId = "IMP-456",
                Mode = ExecutionMode.Real,
                Environment = ExecutionEnvironment.Development,
                CreatedAt = DateTime.UtcNow.AddHours(-2),
                ModifiedFiles = ["src/Services/AuthService.cs", "src/Controllers/AuthController.cs"],
                CreatedFiles = [],
                DeletedFiles = [],
                Metrics = new Dictionary<string, double>
                {
                    { "Progress", 1.0 },
                    { "SuccessRate", 1.0 },
                    { "TestCoverage", 0.85 },
                    { "CodeQuality", 0.9 }
                },
                State = new Dictionary<string, object>
                {
                    { "Completed", true },
                    { "Success", true },
                    { "CompletedAt", DateTime.UtcNow.AddHours(-1) },
                    { "Approved", true },
                    { "ApprovedBy", "TARS" },
                    { "ApprovedAt", DateTime.UtcNow.AddMinutes(-30) }
                },
                Logs =
                [
                    new TarsEngine.Models.ExecutionLog { Timestamp = DateTime.UtcNow.AddHours(-2), Level = TarsEngine.Models.LogLevel.Information, Message = "Starting execution", Source = "Execution" },
                    new TarsEngine.Models.ExecutionLog { Timestamp = DateTime.UtcNow.AddHours(-1.9), Level = TarsEngine.Models.LogLevel.Information, Message = "Analyzing code", Source = "Execution" },
                    new TarsEngine.Models.ExecutionLog { Timestamp = DateTime.UtcNow.AddHours(-1.8), Level = TarsEngine.Models.LogLevel.Information, Message = "Creating execution plan", Source = "Execution" },
                    new TarsEngine.Models.ExecutionLog { Timestamp = DateTime.UtcNow.AddHours(-1.7), Level = TarsEngine.Models.LogLevel.Information, Message = "Backing up files", Source = "Execution" },
                    new TarsEngine.Models.ExecutionLog { Timestamp = DateTime.UtcNow.AddHours(-1.6), Level = TarsEngine.Models.LogLevel.Information, Message = "Modifying src/Services/AuthService.cs", Source = "Execution" },
                    new TarsEngine.Models.ExecutionLog { Timestamp = DateTime.UtcNow.AddHours(-1.5), Level = TarsEngine.Models.LogLevel.Information, Message = "Modifying src/Controllers/AuthController.cs", Source = "Execution" },
                    new TarsEngine.Models.ExecutionLog { Timestamp = DateTime.UtcNow.AddHours(-1.4), Level = TarsEngine.Models.LogLevel.Information, Message = "Running tests", Source = "Execution" },
                    new TarsEngine.Models.ExecutionLog { Timestamp = DateTime.UtcNow.AddHours(-1.3), Level = TarsEngine.Models.LogLevel.Information, Message = "Tests passed: 42/42", Source = "Execution" },
                    new TarsEngine.Models.ExecutionLog { Timestamp = DateTime.UtcNow.AddHours(-1.2), Level = TarsEngine.Models.LogLevel.Information, Message = "Validating changes", Source = "Execution" },
                    new TarsEngine.Models.ExecutionLog { Timestamp = DateTime.UtcNow.AddHours(-1.1), Level = TarsEngine.Models.LogLevel.Information, Message = "Validation successful", Source = "Execution" },
                    new TarsEngine.Models.ExecutionLog { Timestamp = DateTime.UtcNow.AddHours(-1), Level = TarsEngine.Models.LogLevel.Information, Message = "Execution completed successfully", Source = "Execution" }
                ]
            };
        }
        else if (ContextId == "CTX-122")
        {
            return new ExecutionContext
            {
                Id = "CTX-122",
                ExecutionPlanId = "PLAN-122",
                ImprovementId = "IMP-455",
                Mode = ExecutionMode.Real,
                Environment = ExecutionEnvironment.Development,
                CreatedAt = DateTime.UtcNow.AddHours(-3),
                ModifiedFiles = ["src/Services/DatabaseService.cs"],
                CreatedFiles = [],
                DeletedFiles = [],
                Metrics = new Dictionary<string, double> { { "Progress", 0.75 } },
                State = new Dictionary<string, object>
                {
                    { "Completed", false },
                    { "Success", null }
                },
                Logs =
                [
                    new TarsEngine.Models.ExecutionLog { Timestamp = DateTime.UtcNow.AddHours(-3), Level = TarsEngine.Models.LogLevel.Information, Message = "Starting execution", Source = "Execution" },
                    new TarsEngine.Models.ExecutionLog { Timestamp = DateTime.UtcNow.AddHours(-2.9), Level = TarsEngine.Models.LogLevel.Information, Message = "Analyzing code", Source = "Execution" },
                    new TarsEngine.Models.ExecutionLog { Timestamp = DateTime.UtcNow.AddHours(-2.8), Level = TarsEngine.Models.LogLevel.Information, Message = "Creating execution plan", Source = "Execution" },
                    new TarsEngine.Models.ExecutionLog { Timestamp = DateTime.UtcNow.AddHours(-2.7), Level = TarsEngine.Models.LogLevel.Information, Message = "Backing up files", Source = "Execution" },
                    new TarsEngine.Models.ExecutionLog { Timestamp = DateTime.UtcNow.AddHours(-2.6), Level = TarsEngine.Models.LogLevel.Information, Message = "Modifying src/Services/DatabaseService.cs", Source = "Execution" },
                    new TarsEngine.Models.ExecutionLog { Timestamp = DateTime.UtcNow.AddHours(-2.5), Level = TarsEngine.Models.LogLevel.Information, Message = "Running tests", Source = "Execution" }
                ]
            };
        }
        else if (ContextId == "CTX-121")
        {
            return new ExecutionContext
            {
                Id = "CTX-121",
                ExecutionPlanId = "PLAN-121",
                ImprovementId = "IMP-454",
                Mode = ExecutionMode.Real,
                Environment = ExecutionEnvironment.Development,
                CreatedAt = DateTime.UtcNow.AddHours(-5),
                ModifiedFiles = ["src/Services/CacheService.cs"],
                CreatedFiles = [],
                DeletedFiles = [],
                Metrics = new Dictionary<string, double> { { "Progress", 0.5 } },
                State = new Dictionary<string, object>
                {
                    { "Completed", true },
                    { "Success", false },
                    { "CompletedAt", DateTime.UtcNow.AddHours(-4) },
                    { "Error", "Memory leak fix failed validation" }
                },
                Logs =
                [
                    new TarsEngine.Models.ExecutionLog { Timestamp = DateTime.UtcNow.AddHours(-5), Level = TarsEngine.Models.LogLevel.Information, Message = "Starting execution", Source = "Execution" },
                    new TarsEngine.Models.ExecutionLog { Timestamp = DateTime.UtcNow.AddHours(-4.9), Level = TarsEngine.Models.LogLevel.Information, Message = "Analyzing code", Source = "Execution" },
                    new TarsEngine.Models.ExecutionLog { Timestamp = DateTime.UtcNow.AddHours(-4.8), Level = TarsEngine.Models.LogLevel.Information, Message = "Creating execution plan", Source = "Execution" },
                    new TarsEngine.Models.ExecutionLog { Timestamp = DateTime.UtcNow.AddHours(-4.7), Level = TarsEngine.Models.LogLevel.Information, Message = "Backing up files", Source = "Execution" },
                    new TarsEngine.Models.ExecutionLog { Timestamp = DateTime.UtcNow.AddHours(-4.6), Level = TarsEngine.Models.LogLevel.Information, Message = "Modifying src/Services/CacheService.cs", Source = "Execution" },
                    new TarsEngine.Models.ExecutionLog { Timestamp = DateTime.UtcNow.AddHours(-4.5), Level = TarsEngine.Models.LogLevel.Information, Message = "Running tests", Source = "Execution" },
                    new TarsEngine.Models.ExecutionLog { Timestamp = DateTime.UtcNow.AddHours(-4.4), Level = TarsEngine.Models.LogLevel.Error, Message = "Test failed: CacheService_ShouldReleaseMemory", Source = "Execution" },
                    new TarsEngine.Models.ExecutionLog { Timestamp = DateTime.UtcNow.AddHours(-4.3), Level = TarsEngine.Models.LogLevel.Error, Message = "Memory leak detected in CacheService", Source = "Execution" },
                    new TarsEngine.Models.ExecutionLog { Timestamp = DateTime.UtcNow.AddHours(-4.2), Level = TarsEngine.Models.LogLevel.Warning, Message = "Validation failed", Source = "Execution" },
                    new TarsEngine.Models.ExecutionLog { Timestamp = DateTime.UtcNow.AddHours(-4.1), Level = TarsEngine.Models.LogLevel.Information, Message = "Rolling back changes", Source = "Execution" },
                    new TarsEngine.Models.ExecutionLog { Timestamp = DateTime.UtcNow.AddHours(-4), Level = TarsEngine.Models.LogLevel.Information, Message = "Execution failed", Source = "Execution" }
                ],
                Errors = ModelConverters.ConvertToExecutionErrors([
                    new ErrorInfo
                    {
                        Message = "Test failed: CacheService_ShouldReleaseMemory",
                        Timestamp = DateTime.UtcNow.AddHours(-4.4),
                        StackTrace = "at CacheServiceTests.CacheService_ShouldReleaseMemory() in /src/Tests/CacheServiceTests.cs:line 42\nat TestRunner.RunTest() in /src/TestRunner.cs:line 123"
                    },

                    new ErrorInfo
                    {
                        Message = "Memory leak detected in CacheService",
                        Timestamp = DateTime.UtcNow.AddHours(-4.3),
                        StackTrace = "at MemoryAnalyzer.DetectLeaks() in /src/MemoryAnalyzer.cs:line 78\nat ValidationService.ValidateMemoryUsage() in /src/ValidationService.cs:line 56"
                    }
                ])
            };
        }
        else if (ContextId == "CTX-120")
        {
            return new ExecutionContext
            {
                Id = "CTX-120",
                ExecutionPlanId = "PLAN-120",
                ImprovementId = "IMP-453",
                Mode = ExecutionMode.Real,
                Environment = ExecutionEnvironment.Development,
                CreatedAt = DateTime.UtcNow.AddDays(-1),
                ModifiedFiles = ["src/Controllers/ApiController.cs"],
                CreatedFiles = [],
                DeletedFiles = [],
                Metrics = new Dictionary<string, double> { { "Progress", 1.0 } },
                State = new Dictionary<string, object>
                {
                    { "Completed", true },
                    { "Success", true },
                    { "CompletedAt", DateTime.UtcNow.AddDays(-1).AddHours(1) },
                    { "Approved", false },
                    { "Rejected", false }
                },
                Logs =
                [
                    new TarsEngine.Models.ExecutionLog { Timestamp = DateTime.UtcNow.AddDays(-1), Level = TarsEngine.Models.LogLevel.Information, Message = "Starting execution", Source = "Execution" },
                    new TarsEngine.Models.ExecutionLog { Timestamp = DateTime.UtcNow.AddDays(-1).AddMinutes(10), Level = TarsEngine.Models.LogLevel.Information, Message = "Analyzing code", Source = "Execution" },
                    new TarsEngine.Models.ExecutionLog { Timestamp = DateTime.UtcNow.AddDays(-1).AddMinutes(20), Level = TarsEngine.Models.LogLevel.Information, Message = "Creating execution plan", Source = "Execution" },
                    new TarsEngine.Models.ExecutionLog { Timestamp = DateTime.UtcNow.AddDays(-1).AddMinutes(30), Level = TarsEngine.Models.LogLevel.Information, Message = "Backing up files", Source = "Execution" },
                    new TarsEngine.Models.ExecutionLog { Timestamp = DateTime.UtcNow.AddDays(-1).AddMinutes(40), Level = TarsEngine.Models.LogLevel.Information, Message = "Modifying src/Controllers/ApiController.cs", Source = "Execution" },
                    new TarsEngine.Models.ExecutionLog { Timestamp = DateTime.UtcNow.AddDays(-1).AddMinutes(50), Level = TarsEngine.Models.LogLevel.Information, Message = "Running tests", Source = "Execution" },
                    new TarsEngine.Models.ExecutionLog { Timestamp = DateTime.UtcNow.AddDays(-1).AddHours(1), Level = TarsEngine.Models.LogLevel.Information, Message = "Execution completed successfully", Source = "Execution" }
                ]
            };
        }

        return null;
    }

    private string GetImprovementName(string? improvementId)
    {
        if (string.IsNullOrEmpty(improvementId))
            return "N/A";

        var improvementNames = new Dictionary<string, string>
        {
            { "IMP-456", "Implement Caching for API Responses" },
            { "IMP-455", "Optimize Database Queries" },
            { "IMP-454", "Fix Memory Leak in Cache Service" },
            { "IMP-453", "Add Logging to API Endpoints" }
        };

        return improvementNames.TryGetValue(improvementId, out var name) ? name : improvementId;
    }

    private string GetStatusText(ExecutionContext context)
    {
        if (context.GetState<bool>("Completed", false))
        {
            if (context.GetState<bool>("Success", false))
            {
                if (context.GetState<bool>("Approved", false))
                    return "Approved";
                else if (context.GetState<bool>("Rejected", false))
                    return "Rejected";
                else
                    return "Awaiting Review";
            }
            else
            {
                return "Failed";
            }
        }
        else
        {
            return "In Progress";
        }
    }

    private Color GetStatusColor(ExecutionContext context)
    {
        var status = GetStatusText(context);
        return status switch
        {
            "Approved" => Color.Success,
            "In Progress" => Color.Info,
            "Failed" => Color.Error,
            "Awaiting Review" => Color.Warning,
            "Rejected" => Color.Error,
            _ => Color.Default
        };
    }

    private string GetLogStyle(LogEntryViewModel log)
    {
        var color = log.LogLevel switch
        {
            Microsoft.Extensions.Logging.LogLevel.Error => "#ff5252",
            Microsoft.Extensions.Logging.LogLevel.Warning => "#fb8c00",
            Microsoft.Extensions.Logging.LogLevel.Information => "#2196f3",
            Microsoft.Extensions.Logging.LogLevel.Debug => "#757575",
            _ => "#ffffff"
        };

        return $"color: {color}; font-family: monospace; white-space: pre-wrap;";
    }

    private string GetLogStyle(TarsEngine.Models.ExecutionLog log)
    {
        var color = log.Level switch
        {
            TarsEngine.Models.LogLevel.Error => "#ff5252",
            TarsEngine.Models.LogLevel.Warning => "#fb8c00",
            TarsEngine.Models.LogLevel.Information => "#2196f3",
            TarsEngine.Models.LogLevel.Debug => "#757575",
            TarsEngine.Models.LogLevel.Trace => "#9e9e9e",
            _ => "#ffffff"
        };

        return $"color: {color}; font-family: monospace; white-space: pre-wrap;";
    }
}
