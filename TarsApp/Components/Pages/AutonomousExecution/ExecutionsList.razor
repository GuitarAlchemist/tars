@using TarsEngine.Models
@using TarsEngine.Services
@using TarsEngine.Services.Interfaces
@using TarsApp.Models
@using TarsApp.Helpers
@inject IExecutionPlannerService ExecutionPlannerService
@inject ILogger<ExecutionsList> Logger

<MudPaper Elevation="0" Class="pa-4">
    <MudToolBar DisableGutters="true" Class="mb-4">
        <MudText Typo="Typo.h5">Executions</MudText>
        <MudSpacer />
        <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Refresh" OnClick="RefreshExecutionsAsync">
            Refresh
        </MudButton>
        <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.FilterList" Class="ml-2" OnClick="OpenFilterDialog">
            Filter
        </MudButton>
    </MudToolBar>

    <MudTable T="ExecutionContext" ServerData="@ServerReload"
              Dense="true"
              Hover="true"
              @ref="table"
              Breakpoint="Breakpoint.Sm"
              Loading="@isLoading"
              LoadingProgressColor="Color.Primary">
        <HeaderContent>
            <MudTh><MudTableSortLabel SortLabel="Id" T="ExecutionContext">ID</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="ImprovementId" T="ExecutionContext">Improvement</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="Status" T="ExecutionContext">Status</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="Progress" T="ExecutionContext">Progress</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="CreatedAt" T="ExecutionContext">Started</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="CompletedAt" T="ExecutionContext">Completed</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="Duration" T="ExecutionContext">Duration</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="Mode" T="ExecutionContext">Mode</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="Environment" T="ExecutionContext">Environment</MudTableSortLabel></MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID">@context.Id</MudTd>
            <MudTd DataLabel="Improvement">@GetImprovementName(context.ImprovementId)</MudTd>
            <MudTd DataLabel="Status">
                <MudChip T="string" Color="@GetStatusColor(context)" Size="Size.Small">@GetStatusText(context)</MudChip>
            </MudTd>
            <MudTd DataLabel="Progress">
                <MudProgressLinear Value="@(context.GetMetric("Progress", 0.0) * 100)" Color="@GetProgressColor(context)" Class="my-2" />
                @($"{context.GetMetric("Progress", 0.0) * 100:F0}%")
            </MudTd>
            <MudTd DataLabel="Started">@context.CreatedAt.ToString("yyyy-MM-dd HH:mm")</MudTd>
            <MudTd DataLabel="Completed">@(context.GetState<DateTime?>("CompletedAt")?.ToString("yyyy-MM-dd HH:mm") ?? "-")</MudTd>
            <MudTd DataLabel="Duration">@GetDuration(context)</MudTd>
            <MudTd DataLabel="Mode">@context.Mode</MudTd>
            <MudTd DataLabel="Environment">@context.Environment</MudTd>
            <MudTd>
                <MudButtonGroup Size="Size.Small" Variant="Variant.Outlined">
                    <MudButton OnClick="@(() => ViewExecution(context.Id))">View</MudButton>
                    @if (IsInProgress(context))
                    {
                        <MudButton Color="Color.Info" OnClick="@(() => MonitorExecution(context.Id))">Monitor</MudButton>
                    }
                    @if (CanRollback(context))
                    {
                        <MudButton Color="Color.Error" OnClick="@(() => RollbackExecution(context.Id))">Rollback</MudButton>
                    }
                    @if (IsAwaitingReview(context))
                    {
                        <MudButton Color="Color.Success" OnClick="@(() => ApproveExecution(context))">Approve</MudButton>
                        <MudButton Color="Color.Error" OnClick="@(() => RejectExecution(context))">Reject</MudButton>
                    }
                </MudButtonGroup>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</MudPaper>

<MudDialog @bind-IsVisible="isFilterDialogVisible" Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.FilterList" Class="mr-2" />
            Filter Executions
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="filterForm" Model="@filterOptions">
            <MudSelect @bind-Value="filterOptions.Status" Label="Status" AnchorOrigin="Origin.BottomCenter">
                <MudSelectItem Value="@((string)null)">All</MudSelectItem>
                <MudSelectItem Value="@(ExecutionStatus.Completed.ToString())">Completed</MudSelectItem>
                <MudSelectItem Value="@(ExecutionStatus.InProgress.ToString())">In Progress</MudSelectItem>
                <MudSelectItem Value="@(ExecutionStatus.Failed.ToString())">Failed</MudSelectItem>
                <MudSelectItem Value="@(ExecutionStatus.AwaitingReview.ToString())">Awaiting Review</MudSelectItem>
            </MudSelect>
            <MudSelect @bind-Value="filterOptions.Mode" Label="Mode" AnchorOrigin="Origin.BottomCenter">
                <MudSelectItem Value="@((ExecutionMode?)null)">All</MudSelectItem>
                <MudSelectItem Value="ExecutionMode.DryRun">Dry Run</MudSelectItem>
                <MudSelectItem Value="ExecutionMode.Real">Real</MudSelectItem>
            </MudSelect>
            <MudSelect @bind-Value="filterOptions.Environment" Label="Environment" AnchorOrigin="Origin.BottomCenter">
                <MudSelectItem Value="@((ExecutionEnvironment?)null)">All</MudSelectItem>
                <MudSelectItem Value="ExecutionEnvironment.Development">Development</MudSelectItem>
                <MudSelectItem Value="ExecutionEnvironment.Testing">Testing</MudSelectItem>
                <MudSelectItem Value="ExecutionEnvironment.Staging">Staging</MudSelectItem>
                <MudSelectItem Value="ExecutionEnvironment.Production">Production</MudSelectItem>
            </MudSelect>
            <MudDateRangePicker @bind-DateRange="filterOptions.DateRange" Label="Date Range" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="ClearFilter">Clear</MudButton>
        <MudButton OnClick="CloseFilterDialog">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="ApplyFilter">Apply</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter]
    public EventCallback<string> OnView { get; set; }

    [Parameter]
    public EventCallback<string> OnMonitor { get; set; }

    [Parameter]
    public EventCallback<string> OnRollback { get; set; }

    private MudTable<ExecutionContext> table = null!;
    private bool isLoading;
    private List<ExecutionContext> executions = [];
    private Dictionary<string, string> improvementNames = new();
    private MudForm filterForm = null!;
    private bool isFilterDialogVisible;
    private FilterOptions filterOptions = new();

    private DialogOptions dialogOptions = new DialogOptions
    {
        MaxWidth = MaxWidth.Medium,
        FullWidth = true,
        CloseOnEscapeKey = true,
        BackdropClick = false // Replaces DisableBackdropClick = true in MudBlazor 8.x
    };

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadExecutionsAsync();
    }

    private async Task<TableData<ExecutionContext>> ServerReload(TableState state, CancellationToken cancellationToken = default)
    {
        await LoadExecutionsAsync();

        // Apply sorting
        IEnumerable<ExecutionContext> query = executions;

        if (!string.IsNullOrEmpty(state.SortLabel))
        {
            query = state.SortDirection == SortDirection.Ascending
                ? query.OrderBy(p => GetPropertyValue(p, state.SortLabel))
                : query.OrderByDescending(p => GetPropertyValue(p, state.SortLabel));
        }
        else
        {
            // Default sort by created date descending
            query = query.OrderByDescending(p => p.CreatedAt);
        }

        // Apply filtering
        if (!string.IsNullOrEmpty(filterOptions.Status))
        {
            query = query.Where(p => GetStatusText(p) == filterOptions.Status);
        }

        if (filterOptions.Mode != null)
        {
            query = query.Where(p => p.Mode == filterOptions.Mode);
        }

        if (filterOptions.Environment != null)
        {
            query = query.Where(p => p.Environment == filterOptions.Environment);
        }

        if (filterOptions.DateRange.Start != null)
        {
            query = query.Where(p => p.CreatedAt >= filterOptions.DateRange.Start);
        }

        if (filterOptions.DateRange.End != null)
        {
            query = query.Where(p => p.CreatedAt <= filterOptions.DateRange.End);
        }

        // Apply pagination
        var pagedData = query.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();

        return new TableData<ExecutionContext>
        {
            Items = pagedData,
            TotalItems = query.Count()
        };
    }

    private object GetPropertyValue(ExecutionContext context, string propertyName)
    {
        return propertyName switch
        {
            "Id" => context.Id,
            "ImprovementId" => context.ImprovementId ?? string.Empty,
            "Status" => GetStatusText(context),
            "Progress" => context.GetMetric("Progress", 0.0),
            "CreatedAt" => context.CreatedAt,
            "CompletedAt" => context.GetState<DateTime?>("CompletedAt") ?? DateTime.MinValue,
            "Duration" => GetDurationMinutes(context),
            "Mode" => context.Mode,
            "Environment" => context.Environment,
            _ => context.Id
        };
    }

    private async Task LoadExecutionsAsync()
    {
        try
        {
            isLoading = true;

            // In a real implementation, this would load executions from the service
            // For now, use mock data
            executions =
            [
                new ExecutionContext
                {
                    Id = "CTX-123",
                    ExecutionPlanId = "PLAN-123",
                    ImprovementId = "IMP-456",
                    Mode = ExecutionMode.Real,
                    Environment = ExecutionEnvironment.Development,
                    CreatedAt = DateTime.UtcNow.AddHours(-2),
                    ModifiedFiles = ["src/Services/AuthService.cs", "src/Controllers/AuthController.cs"],
                    CreatedFiles = [],
                    DeletedFiles = [],
                    Metrics = new Dictionary<string, double> { { "Progress", 1.0 } },
                    State = new Dictionary<string, object>
                    {
                        { "Completed", true },
                        { "Success", true },
                        { "CompletedAt", DateTime.UtcNow.AddHours(-1) }
                    }
                },

                new ExecutionContext
                {
                    Id = "CTX-122",
                    ExecutionPlanId = "PLAN-122",
                    ImprovementId = "IMP-455",
                    Mode = ExecutionMode.Real,
                    Environment = ExecutionEnvironment.Development,
                    CreatedAt = DateTime.UtcNow.AddHours(-3),
                    ModifiedFiles = ["src/Services/DatabaseService.cs"],
                    CreatedFiles = [],
                    DeletedFiles = [],
                    Metrics = new Dictionary<string, double> { { "Progress", 0.75 } },
                    State = new Dictionary<string, object>
                    {
                        { "Completed", false },
                        { "Success", null }
                    }
                },

                new ExecutionContext
                {
                    Id = "CTX-121",
                    ExecutionPlanId = "PLAN-121",
                    ImprovementId = "IMP-454",
                    Mode = ExecutionMode.Real,
                    Environment = ExecutionEnvironment.Development,
                    CreatedAt = DateTime.UtcNow.AddHours(-5),
                    ModifiedFiles = ["src/Services/CacheService.cs"],
                    CreatedFiles = [],
                    DeletedFiles = [],
                    Metrics = new Dictionary<string, double> { { "Progress", 0.5 } },
                    State = new Dictionary<string, object>
                    {
                        { "Completed", true },
                        { "Success", false },
                        { "CompletedAt", DateTime.UtcNow.AddHours(-4) },
                        { "Error", "Memory leak fix failed validation" }
                    }
                },

                new ExecutionContext
                {
                    Id = "CTX-120",
                    ExecutionPlanId = "PLAN-120",
                    ImprovementId = "IMP-453",
                    Mode = ExecutionMode.Real,
                    Environment = ExecutionEnvironment.Development,
                    CreatedAt = DateTime.UtcNow.AddDays(-1),
                    ModifiedFiles = ["src/Controllers/ApiController.cs"],
                    CreatedFiles = [],
                    DeletedFiles = [],
                    Metrics = new Dictionary<string, double> { { "Progress", 1.0 } },
                    State = new Dictionary<string, object>
                    {
                        { "Completed", true },
                        { "Success", true },
                        { "Approved", false },
                        { "Rejected", false }
                    }
                }
            ];

            // Set improvement names
            improvementNames = new Dictionary<string, string>
            {
                { "IMP-456", "Implement Caching for API Responses" },
                { "IMP-455", "Optimize Database Queries" },
                { "IMP-454", "Fix Memory Leak in Cache Service" },
                { "IMP-453", "Add Logging to API Endpoints" }
            };
        }
        finally
        {
            isLoading = false;
        }
    }

    public async Task RefreshExecutionsAsync()
    {
        await LoadExecutionsAsync();
        await table.ReloadServerData();
    }

    private string GetImprovementName(string improvementId)
    {
        if (string.IsNullOrEmpty(improvementId))
            return "N/A";

        return improvementNames.TryGetValue(improvementId, out var name) ? name : improvementId;
    }

    private string GetStatusText(ExecutionContext context)
    {
        if (context.GetState<bool>("Completed", false))
        {
            if (context.GetState<bool>("Success", false))
            {
                if (context.GetState<bool>("Approved", false))
                    return "Approved";
                else if (context.GetState<bool>("Rejected", false))
                    return "Rejected";
                else
                    return "Awaiting Review";
            }
            else
            {
                return "Failed";
            }
        }
        else
        {
            return "In Progress";
        }
    }

    private Color GetStatusColor(ExecutionContext context)
    {
        var status = GetStatusText(context);
        return status switch
        {
            "Approved" => Color.Success,
            "In Progress" => Color.Info,
            "Failed" => Color.Error,
            "Awaiting Review" => Color.Warning,
            "Rejected" => Color.Error,
            _ => Color.Default
        };
    }

    private Color GetProgressColor(ExecutionContext context)
    {
        var status = GetStatusText(context);
        return status switch
        {
            "Approved" => Color.Success,
            "In Progress" => Color.Info,
            "Failed" => Color.Error,
            "Awaiting Review" => Color.Warning,
            "Rejected" => Color.Error,
            _ => Color.Default
        };
    }

    private string GetDuration(ExecutionContext context)
    {
        var completedAt = context.GetState<DateTime?>("CompletedAt");
        if (completedAt == null)
        {
            var duration = DateTime.UtcNow - context.CreatedAt;
            return $"{duration.TotalMinutes:F0}m (ongoing)";
        }
        else
        {
            var duration = completedAt.Value - context.CreatedAt;
            return $"{duration.TotalMinutes:F0}m";
        }
    }

    private double GetDurationMinutes(ExecutionContext context)
    {
        var completedAt = context.GetState<DateTime?>("CompletedAt");
        if (completedAt == null)
        {
            var duration = DateTime.UtcNow - context.CreatedAt;
            return duration.TotalMinutes;
        }
        else
        {
            var duration = completedAt.Value - context.CreatedAt;
            return duration.TotalMinutes;
        }
    }

    private bool IsInProgress(ExecutionContext context)
    {
        return !context.GetState<bool>("Completed", false);
    }

    private bool CanRollback(ExecutionContext context)
    {
        return context.GetState<bool>("Completed", false) &&
               (!context.GetState<bool>("Success", false) ||
                context.GetState<bool>("Rejected", false));
    }

    private bool IsAwaitingReview(ExecutionContext context)
    {
        return context.GetState<bool>("Completed", false) &&
               context.GetState<bool>("Success", false) &&
               !context.GetState<bool>("Approved", false) &&
               !context.GetState<bool>("Rejected", false);
    }

    private async Task ViewExecution(string contextId)
    {
        await OnView.InvokeAsync(contextId);
    }

    private async Task MonitorExecution(string contextId)
    {
        await OnMonitor.InvokeAsync(contextId);
    }

    private async Task RollbackExecution(string contextId)
    {
        await OnRollback.InvokeAsync(contextId);
    }

    private async Task ApproveExecution(ExecutionContext context)
    {
        // In a real implementation, this would approve the execution
        Logger.LogInformation("Approving execution: {ContextId}", context.Id);

        // Update context
        context.State["Approved"] = true;

        // Refresh table
        await table.ReloadServerData();
    }

    private async Task RejectExecution(ExecutionContext context)
    {
        // In a real implementation, this would reject the execution
        Logger.LogInformation("Rejecting execution: {ContextId}", context.Id);

        // Update context
        context.State["Rejected"] = true;

        // Refresh table
        await table.ReloadServerData();
    }

    private void OpenFilterDialog()
    {
        isFilterDialogVisible = true;
    }

    private void CloseFilterDialog()
    {
        isFilterDialogVisible = false;
    }

    private async Task ApplyFilter()
    {
        isFilterDialogVisible = false;
        await table.ReloadServerData();
    }

    private async Task ClearFilter()
    {
        filterOptions = new FilterOptions();
        await table.ReloadServerData();
    }

    private class FilterOptions
    {
        public string? Status { get; set; }
        public ExecutionMode? Mode { get; set; }
        public ExecutionEnvironment? Environment { get; set; }
        public DateRange DateRange { get; set; } = new DateRange();
    }
}
