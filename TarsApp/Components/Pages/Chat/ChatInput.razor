@inject IJSRuntime JS
@using MudBlazor

<div class="d-flex align-center">
    <MudTextField @ref="mudTextField" 
                  @bind-Value="@messageText" 
                  Placeholder="Type your message..." 
                  Variant="Variant.Outlined"
                  Disabled="@IsWaiting"
                  Immediate="true"
                  Lines="1"
                  Class="flex-grow-1 mr-2"
                  OnKeyDown="@HandleKeyDown" />
    
    @if (IsWaiting)
    {
        <MudProgressCircular Color="Color.Primary" Size="Size.Small" Indeterminate="true" Class="mr-2" />
    }
    else
    {
        <MudIconButton Icon="@Icons.Material.Filled.Send" 
                       Color="Color.Primary" 
                       Disabled="@string.IsNullOrWhiteSpace(messageText)"
                       OnClick="@SendMessageAsync" />
    }
</div>

@code {
    private MudTextField<string>? mudTextField;
    private string? messageText;

    [Parameter]
    public EventCallback<ChatMessage> OnSend { get; set; }

    [Parameter]
    public bool IsWaiting { get; set; }

    public async ValueTask FocusAsync()
    {
        if (mudTextField != null)
        {
            await mudTextField.FocusAsync();
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs args)
    {
        if (args.Key == "Enter" && !args.ShiftKey)
        {
            await SendMessageAsync();
        }
    }

    private async Task SendMessageAsync()
    {
        if (messageText is { Length: > 0 } text)
        {
            messageText = null;
            await OnSend.InvokeAsync(new ChatMessage(ChatRole.User, text));
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await FocusAsync();
        }
    }
}