@using System.Runtime.CompilerServices
@using System.Text.RegularExpressions
@using System.Linq
@using MudBlazor
@using TarsMessage = Tars.Models.ChatMessage
@using AIMessage = Microsoft.Extensions.AI.ChatMessage
@using Microsoft.Extensions.AI
@using Tars.Models
@using Tars.Services
@using ChatRole = Microsoft.Extensions.AI.ChatRole

@if (Message.Role == ChatRole.User)
{
    <MudPaper Class="user-message mb-2 pa-3 ml-auto" Elevation="0">
        <MudText>@Message.Text</MudText>
    </MudPaper>
}
else if (Message.Role == ChatRole.Assistant)
{
    foreach (var content in Message.Contents)
    {
        if (content is TextContent { Text: { Length: > 0 } text })
        {
            <MudPaper Class="assistant-message mb-2 pa-3" Elevation="0">
                <div class="d-flex">
                    <MudIcon Icon="@Icons.Material.Filled.SmartToy" Class="mr-2" />
                    <div>
                        <MudText Typo="Typo.subtitle1">Assistant</MudText>
                        <MudMarkdown Value="@text" />

                        @foreach (var citation in citations ?? [])
                        {
                            <ChatCitation File="@citation.File" PageNumber="@citation.Page" Quote="@citation.Quote" />
                        }
                    </div>
                </div>
            </MudPaper>
        }
    }
}

@code {
    private List<(string File, int? Page, string Quote)>? citations;

    [Parameter, EditorRequired]
    public required AIMessage Message { get; set; }

    [Parameter]
    public bool InProgress { get; set;}

    protected override void OnInitialized()
    {
        if (!InProgress && Message.Role == ChatRole.Assistant && Message.Text is { Length: > 0 } text)
        {
            citations = ChatMessageService.ParseCitations(text);
        }
    }

    public void StateChanged()
    {
        StateHasChanged();
    }
}