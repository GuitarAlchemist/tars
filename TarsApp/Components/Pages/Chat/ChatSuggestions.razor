@inject IChatClient ChatClient
@inject ILogger<ChatSuggestions> Logger
@using System.Linq

@if (suggestions is not null && suggestions.Any())
{
    <MudChipSet T="string" Class="d-flex flex-wrap gap-2 mb-2">
        @foreach (var suggestion in suggestions)
        {
            <MudChip Color="Color.Primary" Variant="Variant.Outlined" 
                    OnClick="@(() => AddSuggestionAsync(suggestion))">
                @suggestion
            </MudChip>
        }
    </MudChipSet>
}

@code {
    private List<string>? suggestions;
    private CancellationTokenSource? cancellationTokenSource;
    private List<ChatMessage> chatHistory = [];

    [Parameter]
    public EventCallback<string> OnSelected { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GenerateSuggestionsAsync();
    }

    private async Task AddSuggestionAsync(string suggestion)
    {
        suggestions = null;
        await OnSelected.InvokeAsync(suggestion);
    }

    public void Update(List<ChatMessage> messages)
    {
        chatHistory = messages.ToList();
        _ = GenerateSuggestionsAsync();
    }

    public void Clear()
    {
        suggestions = null;
        StateHasChanged();
    }

    private async Task GenerateSuggestionsAsync()
    {
        cancellationTokenSource?.Cancel();
        cancellationTokenSource = new CancellationTokenSource();
        var token = cancellationTokenSource.Token;

        try
        {
            suggestions = [];
            StateHasChanged();

            // Create a prompt to generate suggestions based on chat history
            if (chatHistory.Count > 0)
            {
                var systemPrompt = "Based on the conversation history, suggest 3 brief follow-up questions the user might want to ask. " +
                                  "Keep suggestions short (under 10 words) and directly related to the conversation. " +
                                  "Return only the questions as a numbered list with no additional text.";
                
                var messages = new List<ChatMessage>
                {
                    new(ChatRole.System, systemPrompt)
                };
                
                // Add the last few messages from chat history (up to 5)
                messages.AddRange(chatHistory
                    .Where(m => m.Role == ChatRole.User || m.Role == ChatRole.Assistant)
                    .TakeLast(5));
                
                var response = await ChatClient.GetResponseAsync(messages, new ChatOptions(), token);
                var responseMessage = response.Messages.FirstOrDefault(m => m.Role == ChatRole.Assistant);
                
                if (responseMessage != null && !string.IsNullOrEmpty(responseMessage.Text))
                {
                    // Parse the numbered list into individual suggestions
                    var text = responseMessage.Text;
                    var lines = text.Split('\n', StringSplitOptions.RemoveEmptyEntries)
                        .Select(line => line.Trim())
                        .Where(line => !string.IsNullOrWhiteSpace(line))
                        .Select(line => line.TrimStart('1', '2', '3', '4', '5', '.', ' ', '-'))
                        .Where(line => !string.IsNullOrWhiteSpace(line))
                        .Take(3)
                        .ToList();
                    
                    suggestions.AddRange(lines);
                }
            }
            else
            {
                // Default suggestions for new chat
                suggestions.AddRange([
                    "What can you help me with?",
                    "Tell me about the example documents",
                    "How do I add my own data?"
                ]);
            }
            
            StateHasChanged();
        }
        catch (Exception ex) when (ex is not OperationCanceledException)
        {
            Logger.LogError(ex, "Error generating suggestions");
            suggestions?.Clear();
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        cancellationTokenSource?.Cancel();
        cancellationTokenSource?.Dispose();
    }
}