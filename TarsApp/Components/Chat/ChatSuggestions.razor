@using ChatMessage = Microsoft.Extensions.AI.ChatMessage
@using ChatRole = Microsoft.Extensions.AI.ChatRole
@inject IChatClient ChatClient

@if (suggestions is not null)
{
    <div class="page-width suggestions">
        @foreach (var suggestion in suggestions)
        {
            <button class="btn-subtle" @onclick="@(() => AddSuggestionAsync(suggestion))">
                @suggestion
            </button>
        }
    </div>
}

@code {
    private const string Prompt = "Suggest 3 follow-up questions based on this conversation. Return ONLY an array of strings with no explanation.";
    private string[]? suggestions;
    private CancellationTokenSource? cancellation;

    [Parameter]
    public EventCallback<ChatMessage> OnSelected { get; set; }

    public void Clear()
    {
        cancellation?.Cancel();
        suggestions = null;
        StateHasChanged();
    }

    private async Task AddSuggestionAsync(string text)
    {
        await OnSelected.InvokeAsync(new ChatMessage(ChatRole.User, text));
    }

    public void Update(IReadOnlyList<ChatMessage> messages)
    {
        // Runs in the background and handles its own cancellation/errors
        _ = UpdateSuggestionsAsync(messages);
    }

    private async Task UpdateSuggestionsAsync(IReadOnlyList<ChatMessage> messages)
    {
        cancellation?.Cancel();
        cancellation = new CancellationTokenSource();

        try
        {
            var response = await ChatClient.GetResponseAsync<string[]>(
                [.. ReduceMessages(messages), new(ChatRole.User, Prompt)],
                useNativeJsonSchema: true, cancellationToken: cancellation.Token);
            if (!response.TryGetResult(out suggestions))
            {
                suggestions = null;
            }

            StateHasChanged();
        }
        catch (Exception ex) when (ex is not OperationCanceledException)
        {
            await DispatchExceptionAsync(ex);
        }
    }

    private IEnumerable<ChatMessage> ReduceMessages(IReadOnlyList<ChatMessage> messages)
    {
        // Only include the most recent messages to avoid exceeding token limits
        const int maxMessagesToInclude = 6;
        return messages
            .Where(m => m.Role is ChatRole.User or ChatRole.Assistant)
            .TakeLast(maxMessagesToInclude);
    }

    private Task DispatchExceptionAsync(Exception ex)
    {
        // In a real app, you might want to log this or display it to the user
        Console.Error.WriteLine($"Error generating suggestions: {ex}");
        return Task.CompletedTask;
    }
}