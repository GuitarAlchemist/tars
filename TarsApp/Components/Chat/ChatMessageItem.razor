@using System.Text.RegularExpressions
@using System.Runtime.CompilerServices
@using Microsoft.Extensions.AI

<div class="message @(Message.Role == ChatRole.User ? "user-message" : "assistant-message")">
    <div class="message-content">
        @if (Message.Role == ChatRole.User)
        {
            <div>@Message.Text</div>
        }
        else
        {
            <div>
                <assistant-message markdown="@Message.Text"></assistant-message>

                @foreach (var citation in citations ?? [])
                {
                    <ChatCitation File="@citation.File" PageNumber="@citation.Page" Quote="@citation.Quote" />
                }
            </div>
        }
    </div>
</div>

@code {
    private static readonly ConditionalWeakTable<ChatMessage, ChatMessageItem> SubscribersLookup = new();
    private static readonly Regex CitationRegex = new(@"<citation filename='(?<file>[^']*)' page_number='(?<page>\d*)'>(?<quote>.*?)</citation>", RegexOptions.NonBacktracking);

    private List<(string File, int? Page, string Quote)>? citations;

    [Parameter, EditorRequired]
    public required ChatMessage Message { get; set; }

    [Parameter]
    public bool InProgress { get; set;}

    protected override void OnInitialized()
    {
        SubscribersLookup.AddOrUpdate(Message, this);

        if (!InProgress && Message.Role == ChatRole.Assistant && Message.Text is { Length: > 0 } text)
        {
            ParseCitations(text);
        }
    }

    private void ParseCitations(string text)
    {
        var matches = CitationRegex.Matches(text);
        if (matches.Count > 0)
        {
            citations = new();
            foreach (Match match in matches)
            {
                var file = match.Groups["file"].Value;
                var pageStr = match.Groups["page"].Value;
                var quote = match.Groups["quote"].Value;
                int? page = int.TryParse(pageStr, out var p) ? p : null;
                citations.Add((file, page, quote));
            }
        }
    }

    public static void NotifyChanged(ChatMessage message)
    {
        if (SubscribersLookup.TryGetValue(message, out var component))
        {
            component.StateHasChanged();
        }
    }
}