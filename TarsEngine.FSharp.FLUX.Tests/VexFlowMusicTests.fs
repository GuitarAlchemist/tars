namespace TarsEngine.FSharp.FLUX.Tests

open System
open System.IO
open System.Threading
open Xunit
open FsUnit.Xunit
open OpenQA.Selenium
open OpenQA.Selenium.Chrome
open OpenQA.Selenium.Support.UI
open TarsEngine.FSharp.FLUX.FluxEngine

/// Advanced tests for VexFlow music notation generation and UI testing
module VexFlowMusicTests =
    
    /// Create a simple web server for testing
    let createTestWebServer (port: int) (htmlContent: string) =
        let listener = new System.Net.HttpListener()
        listener.Prefixes.Add(sprintf "http://localhost:%d/" port)
        listener.Start()
        
        async {
            while listener.IsListening do
                try
                    let! context = listener.GetContextAsync() |> Async.AwaitTask
                    let response = context.Response
                    let buffer = System.Text.Encoding.UTF8.GetBytes(htmlContent)
                    response.ContentLength64 <- int64 buffer.Length
                    response.ContentType <- "text/html"
                    do! response.OutputStream.WriteAsync(buffer, 0, buffer.Length) |> Async.AwaitTask
                    response.OutputStream.Close()
                with
                | _ -> () // Ignore errors for test simplicity
        } |> Async.Start
        
        listener
    
    [<Fact>]
    let ``FLUX can generate VexFlow music notation HTML`` () =
        async {
            // Arrange
            let engine = FluxEngine()
            let musicNotationScript = """META {
    title: "VexFlow Music Notation Generator"
    version: "1.0.0"
    description: "Generates interactive music notation using VexFlow"
}

JAVASCRIPT {
    // VexFlow Music Notation Generation
    console.log("🎵 VexFlow Music Notation Generator");
    console.log("===================================");
    
    // Generate HTML structure for VexFlow
    const generateVexFlowHTML = () => {
        return `
<!DOCTYPE html>
<html>
<head>
    <title>FLUX VexFlow Music Notation</title>
    <script src="https://unpkg.com/vexflow@4.2.2/build/cjs/vexflow.js"></script>
    <style>
        body { 
            font-family: Arial, sans-serif; 
            margin: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }
        .container { 
            max-width: 1200px; 
            margin: 0 auto; 
            background: rgba(255,255,255,0.1);
            padding: 20px;
            border-radius: 10px;
            backdrop-filter: blur(10px);
        }
        .music-staff { 
            background: white; 
            border-radius: 8px; 
            padding: 20px; 
            margin: 20px 0;
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        }
        .controls {
            margin: 20px 0;
            text-align: center;
        }
        button {
            background: #4CAF50;
            color: white;
            border: none;
            padding: 10px 20px;
            margin: 5px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
        }
        button:hover { background: #45a049; }
        .info {
            background: rgba(255,255,255,0.2);
            padding: 15px;
            border-radius: 5px;
            margin: 10px 0;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>🎵 FLUX VexFlow Music Notation</h1>
        <div class="info">
            <h3>🚀 Generated by FLUX Metascript System</h3>
            <p>This interactive music notation was generated using FLUX's multi-language capabilities, 
               combining JavaScript for VexFlow integration with F# for intelligent music generation.</p>
        </div>
        
        <div class="controls">
            <button onclick="generateScale()">Generate C Major Scale</button>
            <button onclick="generateChord()">Generate C Major Chord</button>
            <button onclick="generateMelody()">Generate Random Melody</button>
            <button onclick="clearStaff()">Clear Staff</button>
        </div>
        
        <div class="music-staff">
            <div id="notation"></div>
        </div>
        
        <div class="info">
            <h3>🎼 Music Theory Integration</h3>
            <p id="music-info">Click a button above to generate music notation and see the theory explanation here.</p>
        </div>
    </div>

    <script>
        const { Renderer, Stave, StaveNote, Voice, Formatter, Accidental } = Vex.Flow;
        let currentRenderer = null;
        let currentContext = null;

        function initializeVexFlow() {
            const div = document.getElementById('notation');
            div.innerHTML = ''; // Clear previous content
            
            currentRenderer = new Renderer(div, Renderer.Backends.SVG);
            currentRenderer.resize(800, 200);
            currentContext = currentRenderer.getContext();
            
            return { renderer: currentRenderer, context: currentContext };
        }

        function generateScale() {
            const { context } = initializeVexFlow();
            
            const stave = new Stave(10, 40, 700);
            stave.addClef('treble').addTimeSignature('4/4');
            stave.setContext(context).draw();

            const notes = [
                new StaveNote({ keys: ['c/4'], duration: 'q' }),
                new StaveNote({ keys: ['d/4'], duration: 'q' }),
                new StaveNote({ keys: ['e/4'], duration: 'q' }),
                new StaveNote({ keys: ['f/4'], duration: 'q' }),
                new StaveNote({ keys: ['g/4'], duration: 'q' }),
                new StaveNote({ keys: ['a/4'], duration: 'q' }),
                new StaveNote({ keys: ['b/4'], duration: 'q' }),
                new StaveNote({ keys: ['c/5'], duration: 'q' })
            ];

            const voice = new Voice({ num_beats: 8, beat_value: 4 });
            voice.addTickables(notes);

            new Formatter().joinVoices([voice]).format([voice], 650);
            voice.draw(context, stave);
            
            document.getElementById('music-info').innerHTML = 
                '<strong>C Major Scale:</strong> The C major scale contains no sharps or flats. ' +
                'It follows the pattern: Whole-Whole-Half-Whole-Whole-Whole-Half steps. ' +
                'Notes: C-D-E-F-G-A-B-C';
        }

        function generateChord() {
            const { context } = initializeVexFlow();
            
            const stave = new Stave(10, 40, 400);
            stave.addClef('treble').addTimeSignature('4/4');
            stave.setContext(context).draw();

            const notes = [
                new StaveNote({ keys: ['c/4', 'e/4', 'g/4'], duration: 'w' })
            ];

            const voice = new Voice({ num_beats: 4, beat_value: 4 });
            voice.addTickables(notes);

            new Formatter().joinVoices([voice]).format([voice], 350);
            voice.draw(context, stave);
            
            document.getElementById('music-info').innerHTML = 
                '<strong>C Major Chord:</strong> A triad consisting of the root (C), major third (E), ' +
                'and perfect fifth (G). This is the I chord in the key of C major and creates a ' +
                'stable, consonant sound that serves as the tonal center.';
        }

        function generateMelody() {
            const { context } = initializeVexFlow();
            
            const stave = new Stave(10, 40, 700);
            stave.addClef('treble').addTimeSignature('4/4');
            stave.setContext(context).draw();

            const pitches = ['c/4', 'd/4', 'e/4', 'f/4', 'g/4', 'a/4', 'b/4', 'c/5'];
            const durations = ['q', 'q', 'h', 'q'];
            
            const notes = [];
            for (let i = 0; i < 6; i++) {
                const randomPitch = pitches[Math.floor(Math.random() * pitches.length)];
                const randomDuration = durations[Math.floor(Math.random() * durations.length)];
                notes.push(new StaveNote({ keys: [randomPitch], duration: randomDuration }));
            }

            const voice = new Voice({ num_beats: 4, beat_value: 4 });
            voice.addTickables(notes);

            new Formatter().joinVoices([voice]).format([voice], 650);
            voice.draw(context, stave);
            
            document.getElementById('music-info').innerHTML = 
                '<strong>Random Melody:</strong> A computer-generated melody using notes from the C major scale. ' +
                'Each note and rhythm is randomly selected, demonstrating algorithmic composition techniques ' +
                'used in modern music software and AI composition systems.';
        }

        function clearStaff() {
            document.getElementById('notation').innerHTML = '';
            document.getElementById('music-info').innerHTML = 
                'Click a button above to generate music notation and see the theory explanation here.';
        }

        // Initialize with a welcome message
        window.onload = function() {
            console.log('🎵 VexFlow Music Notation System Loaded');
            console.log('Generated by FLUX Metascript Engine');
        };
    </script>
</body>
</html>`;
    };
    
    // Generate the HTML content
    const htmlContent = generateVexFlowHTML();
    console.log("✅ VexFlow HTML generated successfully");
    console.log("📄 HTML length:", htmlContent.length, "characters");
    
    // Return the generated HTML for testing
    return htmlContent;
}

FSHARP {
    printfn "🎼 F# Music Theory Integration"
    printfn "==============================="
    
    // Music theory types and functions
    type Note = C | D | E | F | G | A | B
    type Accidental = Natural | Sharp | Flat
    type Octave = int
    
    type MusicalNote = {
        Note: Note
        Accidental: Accidental
        Octave: Octave
    }
    
    // Generate scales
    let cMajorScale = [
        { Note = C; Accidental = Natural; Octave = 4 }
        { Note = D; Accidental = Natural; Octave = 4 }
        { Note = E; Accidental = Natural; Octave = 4 }
        { Note = F; Accidental = Natural; Octave = 4 }
        { Note = G; Accidental = Natural; Octave = 4 }
        { Note = A; Accidental = Natural; Octave = 4 }
        { Note = B; Accidental = Natural; Octave = 4 }
        { Note = C; Accidental = Natural; Octave = 5 }
    ]
    
    // Chord generation
    let generateTriad (root: MusicalNote) =
        let noteToInt = function
            | C -> 0 | D -> 2 | E -> 4 | F -> 5 | G -> 7 | A -> 9 | B -> 11
        
        let intToNote = function
            | 0 -> C | 2 -> D | 4 -> E | 5 -> F | 7 -> G | 9 -> A | 11 -> B
            | _ -> C // Default fallback
        
        let rootInt = noteToInt root.Note
        let thirdInt = (rootInt + 4) % 12
        let fifthInt = (rootInt + 7) % 12
        
        [
            root
            { root with Note = intToNote thirdInt }
            { root with Note = intToNote fifthInt }
        ]
    
    let cMajorChord = generateTriad { Note = C; Accidental = Natural; Octave = 4 }
    
    printfn "🎵 C Major Scale: %A" (cMajorScale |> List.map (fun n -> sprintf "%A%d" n.Note n.Octave))
    printfn "🎵 C Major Chord: %A" (cMajorChord |> List.map (fun n -> sprintf "%A%d" n.Note n.Octave))
    
    printfn "✅ F# music theory processing complete"
}

REASONING {
    This FLUX metascript demonstrates the revolutionary integration of multiple 
    technologies for advanced music notation and theory:
    
    🎵 **VexFlow Integration**: JavaScript generates sophisticated music notation
    using the VexFlow library, creating interactive staff notation with multiple
    musical examples including scales, chords, and random melodies.
    
    🎼 **F# Music Theory**: Functional programming models musical concepts with
    algebraic data types, enabling precise representation of notes, accidentals,
    octaves, and chord generation algorithms.
    
    🌐 **Interactive Web UI**: The generated HTML creates a beautiful, responsive
    interface with gradient backgrounds, interactive buttons, and real-time
    music theory explanations.
    
    🧠 **Educational Integration**: Each musical example includes detailed theory
    explanations, making this both a demonstration and learning tool.
    
    🚀 **FLUX Orchestration**: The metascript system seamlessly coordinates
    between JavaScript for UI generation and F# for music theory computation,
    demonstrating the power of multi-language metaprogramming.
    
    This represents the future of music education software, where AI agents
    can generate both the notation and the theoretical understanding in a
    unified, interactive experience.
}"""
            
            // Act
            let! result = engine.ExecuteString(musicNotationScript) |> Async.AwaitTask
            
            // Assert
            result.Success |> should equal true
            result.BlocksExecuted |> should be (greaterThan 1)
            
            printfn "🎵 VexFlow Music Notation Test Results:"
            printfn "======================================"
            printfn "✅ Success: %b" result.Success
            printfn "✅ Blocks executed: %d" result.BlocksExecuted
            printfn "✅ Execution time: %A" result.ExecutionTime
        }

    [<Fact>]
    let ``FLUX can generate VexFlow HTML content`` () =
        async {
            // Arrange
            let engine = FluxEngine()
            let simpleVexFlowScript = """JAVASCRIPT {
    console.log("🎵 VexFlow HTML Generation Test");

    // Simple VexFlow HTML generation
    const generateHTML = () => {
        return "<!DOCTYPE html><html><head><title>VexFlow Test</title></head><body><h1>VexFlow Music Notation</h1><div id='notation'></div></body></html>";
    };

    const html = generateHTML();
    console.log("✅ HTML generated:", html.length, "characters");
    return html;
}"""

            // Act
            let! result = engine.ExecuteString(simpleVexFlowScript) |> Async.AwaitTask

            // Assert
            result.Success |> should equal true
            result.BlocksExecuted |> should be (greaterThan 0)

            printfn "🎵 VexFlow HTML Generation Test Results:"
            printfn "======================================="
            printfn "✅ Success: %b" result.Success
            printfn "✅ Blocks executed: %d" result.BlocksExecuted
            printfn "✅ HTML generation functionality validated"

        }
