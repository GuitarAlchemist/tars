// Proof of Concept: TARS Metascript Management System
// This demonstrates the key concepts for managing .tars metascripts

namespace TarsEngine.FSharp.MetascriptManagement

open System
open System.IO
open System.Collections.Generic

/// <summary>
/// Metascript categories for organization.
/// </summary>
type MetascriptCategory =
    | Core
    | Analysis
    | Generation
    | Improvement
    | Testing
    | Documentation
    | Automation
    | Custom of string

/// <summary>
/// Source of the metascript.
/// </summary>
type MetascriptSource =
    | Default
    | UserCreated
    | AutoGenerated
    | Template

/// <summary>
/// Metascript metadata.
/// </summary>
type MetascriptInfo = {
    Id: string
    Name: string
    FilePath: string
    Category: MetascriptCategory
    Source: MetascriptSource
    CreatedAt: DateTime
    LastUsed: DateTime option
    UsageCount: int
    Tags: string list
}

/// <summary>
/// Simple metascript registry.
/// </summary>
type MetascriptRegistry() =
    let metascripts = Dictionary<string, MetascriptInfo>()
    
    member _.Register(info: MetascriptInfo) =
        metascripts.[info.Id] <- info
    
    member _.GetById(id: string) =
        match metascripts.TryGetValue(id) with
        | true, info -> Some info
        | false, _ -> None
    
    member _.GetByName(name: string) =
        metascripts.Values
        |> Seq.tryFind (fun info -> info.Name = name)
    
    member _.GetByCategory(category: MetascriptCategory) =
        metascripts.Values
        |> Seq.filter (fun info -> info.Category = category)
        |> Seq.toList
    
    member _.GetAll() =
        metascripts.Values |> Seq.toList
    
    member _.UpdateUsage(id: string) =
        match metascripts.TryGetValue(id) with
        | true, info ->
            let updated = { 
                info with 
                    LastUsed = Some DateTime.UtcNow
                    UsageCount = info.UsageCount + 1 
            }
            metascripts.[id] <- updated
        | false, _ -> ()

/// <summary>
/// Metascript discovery service.
/// </summary>
type MetascriptDiscovery(registry: MetascriptRegistry) =
    
    member _.DiscoverInDirectory(path: string) =
        if Directory.Exists(path) then
            Directory.GetFiles(path, "*.tars", SearchOption.AllDirectories)
            |> Array.map (fun filePath ->
                let name = Path.GetFileNameWithoutExtension(filePath)
                let category = inferCategory filePath
                let source = inferSource filePath
                
                {
                    Id = Guid.NewGuid().ToString()
                    Name = name
                    FilePath = filePath
                    Category = category
                    Source = source
                    CreatedAt = File.GetCreationTime(filePath)
                    LastUsed = None
                    UsageCount = 0
                    Tags = []
                }
            )
            |> Array.iter registry.Register
        
    member private _.inferCategory(filePath: string) =
        let pathLower = filePath.ToLowerInvariant()
        if pathLower.Contains("core") then Core
        elif pathLower.Contains("analysis") then Analysis
        elif pathLower.Contains("generation") then Generation
        elif pathLower.Contains("improvement") then Improvement
        elif pathLower.Contains("test") then Testing
        elif pathLower.Contains("doc") then Documentation
        elif pathLower.Contains("auto") then Automation
        else Custom "General"
    
    member private _.inferSource(filePath: string) =
        let pathLower = filePath.ToLowerInvariant()
        if pathLower.Contains("generated") then AutoGenerated
        elif pathLower.Contains("template") then Template
        elif pathLower.Contains("tarscli") then Default
        else UserCreated

/// <summary>
/// Auto-improvement metascript tracker.
/// </summary>
type AutoImprovementTracker(registry: MetascriptRegistry) =
    
    member _.TrackGenerated(issue: string, improvementType: string, filePath: string) =
        let name = sprintf "improvement_%s_%s" improvementType (DateTime.Now.ToString("yyyyMMdd_HHmmss"))
        
        let info = {
            Id = Guid.NewGuid().ToString()
            Name = name
            FilePath = filePath
            Category = Improvement
            Source = AutoGenerated
            CreatedAt = DateTime.UtcNow
            LastUsed = None
            UsageCount = 0
            Tags = ["auto-improvement"; improvementType; "generated"]
        }
        
        registry.Register(info)
        printfn "Tracked auto-improvement metascript: %s" name
        info

/// <summary>
/// Demo of the metascript management system.
/// </summary>
module MetascriptManagementDemo =
    
    let runDemo() =
        printfn "TARS Metascript Management - Proof of Concept"
        printfn "=============================================="
        
        // Create registry and services
        let registry = MetascriptRegistry()
        let discovery = MetascriptDiscovery(registry)
        let tracker = AutoImprovementTracker(registry)
        
        // Discover existing metascripts
        printfn "\n1. Discovering metascripts..."
        discovery.DiscoverInDirectory("TarsCli/Metascripts")
        discovery.DiscoverInDirectory(".")
        
        let allMetascripts = registry.GetAll()
        printfn "Found %d metascripts" allMetascripts.Length
        
        // Show by category
        printfn "\n2. Metascripts by category:"
        [Core; Analysis; Generation; Improvement; Testing; Documentation; Automation]
        |> List.iter (fun category ->
            let scripts = registry.GetByCategory(category)
            if not scripts.IsEmpty then
                printfn "  %A: %d scripts" category scripts.Length
        )
        
        // Simulate auto-improvement tracking
        printfn "\n3. Tracking auto-improvement metascripts..."
        let improvement1 = tracker.TrackGenerated("Fix code complexity", "refactoring", "temp/improvement_refactoring.tars")
        let improvement2 = tracker.TrackGenerated("Add unit tests", "testing", "temp/improvement_testing.tars")
        
        // Show usage tracking
        printfn "\n4. Usage tracking demo..."
        registry.UpdateUsage(improvement1.Id)
        registry.UpdateUsage(improvement1.Id)
        
        match registry.GetById(improvement1.Id) with
        | Some info -> printfn "  %s used %d times" info.Name info.UsageCount
        | None -> printfn "  Script not found"
        
        // Show search capabilities
        printfn "\n5. Search capabilities:"
        let improvementScripts = registry.GetByCategory(Improvement)
        printfn "  Found %d improvement scripts" improvementScripts.Length
        
        match registry.GetByName("test") with
        | Some info -> printfn "  Found script by name: %s" info.Name
        | None -> printfn "  No script named 'test' found"
        
        printfn "\nDemo completed successfully!"

// Run the demo
// MetascriptManagementDemo.runDemo()
