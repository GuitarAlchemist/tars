namespace TarsEngine.FSharp.DataSources.Generators

open System
open System.IO
open System.Text
open TarsEngine.FSharp.DataSources.Core

/// Infrastructure component generator for Docker Compose and configuration files
type InfrastructureGenerator() =
    
    /// Generates Docker Compose file for infrastructure stack
    member _.GenerateDockerCompose(stack: InfrastructureStack) =
        let sb = StringBuilder()
        
        // Header
        sb.AppendLine($"version: '{stack.ComposeVersion}'") |> ignore
        sb.AppendLine() |> ignore
        
        // Services
        sb.AppendLine("services:") |> ignore
        for component in stack.Components do
            this.GenerateServiceDefinition(sb, component)
            sb.AppendLine() |> ignore
        
        // Networks
        if not stack.Networks.IsEmpty then
            sb.AppendLine("networks:") |> ignore
            for network in stack.Networks do
                sb.AppendLine($"  {network.Name}:") |> ignore
                sb.AppendLine($"    driver: {network.Driver}") |> ignore
                if network.External then
                    sb.AppendLine("    external: true") |> ignore
                sb.AppendLine() |> ignore
        
        // Volumes
        if not stack.Volumes.IsEmpty then
            sb.AppendLine("volumes:") |> ignore
            for volume in stack.Volumes do
                sb.AppendLine($"  {volume.Name}:") |> ignore
                sb.AppendLine($"    driver: {volume.Driver}") |> ignore
                if volume.External then
                    sb.AppendLine("    external: true") |> ignore
                sb.AppendLine() |> ignore
        
        sb.ToString()
    
    /// Generates a single service definition
    member _.GenerateServiceDefinition(sb: StringBuilder, component: InfrastructureConfig) =
        let image = InfrastructureHelpers.getDockerImage component.Type component.Version
        
        sb.AppendLine($"  {component.Name}:") |> ignore
        sb.AppendLine($"    image: {image}") |> ignore
        sb.AppendLine($"    container_name: {component.Name}") |> ignore
        
        // Ports
        sb.AppendLine("    ports:") |> ignore
        sb.AppendLine($"      - \"{component.Port}:{component.Port}\"") |> ignore
        
        // Environment variables
        if not component.Environment.IsEmpty then
            sb.AppendLine("    environment:") |> ignore
            for kvp in component.Environment do
                sb.AppendLine($"      {kvp.Key}: {kvp.Value}") |> ignore
        
        // Volumes
        if not component.Volumes.IsEmpty then
            sb.AppendLine("    volumes:") |> ignore
            for volume in component.Volumes do
                sb.AppendLine($"      - {volume}") |> ignore
        
        // Networks
        if not component.Networks.IsEmpty then
            sb.AppendLine("    networks:") |> ignore
            for network in component.Networks do
                sb.AppendLine($"      - {network}") |> ignore
        
        // Health check
        match component.HealthCheck with
        | Some healthCheck ->
            sb.AppendLine("    healthcheck:") |> ignore
            sb.AppendLine($"      test: [\"{healthCheck.Command}\"]") |> ignore
            sb.AppendLine($"      interval: {healthCheck.Interval.TotalSeconds}s") |> ignore
            sb.AppendLine($"      timeout: {healthCheck.Timeout.TotalSeconds}s") |> ignore
            sb.AppendLine($"      retries: {healthCheck.Retries}") |> ignore
            sb.AppendLine($"      start_period: {healthCheck.StartPeriod.TotalSeconds}s") |> ignore
        | None -> ()
        
        // Dependencies
        if not component.Dependencies.IsEmpty then
            sb.AppendLine("    depends_on:") |> ignore
            for dependency in component.Dependencies do
                sb.AppendLine($"      - {dependency}") |> ignore
        
        // Restart policy
        sb.AppendLine("    restart: unless-stopped") |> ignore
    
    /// Generates environment file
    member _.GenerateEnvironmentFile(stack: InfrastructureStack, environment: string) =
        let sb = StringBuilder()
        
        sb.AppendLine($"# Environment configuration for {stack.Name} - {environment}") |> ignore
        sb.AppendLine($"# Generated by TARS Infrastructure Generator") |> ignore
        sb.AppendLine($"# Date: {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss} UTC") |> ignore
        sb.AppendLine() |> ignore
        
        sb.AppendLine("# Stack Configuration") |> ignore
        sb.AppendLine($"STACK_NAME={stack.Name}") |> ignore
        sb.AppendLine($"ENVIRONMENT={environment}") |> ignore
        sb.AppendLine($"COMPOSE_PROJECT_NAME={stack.Name}_{environment}") |> ignore
        sb.AppendLine() |> ignore
        
        // Component-specific environment variables
        for component in stack.Components do
            sb.AppendLine($"# {component.Name.ToUpper()} Configuration") |> ignore
            sb.AppendLine($"{component.Name.ToUpper()}_PORT={component.Port}") |> ignore
            
            for kvp in component.Environment do
                sb.AppendLine($"{component.Name.ToUpper()}_{kvp.Key}={kvp.Value}") |> ignore
            
            sb.AppendLine() |> ignore
        
        sb.ToString()
    
    /// Generates startup script
    member _.GenerateStartupScript(stack: InfrastructureStack) =
        let sb = StringBuilder()
        
        sb.AppendLine("#!/bin/bash") |> ignore
        sb.AppendLine($"# Startup script for {stack.Name} infrastructure stack") |> ignore
        sb.AppendLine("# Generated by TARS Infrastructure Generator") |> ignore
        sb.AppendLine() |> ignore
        
        sb.AppendLine("set -e") |> ignore
        sb.AppendLine() |> ignore
        
        sb.AppendLine($"echo \"🚀 Starting {stack.Name} infrastructure stack...\"") |> ignore
        sb.AppendLine() |> ignore
        
        sb.AppendLine("# Check if Docker is running") |> ignore
        sb.AppendLine("if ! docker info > /dev/null 2>&1; then") |> ignore
        sb.AppendLine("    echo \"❌ Docker is not running. Please start Docker first.\"") |> ignore
        sb.AppendLine("    exit 1") |> ignore
        sb.AppendLine("fi") |> ignore
        sb.AppendLine() |> ignore
        
        sb.AppendLine("# Pull latest images") |> ignore
        sb.AppendLine("echo \"📦 Pulling Docker images...\"") |> ignore
        sb.AppendLine("docker-compose pull") |> ignore
        sb.AppendLine() |> ignore
        
        sb.AppendLine("# Start services") |> ignore
        sb.AppendLine("echo \"🔄 Starting services...\"") |> ignore
        sb.AppendLine("docker-compose up -d") |> ignore
        sb.AppendLine() |> ignore
        
        sb.AppendLine("# Wait for services to be healthy") |> ignore
        sb.AppendLine("echo \"⏳ Waiting for services to be healthy...\"") |> ignore
        sb.AppendLine("sleep 10") |> ignore
        sb.AppendLine() |> ignore
        
        sb.AppendLine("# Show status") |> ignore
        sb.AppendLine("echo \"📊 Service status:\"") |> ignore
        sb.AppendLine("docker-compose ps") |> ignore
        sb.AppendLine() |> ignore
        
        sb.AppendLine("echo \"✅ Infrastructure stack started successfully!\"") |> ignore
        sb.AppendLine() |> ignore
        
        sb.AppendLine("echo \"🔗 Available services:\"") |> ignore
        for component in stack.Components do
            sb.AppendLine($"echo \"  {component.Name}: http://localhost:{component.Port}\"") |> ignore
        
        sb.AppendLine() |> ignore
        sb.AppendLine("echo \"🛑 To stop: docker-compose down\"") |> ignore
        sb.AppendLine("echo \"🗑️ To remove volumes: docker-compose down -v\"") |> ignore
        
        sb.ToString()
    
    /// Generates shutdown script
    member _.GenerateShutdownScript(stack: InfrastructureStack) =
        let sb = StringBuilder()
        
        sb.AppendLine("#!/bin/bash") |> ignore
        sb.AppendLine($"# Shutdown script for {stack.Name} infrastructure stack") |> ignore
        sb.AppendLine("# Generated by TARS Infrastructure Generator") |> ignore
        sb.AppendLine() |> ignore
        
        sb.AppendLine("set -e") |> ignore
        sb.AppendLine() |> ignore
        
        sb.AppendLine($"echo \"🛑 Stopping {stack.Name} infrastructure stack...\"") |> ignore
        sb.AppendLine() |> ignore
        
        sb.AppendLine("# Stop services") |> ignore
        sb.AppendLine("docker-compose down") |> ignore
        sb.AppendLine() |> ignore
        
        sb.AppendLine("echo \"✅ Infrastructure stack stopped successfully!\"") |> ignore
        sb.AppendLine() |> ignore
        
        sb.AppendLine("# Optional: Remove volumes (uncomment if needed)") |> ignore
        sb.AppendLine("# echo \"🗑️ Removing volumes...\"") |> ignore
        sb.AppendLine("# docker-compose down -v") |> ignore
        
        sb.ToString()
    
    /// Generates monitoring script
    member _.GenerateMonitoringScript(stack: InfrastructureStack) =
        let sb = StringBuilder()
        
        sb.AppendLine("#!/bin/bash") |> ignore
        sb.AppendLine($"# Monitoring script for {stack.Name} infrastructure stack") |> ignore
        sb.AppendLine("# Generated by TARS Infrastructure Generator") |> ignore
        sb.AppendLine() |> ignore
        
        sb.AppendLine("set -e") |> ignore
        sb.AppendLine() |> ignore
        
        sb.AppendLine($"echo \"📊 Monitoring {stack.Name} infrastructure stack...\"") |> ignore
        sb.AppendLine() |> ignore
        
        sb.AppendLine("# Show service status") |> ignore
        sb.AppendLine("echo \"🔄 Service Status:\"") |> ignore
        sb.AppendLine("docker-compose ps") |> ignore
        sb.AppendLine() |> ignore
        
        sb.AppendLine("# Show resource usage") |> ignore
        sb.AppendLine("echo \"💾 Resource Usage:\"") |> ignore
        sb.AppendLine("docker stats --no-stream") |> ignore
        sb.AppendLine() |> ignore
        
        sb.AppendLine("# Health checks") |> ignore
        sb.AppendLine("echo \"❤️ Health Checks:\"") |> ignore
        for component in stack.Components do
            match component.HealthCheck with
            | Some _ ->
                sb.AppendLine($"echo \"  {component.Name}: $(docker inspect --format='{{{{.State.Health.Status}}}}' {component.Name} 2>/dev/null || echo 'no health check')\"") |> ignore
            | None ->
                sb.AppendLine($"echo \"  {component.Name}: $(docker inspect --format='{{{{.State.Status}}}}' {component.Name} 2>/dev/null || echo 'not running')\"") |> ignore
        
        sb.AppendLine() |> ignore
        
        sb.AppendLine("# Show logs (last 10 lines)") |> ignore
        sb.AppendLine("echo \"📝 Recent Logs:\"") |> ignore
        for component in stack.Components do
            sb.AppendLine($"echo \"--- {component.Name} ---\"") |> ignore
            sb.AppendLine($"docker-compose logs --tail=5 {component.Name} 2>/dev/null || echo \"No logs available\"") |> ignore
        
        sb.ToString()
    
    /// Generates README documentation
    member _.GenerateDocumentation(stack: InfrastructureStack) =
        let sb = StringBuilder()
        
        sb.AppendLine($"# {stack.Name} Infrastructure Stack") |> ignore
        sb.AppendLine() |> ignore
        sb.AppendLine(stack.Description) |> ignore
        sb.AppendLine() |> ignore
        sb.AppendLine("Generated by TARS Infrastructure Generator 🤖") |> ignore
        sb.AppendLine() |> ignore
        
        sb.AppendLine("## 🏗️ Components") |> ignore
        sb.AppendLine() |> ignore
        for component in stack.Components do
            sb.AppendLine($"### {component.Name}") |> ignore
            sb.AppendLine($"- **Type**: {InfrastructureHelpers.infraTypeToString component.Type}") |> ignore
            sb.AppendLine($"- **Version**: {component.Version}") |> ignore
            sb.AppendLine($"- **Port**: {component.Port}") |> ignore
            sb.AppendLine($"- **Image**: {InfrastructureHelpers.getDockerImage component.Type component.Version}") |> ignore
            
            if not component.Environment.IsEmpty then
                sb.AppendLine("- **Environment**:") |> ignore
                for kvp in component.Environment do
                    sb.AppendLine($"  - `{kvp.Key}`: {kvp.Value}") |> ignore
            
            sb.AppendLine() |> ignore
        
        sb.AppendLine("## 🚀 Quick Start") |> ignore
        sb.AppendLine() |> ignore
        sb.AppendLine("### Prerequisites") |> ignore
        sb.AppendLine("- Docker") |> ignore
        sb.AppendLine("- Docker Compose") |> ignore
        sb.AppendLine() |> ignore
        
        sb.AppendLine("### Start the Stack") |> ignore
        sb.AppendLine("```bash") |> ignore
        sb.AppendLine("# Start all services") |> ignore
        sb.AppendLine("./start.sh") |> ignore
        sb.AppendLine() |> ignore
        sb.AppendLine("# Or manually") |> ignore
        sb.AppendLine("docker-compose up -d") |> ignore
        sb.AppendLine("```") |> ignore
        sb.AppendLine() |> ignore
        
        sb.AppendLine("### Monitor the Stack") |> ignore
        sb.AppendLine("```bash") |> ignore
        sb.AppendLine("# Check status") |> ignore
        sb.AppendLine("./monitor.sh") |> ignore
        sb.AppendLine() |> ignore
        sb.AppendLine("# View logs") |> ignore
        sb.AppendLine("docker-compose logs -f") |> ignore
        sb.AppendLine("```") |> ignore
        sb.AppendLine() |> ignore
        
        sb.AppendLine("### Stop the Stack") |> ignore
        sb.AppendLine("```bash") |> ignore
        sb.AppendLine("# Stop all services") |> ignore
        sb.AppendLine("./stop.sh") |> ignore
        sb.AppendLine() |> ignore
        sb.AppendLine("# Or manually") |> ignore
        sb.AppendLine("docker-compose down") |> ignore
        sb.AppendLine("```") |> ignore
        sb.AppendLine() |> ignore
        
        sb.AppendLine("## 🔗 Service URLs") |> ignore
        sb.AppendLine() |> ignore
        for component in stack.Components do
            sb.AppendLine($"- **{component.Name}**: http://localhost:{component.Port}") |> ignore
        
        sb.AppendLine() |> ignore
        sb.AppendLine("## 📁 Files") |> ignore
        sb.AppendLine() |> ignore
        sb.AppendLine("- `docker-compose.yml` - Main Docker Compose configuration") |> ignore
        sb.AppendLine("- `.env` - Environment variables") |> ignore
        sb.AppendLine("- `start.sh` - Startup script") |> ignore
        sb.AppendLine("- `stop.sh` - Shutdown script") |> ignore
        sb.AppendLine("- `monitor.sh` - Monitoring script") |> ignore
        sb.AppendLine() |> ignore
        
        sb.AppendLine("## 🛠️ Customization") |> ignore
        sb.AppendLine() |> ignore
        sb.AppendLine("Edit the `.env` file to customize environment variables.") |> ignore
        sb.AppendLine("Modify `docker-compose.yml` for advanced configuration.") |> ignore
        sb.AppendLine() |> ignore
        
        sb.AppendLine("---") |> ignore
        sb.AppendLine($"Generated by TARS Infrastructure Generator on {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss} UTC") |> ignore
        
        sb.ToString()
    
    /// Generates complete infrastructure project
    member _.GenerateInfrastructureProject(stack: InfrastructureStack, outputDir: string) =
        // Create output directory
        Directory.CreateDirectory(outputDir) |> ignore
        
        // Generate files
        let dockerCompose = this.GenerateDockerCompose(stack)
        let envFile = this.GenerateEnvironmentFile(stack, stack.Environment)
        let startScript = this.GenerateStartupScript(stack)
        let stopScript = this.GenerateShutdownScript(stack)
        let monitorScript = this.GenerateMonitoringScript(stack)
        let documentation = this.GenerateDocumentation(stack)
        
        // Write files
        File.WriteAllText(Path.Combine(outputDir, "docker-compose.yml"), dockerCompose)
        File.WriteAllText(Path.Combine(outputDir, ".env"), envFile)
        File.WriteAllText(Path.Combine(outputDir, "start.sh"), startScript)
        File.WriteAllText(Path.Combine(outputDir, "stop.sh"), stopScript)
        File.WriteAllText(Path.Combine(outputDir, "monitor.sh"), monitorScript)
        File.WriteAllText(Path.Combine(outputDir, "README.md"), documentation)
        
        // Make scripts executable (on Unix systems)
        if Environment.OSVersion.Platform = PlatformID.Unix then
            let makeExecutable (filePath: string) =
                try
                    let chmod = System.Diagnostics.Process.Start("chmod", $"+x {filePath}")
                    chmod.WaitForExit()
                with
                | _ -> () // Ignore errors on non-Unix systems
            
            makeExecutable (Path.Combine(outputDir, "start.sh"))
            makeExecutable (Path.Combine(outputDir, "stop.sh"))
            makeExecutable (Path.Combine(outputDir, "monitor.sh"))
        
        {
            Stack = stack
            DockerCompose = dockerCompose
            EnvironmentFiles = Map.ofList [(".env", envFile)]
            ConfigFiles = Map.empty
            Scripts = Map.ofList [
                ("start.sh", startScript)
                ("stop.sh", stopScript)
                ("monitor.sh", monitorScript)
            ]
            Documentation = documentation
            OutputDirectory = outputDir
        }
