@page "/"
@using TarsEngine.Services
@inject ITarsEngineService EngineService
@inject ISnackbar Snackbar

<PageTitle>TARS Control Panel</PageTitle>

<MudPaper Class="pa-4">
    <MudText Typo="Typo.h4" Class="mb-4">TARS Self-Improvement Control</MudText>
    
    <MudStack Row="true" Spacing="2">
        <MudButton Variant="Variant.Filled" 
                   Color="@(_isRunning ? Color.Error : Color.Success)"
                   StartIcon="@(_isRunning ? Icons.Material.Filled.Stop : Icons.Material.Filled.PlayArrow)"
                   OnClick="ToggleImprovement">
            @(_isRunning ? "Stop" : "Start") Self-Improvement
        </MudButton>
        
        <MudButton Variant="Variant.Outlined"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.Refresh"
                   OnClick="ResumeImprovement"
                   Disabled="@_isRunning">
            Resume Last Session
        </MudButton>
    </MudStack>

    @if (_isRunning)
    {
        <MudPaper Class="mt-4 pa-4" Elevation="0">
            <MudText Typo="Typo.h6" Color="Color.Primary">Learning Progress</MudText>
            <MudProgressLinear Color="Color.Primary" 
                             Value="@_currentProgress" 
                             Class="my-2" />
            <MudText Typo="Typo.body2">@_currentActivity</MudText>
            
            <MudSimpleTable Dense="true" Hover="true" Class="mt-4">
                <thead>
                    <tr>
                        <th>Time</th>
                        <th>New Capability</th>
                        <th>Confidence</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var improvement in _improvements)
                    {
                        <tr>
                            <td>@improvement.Time.ToLocalTime()</td>
                            <td>@improvement.Capability</td>
                            <td>@($"{improvement.Confidence:P1}")</td>
                        </tr>
                    }
                </tbody>
            </MudSimpleTable>
        </MudPaper>
    }
</MudPaper>

@code {
    private bool _isRunning;
    private float _currentProgress;
    private string _currentActivity = "";
    private List<(DateTime Time, string Capability, float Confidence)> _improvements = new();
    private CancellationTokenSource? _cancellationTokenSource;

    private async Task ToggleImprovement()
    {
        if (_isRunning)
        {
            _cancellationTokenSource?.Cancel();
            _isRunning = false;
            await EngineService.SaveCheckpoint();
            Snackbar.Add("Self-improvement paused", Severity.Warning);
            return;
        }

        _isRunning = true;
        _cancellationTokenSource = new CancellationTokenSource();
        
        try
        {
            await StartImprovement(_cancellationTokenSource.Token);
        }
        catch (OperationCanceledException)
        {
            await EngineService.SaveCheckpoint();
            Snackbar.Add("Self-improvement stopped", Severity.Info);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
            _isRunning = false;
        }
    }

    private async Task StartImprovement(CancellationToken cancellationToken)
    {
        while (!cancellationToken.IsCancellationRequested)
        {
            _currentActivity = "Analyzing current capabilities...";
            await Task.Delay(1000, cancellationToken);
            
            _currentActivity = "Generating improvements...";
            var result = await EngineService.GenerateImprovement(cancellationToken);
            
            var improvement = (DateTime.UtcNow, result.Capability, result.Confidence);
            _improvements.Insert(0, improvement);
            if (_improvements.Count > 10) _improvements.RemoveAt(_improvements.Count - 1);
            
            _currentProgress = (_currentProgress + 10) % 100;
            StateHasChanged();
            
            await Task.Delay(2000, cancellationToken);
        }
    }

    private async Task ResumeImprovement()
    {
        if (await EngineService.LoadCheckpoint())
        {
            Snackbar.Add("Resuming from last checkpoint...", Severity.Info);
            await ToggleImprovement();
        }
        else
        {
            Snackbar.Add("No checkpoint found", Severity.Warning);
        }
    }
}
