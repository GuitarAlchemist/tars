@page "/"
@using TarsEngine.Services
@inject ITarsEngineService EngineService
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudPaper Class="pa-4">
        <MudText Typo="Typo.h4" Class="mb-4">TARS Self-Improvement Control</MudText>
        
        <MudGrid>
            <MudItem xs="12" sm="6">
                <MudButton Variant="Variant.Filled" 
                          Color="@(_isRunning ? Color.Error : Color.Primary)"
                          OnClick="ToggleImprovement" 
                          Class="mb-4">
                    @(_isRunning ? "Stop Improvement" : "Start Improvement")
                </MudButton>
                
                <MudButton Variant="Variant.Outlined" 
                          Color="Color.Secondary"
                          OnClick="ResumeImprovement" 
                          Disabled="@_isRunning"
                          Class="ml-2 mb-4">
                    Resume from Checkpoint
                </MudButton>
            </MudItem>
        </MudGrid>

        @if (_isRunning)
        {
            <MudProgressLinear Color="Color.Primary" 
                              Value="@_currentProgress" 
                              Class="my-4" />
            <MudText Class="mb-4">@_currentActivity</MudText>
        }

        <MudPaper Class="mt-4" Style="max-height: 400px; overflow-y: auto;">
            <MudText Typo="Typo.h6" Class="mb-2">Recent Improvements</MudText>
            <MudSimpleTable Dense="true" Hover="true">
                <thead>
                    <tr>
                        <th>Time (UTC)</th>
                        <th>Capability</th>
                        <th>Confidence</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var (time, capability, confidence) in _improvements)
                    {
                        <tr>
                            <td>@time.ToString("HH:mm:ss")</td>
                            <td>@capability</td>
                            <td>@(confidence.ToString("P1"))</td>
                        </tr>
                    }
                </tbody>
            </MudSimpleTable>
        </MudPaper>

        <MudExpansionPanels Class="mt-4">
            <MudExpansionPanel Text="Upload Work Items">
                <MudFileUpload T="IBrowserFile" FilesChanged="OnFilesChanged">
                    <UploadTemplate>
                        <MudButton HtmlTag="label"
                                   Variant="Variant.Filled"
                                   Color="Color.Secondary"
                                   StartIcon="@Icons.Material.Filled.CloudUpload"
                                   for="files">
                            Upload Stories/Epics
                        </MudButton>
                    </UploadTemplate>
                </MudFileUpload>
                
                <MudTextField @bind-Value="@_promptText"
                            Label="Or enter prompt directly"
                            Variant="Variant.Outlined"
                            Lines="3"
                            Class="mt-4" />
                            
                <MudButton Color="Color.Primary"
                          Variant="Variant.Filled"
                          OnClick="ProcessPrompt"
                          Disabled="@(string.IsNullOrEmpty(_promptText))"
                          Class="mt-2">
                    Process Prompt
                </MudButton>
            </MudExpansionPanel>
        </MudExpansionPanels>
    </MudPaper>
</MudContainer>

@code {
    private bool _isRunning;
    private float _currentProgress;
    private string _currentActivity = "";
    private readonly List<(DateTime Time, string Capability, float Confidence)> _improvements = [];
    private CancellationTokenSource? _cancellationTokenSource;
    private string _promptText = "";

    private async Task ToggleImprovement()
    {
        if (_isRunning)
        {
            _cancellationTokenSource?.Cancel();
            _isRunning = false;
            await EngineService.SaveCheckpoint();
            Snackbar.Add("Self-improvement paused", Severity.Warning);
            return;
        }

        _isRunning = true;
        _cancellationTokenSource = new CancellationTokenSource();
        
        try
        {
            await StartImprovement(_cancellationTokenSource.Token);
        }
        catch (OperationCanceledException)
        {
            await EngineService.SaveCheckpoint();
            Snackbar.Add("Self-improvement stopped", Severity.Info);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
            _isRunning = false;
        }
    }

    private async Task StartImprovement(CancellationToken cancellationToken)
    {
        while (!cancellationToken.IsCancellationRequested)
        {
            _currentActivity = "Analyzing current capabilities...";
            await Task.Delay(1000, cancellationToken);
            
            _currentActivity = "Generating improvements...";
            var result = await EngineService.GenerateImprovement(cancellationToken);
            
            var improvement = (DateTime.UtcNow, result.Capability, result.Confidence);
            _improvements.Insert(0, improvement);
            if (_improvements.Count > 10) _improvements.RemoveAt(_improvements.Count - 1);
            
            _currentProgress = (_currentProgress + 10) % 100;
            StateHasChanged();
            
            await Task.Delay(2000, cancellationToken);
        }
    }

    private async Task ResumeImprovement()
    {
        if (await EngineService.LoadCheckpoint())
        {
            Snackbar.Add("Resuming from last checkpoint...", Severity.Info);
            await ToggleImprovement();
        }
        else
        {
            Snackbar.Add("No checkpoint found", Severity.Warning);
        }
    }

    private async Task OnFilesChanged(IBrowserFile file)
    {
        try
        {
            using var stream = file.OpenReadStream();
            var content = await EngineService.ProcessUploadedFile(stream, file.Name);
            _promptText = content;
            Snackbar.Add("File processed successfully", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error processing file: {ex.Message}", Severity.Error);
        }
    }

    private async Task ProcessPrompt()
    {
        if (string.IsNullOrEmpty(_promptText)) return;

        try
        {
            await EngineService.ProcessPrompt(_promptText);
            Snackbar.Add("Prompt processed successfully", Severity.Success);
            _promptText = "";
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error processing prompt: {ex.Message}", Severity.Error);
        }
    }
}