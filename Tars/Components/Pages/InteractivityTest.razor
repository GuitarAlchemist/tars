@page "/test"
@using TarsEngine.Services
@rendermode InteractiveServer
@inject WebSpeechService WebSpeechService
@inject ILogger<InteractivityTest> Logger
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar

<PageTitle>Interactivity Test</PageTitle>

<MudPaper Class="pa-4">
    <MudText Typo="Typo.h4" Class="mb-4">Interactivity Test Page</MudText>

    <MudTabs Elevation="2" Rounded="true" PanelClass="pa-6">
        <MudTabPanel Text="Basic Controls">
            <MudText Class="mb-4">
                Current count: @_count
            </MudText>

            <MudButton Variant="Variant.Filled" 
                      Color="Color.Primary"
                      OnClick="IncrementCount">
                Increment Counter
            </MudButton>
        </MudTabPanel>

        <MudTabPanel Text="Speech Synthesis" Icon="@Icons.Material.Filled.RecordVoiceOver">
            <MudText Typo="Typo.h6" Class="mb-4">Text-to-Speech Test</MudText>
            
            <MudTextField T="string"
                         @bind-Value="_textToSpeak"
                         Label="Text to speak"
                         Variant="Variant.Outlined"
                         Lines="3"
                         Class="mb-4"/>

            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       OnClick="SpeakText"
                       Disabled="@_isSpeaking">
                @(_isSpeaking ? "Speaking..." : "Speak Text")
            </MudButton>
        </MudTabPanel>

        <MudTabPanel Text="Text Input" Icon="@Icons.Material.Filled.Edit">
            <MudText Typo="Typo.h6" Class="mb-4">Text Input Test</MudText>
            
            <MudTextField T="string"
                         @bind-Value="_inputText"
                         Label="Type something"
                         Variant="Variant.Outlined"
                         Immediate="true"
                         Class="mb-4"/>

            <MudText>
                You typed: @_inputText
            </MudText>
        </MudTabPanel>
    </MudTabs>
</MudPaper>

@code {
    private int _count = 0;
    private string _inputText = "";
    private string _textToSpeak = "Hello, I am TARS. How can I assist you today?";
    private bool _isSpeaking = false;
    private IJSObjectReference? _audioModule;
    private List<VoiceInfo> _availableVoices = new();
    private string _selectedVoice = "";
    private double _speechRate = 1.0;
    private double _speechPitch = 1.0;
    private double _sliderValue = 50; // Default value

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                _audioModule = await JSRuntime.InvokeAsync<IJSObjectReference>(
                    "import", "./js/audioHelpers.js");
                Logger.LogInformation("Audio module loaded successfully");
                
                // Load available voices
                await LoadVoicesAsync();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Failed to load audio module");
                Snackbar.Add("Failed to initialize audio system", Severity.Error);
            }
        }
    }

    private async Task LoadVoicesAsync()
    {
        try
        {
            _availableVoices = await WebSpeechService.GetAvailableVoicesAsync();
            if (_availableVoices.Count > 0)
            {
                // Select a default voice (preferably English)
                var defaultVoice = _availableVoices.FirstOrDefault(v => v.Default) ?? 
                                  _availableVoices.FirstOrDefault(v => v.Lang.StartsWith("en")) ??
                                  _availableVoices.First();
                _selectedVoice = defaultVoice.Name;
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load voices");
            Snackbar.Add("Failed to load available voices", Severity.Error);
        }
    }

    private void IncrementCount()
    {
        _count++;
        StateHasChanged();
    }

    private async Task SpeakText()
    {
        if (string.IsNullOrEmpty(_textToSpeak) || _isSpeaking)
        {
            return;
        }

        try
        {
            _isSpeaking = true;
            StateHasChanged();
            
            // Use the enhanced speech service from audioHelpers.js
            await JSRuntime.InvokeVoidAsync("speechService.speak", 
                _textToSpeak,
                _selectedVoice, // Use selected voice
                _speechRate,    // Use speech rate
                _speechPitch    // Use speech pitch
            );
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during speech synthesis");
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isSpeaking = false;
            StateHasChanged();
        }
    }
    
    private async Task StopSpeaking()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("speechSynthesis.cancel");
            _isSpeaking = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error stopping speech");
        }
    }
}
