@page "/chat"
@rendermode InteractiveServer
@using TarsEngine.Services
@using Microsoft.Extensions.Logging
@using System.Threading.Tasks
@implements IAsyncDisposable
@inject ILogger<Chat> Logger
@inject ChatBotService ChatService
@inject SpeechServiceFactory SpeechFactory
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar

<PageTitle>Chat with TARS</PageTitle>

<MudPaper Class="pa-4 chat-container">
    <MudText Typo="Typo.h4" Class="mb-4">Chat with TARS</MudText>
    
    <MudSelect T="SpeechServiceType" Label="Speech Service" @bind-Value="_selectedSpeechService" Class="mb-4">
        @foreach (var service in SpeechFactory.AvailableServices)
        {
            <MudSelectItem Value="@service">@service</MudSelectItem>
        }
    </MudSelect>

    <div class="chat-messages">
        @foreach (var message in _messages)
        {
            <MudPaper Class="@($"message-bubble mb-2 {(message.IsUser ? "user-message" : "tars-message")}")">
                <MudText>@message.Text</MudText>
                @if (!message.IsUser)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.VolumeUp"
                                 Size="Size.Small"
                                 OnClick="@(() => PlayTTSAsync(message.Text))"
                                 Class="ml-2"/>
                }
            </MudPaper>
        }
    </div>

    <MudPaper Class="d-flex align-center chat-input">
        <MudIconButton Icon="@(_isRecording ? Icons.Material.Filled.MicOff : Icons.Material.Filled.Mic)"
                      Color="@(_isRecording ? Color.Error : Color.Primary)"
                      OnClick="ToggleRecording"
                      Class="mr-2"/>
        <MudTextField T="string"
                     @bind-Value="_currentMessage"
                     Placeholder="Type your message..."
                     Class="flex-grow-1 mr-2"
                     Immediate="true"
                     @onkeydown="@HandleKeyPress"/>
        <MudButton Color="Color.Primary"
                  OnClick="SendMessage"
                  StartIcon="@Icons.Material.Filled.Send">
            Send
        </MudButton>
    </MudPaper>
</MudPaper>

@code {
    private string _currentMessage = "";
    private List<(string Text, bool IsUser)> _messages = new();
    private bool _isRecording = false;
    private SpeechServiceType _selectedSpeechService;
    private IJSObjectReference? _audioModule;

    protected override async Task OnInitializedAsync()
    {
        _selectedSpeechService = SpeechFactory.DefaultService;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("audioPlayer.init");
                Logger.LogInformation("Audio player initialized");
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Failed to initialize audio player");
                Snackbar.Add("Failed to initialize audio system", Severity.Error);
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_audioModule is not null)
        {
            try
            {
                await _audioModule.DisposeAsync();
            }
            catch (JSDisconnectedException)
            {
                // Browser might have already disconnected
            }
        }
    }

    private async Task ToggleRecording()
    {
        if (_isRecording)
        {
            await StopRecordingAsync();
        }
        else
        {
            await StartRecordingAsync();
        }
        _isRecording = !_isRecording;
    }

    private async Task PlayTTSAsync(string text)
    {
        try
        {
            var speechService = SpeechFactory.GetSpeechService(_selectedSpeechService);
            var audioData = await speechService.SynthesizeSpeechAsync(text);
            
            if (audioData == null || audioData.Length == 0)
            {
                Logger.LogWarning("No audio data received from TTS service");
                return;
            }

            Logger.LogInformation("Received audio data of length: {Length} bytes", audioData.Length);
            await JSRuntime.InvokeVoidAsync("audioPlayer.play", audioData);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error playing TTS audio");
            Snackbar.Add("Failed to play audio", Severity.Error);
        }
    }

    private async Task StartRecordingAsync()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("audioRecorder.start", new { sampleRate = 16000, channels = 1 });
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error starting recording");
            // Handle error appropriately
        }
    }

    private async Task StopRecordingAsync()
    {
        try
        {
            var audioData = await JSRuntime.InvokeAsync<byte[]>("audioRecorder.stop");
            var speechService = SpeechFactory.GetSpeechService(_selectedSpeechService);
            var transcription = await speechService.TranscribeAudioAsync(audioData);
            
            if (!string.IsNullOrEmpty(transcription))
            {
                _currentMessage = transcription;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error stopping recording");
            Snackbar.Add("Failed to process audio", Severity.Error);
        }
    }

    private async Task SendMessage()
    {
        Logger.LogInformation("Entering SendMessage");

        if (string.IsNullOrWhiteSpace(_currentMessage))
        {
            Logger.LogInformation("Empty message, returning");
            return;
        }

        try
        {
            var userMessage = _currentMessage;
            Logger.LogInformation("Processing message: {Message}", userMessage);

            _messages.Add((userMessage, true));
            _currentMessage = "";
            
            // Force UI update before waiting for response
            StateHasChanged();

            var response = await ChatService.GetResponse(userMessage);
            _messages.Add((response.Text, false));

            Logger.LogInformation("Response received: {Response}", response.Text);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in SendMessage");
            _messages.Add(("Sorry, I encountered an error processing your message.", false));
        }

        StateHasChanged();
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await SendMessage();
        }
    }
}