@page "/chat"
@using TarsEngine.Services
@using Microsoft.Extensions.Logging
@inject ILogger<Chat> Logger
@inject ChatBotService ChatService

<PageTitle>Chat with TARS</PageTitle>

<MudPaper Class="pa-4 chat-container">
    <MudText Typo="Typo.h4" Class="mb-4">Chat with TARS</MudText>

    <div class="chat-messages">
        @foreach (var message in _messages)
        {
            <MudPaper Class="@($"message-bubble mb-2 {(message.IsUser ? "user-message" : "tars-message")}")">
                <MudText>@message.Text</MudText>
            </MudPaper>
        }
    </div>

    <MudPaper Class="d-flex align-center chat-input">
        <MudTextField T="string"
                     @bind-Value="_currentMessage"
                     Placeholder="Type your message..."
                     Class="flex-grow-1 mr-2"
                     Immediate="true"
                     @onkeydown="@HandleKeyPress"/>
        <MudButton Color="Color.Primary"
                  OnClick="SendMessage"
                  StartIcon="@Icons.Material.Filled.Send">
            Send
        </MudButton>
    </MudPaper>
</MudPaper>

<style>
    .chat-container {
        height: calc(100vh - 100px);
        display: flex;
        flex-direction: column;
    }

    .chat-messages {
        flex-grow: 1;
        overflow-y: auto;
        margin-bottom: 16px;
        padding: 8px;
    }

    .message-bubble {
        padding: 8px 16px;
        margin: 4px;
        max-width: 80%;
        border-radius: 16px;
    }

    .user-message {
        margin-left: auto;
        background-color: var(--mud-palette-primary);
        color: var(--mud-palette-primary-text);
    }

    .tars-message {
        margin-right: auto;
        background-color: var(--mud-palette-surface);
    }

    .chat-input {
        padding: 8px;
    }
</style>

@code {
    private string _currentMessage = "";
    private List<(string Text, bool IsUser)> _messages = new();

    protected override void OnInitialized()
    {
        Logger.LogInformation("Chat component initialized");
    }

    private async Task SendMessage()
    {
        Logger.LogInformation("Entering SendMessage");

        if (string.IsNullOrWhiteSpace(_currentMessage))
        {
            Logger.LogInformation("Empty message, returning");
            return;
        }

        try
        {
            var userMessage = _currentMessage;
            Logger.LogInformation("Processing message: {Message}", userMessage);

            _messages.Add((userMessage, true));
            _currentMessage = "";

            var response = await ChatService.GetResponse(userMessage);
            _messages.Add((response.Text, false));

            Logger.LogInformation("Response received: {Response}", response.Text);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in SendMessage");
            _messages.Add(("Sorry, I encountered an error processing your message.", false));
        }

        StateHasChanged();
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(_currentMessage))
        {
            Logger.LogInformation("Enter key pressed");
            await SendMessage();
        }
    }
}