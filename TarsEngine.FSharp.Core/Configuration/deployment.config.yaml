# TARS Deployment Configuration
# Environment Agnostic Deployment Settings
# Supports: Native Services, Docker, Kubernetes, Hyperlight, WASM

# Global deployment settings
global:
  version: "2.0"
  environment: "production" # development, staging, production
  region: "auto-detect"
  
  # Auto-detection and fallback strategy
  deployment:
    autoDetect: true
    strategy: "best-fit" # best-fit, performance, security, cost
    fallbackChain: ["native", "docker", "kubernetes", "hyperlight", "wasm"]
    
  # Resource management
  resources:
    globalLimits:
      maxMemoryGB: 16
      maxCpuCores: 8
      maxNetworkMbps: 1000
      maxStorageGB: 100
    
    allocation:
      strategy: "dynamic" # static, dynamic, adaptive
      reservePercent: 20
      overcommitRatio: 1.5

# Native service deployment
native:
  enabled: true
  priority: 1
  
  # Platform-specific configurations
  platforms:
    windows:
      serviceType: "WindowsService"
      serviceName: "TarsAgentService"
      displayName: "TARS Agent Service"
      description: "TARS Autonomous Reasoning System Agent Service"
      startType: "Automatic"
      account: "LocalSystem"
      dependencies: []
      
      # Installation paths
      paths:
        install: "C:\\Program Files\\TARS"
        data: "C:\\ProgramData\\TARS"
        logs: "C:\\ProgramData\\TARS\\Logs"
        config: "C:\\ProgramData\\TARS\\Config"
        temp: "C:\\ProgramData\\TARS\\Temp"
      
      # Registry settings
      registry:
        rootKey: "HKEY_LOCAL_MACHINE"
        subKey: "SOFTWARE\\TARS\\AgentService"
        
    linux:
      serviceType: "systemd"
      serviceName: "tars-agent"
      description: "TARS Autonomous Reasoning System Agent Service"
      user: "tars"
      group: "tars"
      
      # Installation paths
      paths:
        install: "/opt/tars"
        data: "/var/lib/tars"
        logs: "/var/log/tars"
        config: "/etc/tars"
        temp: "/tmp/tars"
        
      # Systemd configuration
      systemd:
        type: "notify"
        restart: "always"
        restartSec: 10
        killMode: "mixed"
        timeoutStopSec: 30
        
    macos:
      serviceType: "launchd"
      serviceName: "com.tars.agent"
      label: "TARS Agent Service"
      
      # Installation paths
      paths:
        install: "/usr/local/opt/tars"
        data: "/usr/local/var/lib/tars"
        logs: "/usr/local/var/log/tars"
        config: "/usr/local/etc/tars"
        temp: "/tmp/tars"
        
      # Launchd configuration
      launchd:
        runAtLoad: true
        keepAlive: true
        standardOutPath: "/usr/local/var/log/tars/stdout.log"
        standardErrorPath: "/usr/local/var/log/tars/stderr.log"

# Docker deployment
docker:
  enabled: true
  priority: 2
  
  # Base images for different scenarios
  images:
    runtime:
      base: "mcr.microsoft.com/dotnet/runtime:8.0"
      alpine: "mcr.microsoft.com/dotnet/runtime:8.0-alpine"
      ubuntu: "mcr.microsoft.com/dotnet/runtime:8.0-jammy"
      
    development:
      base: "mcr.microsoft.com/dotnet/sdk:8.0"
      
    minimal:
      base: "mcr.microsoft.com/dotnet/runtime-deps:8.0-alpine"
      
  # Container configuration
  container:
    registry: "tars"
    repository: "agent-service"
    tag: "latest"
    
    # Resource limits
    resources:
      memory: "512m"
      cpus: "0.5"
      
    # Networking
    networking:
      mode: "bridge"
      ports:
        - "8080:8080"
        - "8443:8443"
      networks:
        - "tars-network"
        
    # Volumes
    volumes:
      - type: "bind"
        source: "./data"
        target: "/app/data"
      - type: "bind"
        source: "./logs"
        target: "/app/logs"
      - type: "volume"
        source: "tars-config"
        target: "/app/config"
        
    # Environment variables
    environment:
      TARS_ENVIRONMENT: "docker"
      DOTNET_ENVIRONMENT: "Production"
      ASPNETCORE_URLS: "http://+:8080;https://+:8443"
      
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: "30s"
      timeout: "10s"
      retries: 3
      startPeriod: "60s"

# Kubernetes deployment
kubernetes:
  enabled: true
  priority: 3
  
  # Cluster configuration
  cluster:
    namespace: "tars-agents"
    serviceAccount: "tars-agent-sa"
    
  # Deployment specification
  deployment:
    name: "tars-agent-deployment"
    replicas: 3
    strategy:
      type: "RollingUpdate"
      rollingUpdate:
        maxUnavailable: 1
        maxSurge: 1
        
    # Pod specification
    pod:
      labels:
        app: "tars-agent"
        version: "v2.0"
        component: "agent-service"
        
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
        
      # Container specification
      container:
        image: "tars/agent-service:latest"
        imagePullPolicy: "Always"
        
        # Resource requirements
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
            
        # Ports
        ports:
          - name: "http"
            containerPort: 8080
            protocol: "TCP"
          - name: "https"
            containerPort: 8443
            protocol: "TCP"
            
        # Environment variables
        env:
          - name: "TARS_ENVIRONMENT"
            value: "kubernetes"
          - name: "DOTNET_ENVIRONMENT"
            value: "Production"
          - name: "POD_NAME"
            valueFrom:
              fieldRef:
                fieldPath: "metadata.name"
          - name: "POD_NAMESPACE"
            valueFrom:
              fieldRef:
                fieldPath: "metadata.namespace"
                
        # Volume mounts
        volumeMounts:
          - name: "config"
            mountPath: "/app/config"
            readOnly: true
          - name: "data"
            mountPath: "/app/data"
          - name: "logs"
            mountPath: "/app/logs"
            
        # Health checks
        livenessProbe:
          httpGet:
            path: "/health/live"
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          
        readinessProbe:
          httpGet:
            path: "/health/ready"
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          
      # Volumes
      volumes:
        - name: "config"
          configMap:
            name: "tars-agent-config"
        - name: "data"
          persistentVolumeClaim:
            claimName: "tars-agent-data"
        - name: "logs"
          emptyDir: {}
          
  # Service specification
  service:
    name: "tars-agent-service"
    type: "ClusterIP"
    ports:
      - name: "http"
        port: 80
        targetPort: 8080
        protocol: "TCP"
      - name: "https"
        port: 443
        targetPort: 8443
        protocol: "TCP"
        
  # Ingress specification
  ingress:
    enabled: true
    name: "tars-agent-ingress"
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: "/"
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
    hosts:
      - host: "tars-agents.example.com"
        paths:
          - path: "/"
            pathType: "Prefix"
    tls:
      - secretName: "tars-agent-tls"
        hosts:
          - "tars-agents.example.com"

# Hyperlight deployment
hyperlight:
  enabled: true
  priority: 4
  
  # Hyperlight VM configuration
  vm:
    runtime: "hyperlight"
    version: "latest"
    
    # VM specifications
    specs:
      memory: "64MB"
      vcpus: 1
      diskSize: "128MB"
      
    # Security configuration
    security:
      isolation: "micro-vm"
      seccomp: true
      apparmor: true
      readOnlyRootfs: true
      noNewPrivileges: true
      
    # Kernel configuration
    kernel:
      path: "/opt/hyperlight/kernel/vmlinux"
      cmdline: "console=ttyS0 panic=1 pci=off reboot=k"
      
    # Init configuration
    init:
      path: "/opt/hyperlight/init/init"
      args: ["/app/tars-agent"]
      
  # Resource limits
  resources:
    maxInstances: 50
    memoryPerInstance: "64MB"
    cpuPerInstance: "0.1"
    
  # Networking
  networking:
    mode: "tap"
    bridge: "br-hyperlight"
    
  # Storage
  storage:
    type: "overlay"
    baseImage: "/opt/hyperlight/images/tars-base.img"
    overlaySize: "32MB"

# WebAssembly deployment
wasm:
  enabled: true
  priority: 5
  
  # WASM runtime configuration
  runtime:
    engine: "wasmtime"
    version: "latest"
    features: ["wasi", "threads", "simd"]
    
  # Module configuration
  module:
    path: "/app/tars-agent.wasm"
    format: "wasi"
    
    # Resource limits
    limits:
      memory: "32MB"
      maxInstructions: 10000000
      maxTableElements: 1000
      maxMemoryPages: 512
      
    # Allowed capabilities
    capabilities:
      filesystem: ["read", "write"]
      network: ["connect"]
      environment: ["get"]
      
  # Security configuration
  security:
    sandboxed: true
    allowedSyscalls:
      - "fd_read"
      - "fd_write"
      - "clock_time_get"
      - "random_get"
      - "proc_exit"
      
  # Host bindings
  hostBindings:
    directories:
      - guest: "/app/data"
        host: "./data"
        readonly: false
      - guest: "/app/config"
        host: "./config"
        readonly: true
        
    environment:
      TARS_ENVIRONMENT: "wasm"
      WASI_SDK_PATH: "/opt/wasi-sdk"

# Deployment orchestration
orchestration:
  enabled: true
  
  # Deployment strategy
  strategy:
    type: "blue-green" # blue-green, rolling, canary
    
    # Blue-green configuration
    blueGreen:
      autoPromote: false
      scaleDownDelaySeconds: 30
      prePromotionAnalysis:
        templates:
          - templateName: "success-rate"
          - templateName: "latency"
        args:
          - name: "service-name"
            value: "tars-agent-service"
            
    # Rolling update configuration
    rolling:
      maxUnavailable: "25%"
      maxSurge: "25%"
      
    # Canary configuration
    canary:
      steps:
        - setWeight: 20
        - pause: {duration: "1m"}
        - setWeight: 40
        - pause: {duration: "1m"}
        - setWeight: 60
        - pause: {duration: "1m"}
        - setWeight: 80
        - pause: {duration: "1m"}
        
  # Monitoring and observability
  monitoring:
    prometheus:
      enabled: true
      serviceMonitor: true
      
    grafana:
      enabled: true
      dashboards: true
      
    jaeger:
      enabled: true
      tracing: true
      
    logging:
      enabled: true
      aggregation: "fluentd"
      
  # Backup and disaster recovery
  backup:
    enabled: true
    schedule: "0 2 * * *" # Daily at 2 AM
    retention: "30d"
    
    targets:
      - type: "s3"
        bucket: "tars-backups"
        region: "us-west-2"
      - type: "local"
        path: "/backup/tars"
