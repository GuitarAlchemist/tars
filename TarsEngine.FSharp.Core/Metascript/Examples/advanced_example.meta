# Advanced Metascript Example

This is a more advanced example metascript that demonstrates the full capabilities of the metascript system.

```yaml
name: Advanced Example
description: A more advanced example metascript
author: TARS
version: 1.0.0
dependencies: System.Text.Json, Newtonsoft.Json
imports: System, System.IO, System.Text, System.Collections.Generic
```

## Introduction

This metascript demonstrates more advanced features of the metascript system, including:

1. Working with files and directories
2. Using external libraries
3. Defining and using complex data structures
4. Executing commands with parameters
5. Analyzing code
6. Transforming data

## F# Block with Parameters

```fsharp name="setup" description="Setup the environment"
// Define a Person record type
type Person = {
    Id: int
    FirstName: string
    LastName: string
    Age: int
}

// Create a list of people
let people = [
    { Id = 1; FirstName = "John"; LastName = "Doe"; Age = 30 }
    { Id = 2; FirstName = "Jane"; LastName = "Smith"; Age = 25 }
    { Id = 3; FirstName = "Bob"; LastName = "Johnson"; Age = 40 }
    { Id = 4; FirstName = "Alice"; LastName = "Williams"; Age = 35 }
    { Id = 5; FirstName = "Charlie"; LastName = "Brown"; Age = 28 }
]

// Define a function to filter people by age
let filterByAge minAge maxAge (persons: Person list) =
    persons |> List.filter (fun p -> p.Age >= minAge && p.Age <= maxAge)

// Define a function to sort people by a field
let sortBy field (persons: Person list) =
    match field.ToLowerInvariant() with
    | "id" -> persons |> List.sortBy (fun p -> p.Id)
    | "firstname" -> persons |> List.sortBy (fun p -> p.FirstName)
    | "lastname" -> persons |> List.sortBy (fun p -> p.LastName)
    | "age" -> persons |> List.sortBy (fun p -> p.Age)
    | _ -> persons

// Define a function to format a person as a string
let formatPerson (p: Person) =
    sprintf "ID: %d, Name: %s %s, Age: %d" p.Id p.FirstName p.LastName p.Age

// Print the list of people
printfn "People:"
people |> List.iter (formatPerson >> printfn "  %s")

// Return the list of people
people
```

## Working with Files

```fsharp name="file_operations" description="Demonstrate file operations"
// Get the current directory
let currentDir = System.IO.Directory.GetCurrentDirectory()
printfn "Current directory: %s" currentDir

// Create a temporary file
let tempFile = System.IO.Path.Combine(System.IO.Path.GetTempPath(), "metascript_example.txt")
printfn "Temporary file: %s" tempFile

// Write to the file
let content = "This is a test file created by a metascript."
System.IO.File.WriteAllText(tempFile, content)
printfn "Wrote to file: %s" tempFile

// Read from the file
let readContent = System.IO.File.ReadAllText(tempFile)
printfn "Read from file: %s" readContent

// Delete the file
System.IO.File.Delete(tempFile)
printfn "Deleted file: %s" tempFile
```

## Data Transformation

```fsharp name="data_transformation" description="Demonstrate data transformation"
// Filter people by age
let youngPeople = filterByAge 20 30 people
printfn "Young people (20-30):"
youngPeople |> List.iter (formatPerson >> printfn "  %s")

// Sort people by different fields
let sortedById = sortBy "id" people
printfn "Sorted by ID:"
sortedById |> List.iter (formatPerson >> printfn "  %s")

let sortedByAge = sortBy "age" people
printfn "Sorted by Age:"
sortedByAge |> List.iter (formatPerson >> printfn "  %s")

// Transform people to a different format
let peopleMap = 
    people 
    |> List.map (fun p -> 
        (p.Id, {| Name = $"{p.FirstName} {p.LastName}"; Age = p.Age |}))
    |> Map.ofList

printfn "People map:"
peopleMap |> Map.iter (fun id person -> 
    printfn "  %d: %s, %d" id person.Name person.Age)

// Convert to JSON
let jsonOptions = System.Text.Json.JsonSerializerOptions()
jsonOptions.WriteIndented <- true
let json = System.Text.Json.JsonSerializer.Serialize(people, jsonOptions)
printfn "JSON representation:"
printfn "%s" json
```

## Command Execution

```command name="list_files" description="List files in the current directory"
dir
```

## Code Analysis

```analyze language="fsharp" name="code_analysis" description="Analyze F# code"
// This is a sample F# function to analyze
let fibonacci n =
    let rec fib n a b =
        match n with
        | 0 -> a
        | _ -> fib (n - 1) b (a + b)
    fib n 0 1

// Calculate the first 10 Fibonacci numbers
[0..9] |> List.map fibonacci |> printfn "Fibonacci numbers: %A"
```

## Conclusion

This advanced example demonstrates many of the capabilities of the metascript system. You can use these techniques to create powerful metascripts for various purposes, such as:

1. Data processing and transformation
2. Code generation
3. System automation
4. Analysis and reporting
5. Testing and validation

Feel free to modify and extend this example to suit your needs.
