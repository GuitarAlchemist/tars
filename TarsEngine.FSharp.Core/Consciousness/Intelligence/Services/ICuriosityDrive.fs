namespace TarsEngine.FSharp.Core.Consciousness.Intelligence.Services

open System
open System.Threading.Tasks
open TarsEngine.FSharp.Core.Consciousness.Intelligence

/// <summary>
/// Interface for curiosity drive capabilities.
/// </summary>
type ICuriosityDrive =
    /// <summary>
    /// Gets the curiosity level (0.0 to 1.0).
    /// </summary>
    abstract member CuriosityLevel: float

    /// <summary>
    /// Gets the novelty seeking level (0.0 to 1.0).
    /// </summary>
    abstract member NoveltySeekingLevel: float

    /// <summary>
    /// Gets the question generation level (0.0 to 1.0).
    /// </summary>
    abstract member QuestionGenerationLevel: float

    /// <summary>
    /// Gets the exploration level (0.0 to 1.0).
    /// </summary>
    abstract member ExplorationLevel: float

    /// <summary>
    /// Gets the questions.
    /// </summary>
    abstract member Questions: CuriosityQuestion list

    /// <summary>
    /// Gets the explorations.
    /// </summary>
    abstract member Explorations: CuriosityExploration list

    /// <summary>
    /// Gets the information gaps.
    /// </summary>
    abstract member InformationGaps: Map<string, InformationGap>

    /// <summary>
    /// Initializes the curiosity drive.
    /// </summary>
    /// <returns>True if initialization was successful.</returns>
    abstract member InitializeAsync: unit -> Task<bool>

    /// <summary>
    /// Activates the curiosity drive.
    /// </summary>
    /// <returns>True if activation was successful.</returns>
    abstract member ActivateAsync: unit -> Task<bool>

    /// <summary>
    /// Deactivates the curiosity drive.
    /// </summary>
    /// <returns>True if deactivation was successful.</returns>
    abstract member DeactivateAsync: unit -> Task<bool>

    /// <summary>
    /// Updates the curiosity drive.
    /// </summary>
    /// <returns>True if update was successful.</returns>
    abstract member UpdateAsync: unit -> Task<bool>

    /// <summary>
    /// Generates a curiosity question.
    /// </summary>
    /// <returns>The generated question.</returns>
    abstract member GenerateCuriosityQuestionAsync: unit -> Task<CuriosityQuestion option>

    /// <summary>
    /// Generates a question by a specific method.
    /// </summary>
    /// <param name="method">The question generation method.</param>
    /// <returns>The generated question.</returns>
    abstract member GenerateQuestionByMethodAsync: method: QuestionGenerationMethod -> Task<CuriosityQuestion option>

    /// <summary>
    /// Explores a curiosity topic.
    /// </summary>
    /// <param name="topic">The topic.</param>
    /// <returns>The exploration.</returns>
    abstract member ExploreCuriosityTopicAsync: topic: string -> Task<CuriosityExploration option>

    /// <summary>
    /// Answers a curiosity question.
    /// </summary>
    /// <param name="questionId">The question ID.</param>
    /// <param name="answer">The answer.</param>
    /// <param name="satisfaction">The satisfaction (0.0 to 1.0).</param>
    /// <returns>The updated question.</returns>
    abstract member AnswerQuestionAsync: questionId: string * answer: string * satisfaction: float -> Task<CuriosityQuestion option>

    /// <summary>
    /// Gets recent questions.
    /// </summary>
    /// <param name="count">The number of questions to get.</param>
    /// <returns>The recent questions.</returns>
    abstract member GetRecentQuestions: count: int -> CuriosityQuestion list

    /// <summary>
    /// Gets questions by method.
    /// </summary>
    /// <param name="method">The question generation method.</param>
    /// <param name="count">The number of questions to get.</param>
    /// <returns>The questions generated by the specified method.</returns>
    abstract member GetQuestionsByMethod: method: QuestionGenerationMethod * count: int -> CuriosityQuestion list

    /// <summary>
    /// Gets questions by domain.
    /// </summary>
    /// <param name="domain">The domain.</param>
    /// <param name="count">The number of questions to get.</param>
    /// <returns>The questions in the domain.</returns>
    abstract member GetQuestionsByDomain: domain: string * count: int -> CuriosityQuestion list

    /// <summary>
    /// Gets the most important questions.
    /// </summary>
    /// <param name="count">The number of questions to get.</param>
    /// <returns>The most important questions.</returns>
    abstract member GetMostImportantQuestions: count: int -> CuriosityQuestion list

    /// <summary>
    /// Gets recent explorations.
    /// </summary>
    /// <param name="count">The number of explorations to get.</param>
    /// <returns>The recent explorations.</returns>
    abstract member GetRecentExplorations: count: int -> CuriosityExploration list

    /// <summary>
    /// Gets explorations by strategy.
    /// </summary>
    /// <param name="strategy">The exploration strategy.</param>
    /// <param name="count">The number of explorations to get.</param>
    /// <returns>The explorations using the specified strategy.</returns>
    abstract member GetExplorationsByStrategy: strategy: ExplorationStrategy * count: int -> CuriosityExploration list

    /// <summary>
    /// Gets explorations by topic.
    /// </summary>
    /// <param name="topic">The topic.</param>
    /// <param name="count">The number of explorations to get.</param>
    /// <returns>The explorations on the topic.</returns>
    abstract member GetExplorationsByTopic: topic: string * count: int -> CuriosityExploration list

    /// <summary>
    /// Gets the most satisfying explorations.
    /// </summary>
    /// <param name="count">The number of explorations to get.</param>
    /// <returns>The most satisfying explorations.</returns>
    abstract member GetMostSatisfyingExplorations: count: int -> CuriosityExploration list

    /// <summary>
    /// Adds an information gap.
    /// </summary>
    /// <param name="domain">The domain.</param>
    /// <param name="description">The description.</param>
    /// <param name="gapSize">The gap size (0.0 to 1.0).</param>
    /// <param name="importance">The importance (0.0 to 1.0).</param>
    /// <returns>The added information gap.</returns>
    abstract member AddInformationGapAsync: domain: string * description: string * gapSize: float * importance: float -> Task<InformationGap>
