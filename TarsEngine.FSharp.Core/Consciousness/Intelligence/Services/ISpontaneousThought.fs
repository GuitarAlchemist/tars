namespace TarsEngine.FSharp.Core.Consciousness.Intelligence.Services

open System
open System.Threading.Tasks
open TarsEngine.FSharp.Core.Consciousness.Intelligence

/// <summary>
/// Interface for spontaneous thought capabilities.
/// </summary>
type ISpontaneousThought =
    /// <summary>
    /// Gets the spontaneity level (0.0 to 1.0).
    /// </summary>
    abstract member SpontaneityLevel: float

    /// <summary>
    /// Gets the random thought level (0.0 to 1.0).
    /// </summary>
    abstract member RandomThoughtLevel: float

    /// <summary>
    /// Gets the associative jumping level (0.0 to 1.0).
    /// </summary>
    abstract member AssociativeJumpingLevel: float

    /// <summary>
    /// Gets the mind wandering level (0.0 to 1.0).
    /// </summary>
    abstract member MindWanderingLevel: float

    /// <summary>
    /// Gets the thoughts.
    /// </summary>
    abstract member Thoughts: ThoughtModel list

    /// <summary>
    /// Initializes the spontaneous thought.
    /// </summary>
    /// <returns>True if initialization was successful.</returns>
    abstract member InitializeAsync: unit -> Task<bool>

    /// <summary>
    /// Activates the spontaneous thought.
    /// </summary>
    /// <returns>True if activation was successful.</returns>
    abstract member ActivateAsync: unit -> Task<bool>

    /// <summary>
    /// Deactivates the spontaneous thought.
    /// </summary>
    /// <returns>True if deactivation was successful.</returns>
    abstract member DeactivateAsync: unit -> Task<bool>

    /// <summary>
    /// Updates the spontaneous thought.
    /// </summary>
    /// <returns>True if update was successful.</returns>
    abstract member UpdateAsync: unit -> Task<bool>

    /// <summary>
    /// Generates a spontaneous thought.
    /// </summary>
    /// <returns>The generated thought.</returns>
    abstract member GenerateSpontaneousThoughtAsync: unit -> Task<ThoughtModel option>

    /// <summary>
    /// Generates a thought by a specific method.
    /// </summary>
    /// <param name="method">The thought generation method.</param>
    /// <returns>The generated thought.</returns>
    abstract member GenerateThoughtByMethodAsync: method: ThoughtGenerationMethod -> Task<ThoughtModel option>

    /// <summary>
    /// Gets recent thoughts.
    /// </summary>
    /// <param name="count">The number of thoughts to get.</param>
    /// <returns>The recent thoughts.</returns>
    abstract member GetRecentThoughts: count: int -> ThoughtModel list

    /// <summary>
    /// Gets thoughts by method.
    /// </summary>
    /// <param name="method">The thought generation method.</param>
    /// <param name="count">The number of thoughts to get.</param>
    /// <returns>The thoughts generated by the specified method.</returns>
    abstract member GetThoughtsByMethod: method: ThoughtGenerationMethod * count: int -> ThoughtModel list

    /// <summary>
    /// Gets thoughts by tag.
    /// </summary>
    /// <param name="tag">The tag.</param>
    /// <param name="count">The number of thoughts to get.</param>
    /// <returns>The thoughts with the tag.</returns>
    abstract member GetThoughtsByTag: tag: string * count: int -> ThoughtModel list

    /// <summary>
    /// Gets the most significant thoughts.
    /// </summary>
    /// <param name="count">The number of thoughts to get.</param>
    /// <returns>The most significant thoughts.</returns>
    abstract member GetMostSignificantThoughts: count: int -> ThoughtModel list

    /// <summary>
    /// Gets the most original thoughts.
    /// </summary>
    /// <param name="count">The number of thoughts to get.</param>
    /// <returns>The most original thoughts.</returns>
    abstract member GetMostOriginalThoughts: count: int -> ThoughtModel list

    /// <summary>
    /// Gets the most coherent thoughts.
    /// </summary>
    /// <param name="count">The number of thoughts to get.</param>
    /// <returns>The most coherent thoughts.</returns>
    abstract member GetMostCoherentThoughts: count: int -> ThoughtModel list

    /// <summary>
    /// Marks a thought as leading to an insight.
    /// </summary>
    /// <param name="thoughtId">The thought ID.</param>
    /// <param name="insightId">The insight ID.</param>
    /// <returns>The updated thought.</returns>
    abstract member MarkThoughtAsInsightfulAsync: thoughtId: string * insightId: string -> Task<ThoughtModel option>
