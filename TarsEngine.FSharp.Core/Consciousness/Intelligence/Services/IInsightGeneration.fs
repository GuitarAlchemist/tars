namespace TarsEngine.FSharp.Core.Consciousness.Intelligence.Services

open System
open System.Threading.Tasks
open TarsEngine.FSharp.Core.Consciousness.Intelligence

/// <summary>
/// Interface for insight generation capabilities.
/// </summary>
type IInsightGeneration =
    /// <summary>
    /// Gets the insight level (0.0 to 1.0).
    /// </summary>
    abstract member InsightLevel: float

    /// <summary>
    /// Gets the connection discovery level (0.0 to 1.0).
    /// </summary>
    abstract member ConnectionDiscoveryLevel: float

    /// <summary>
    /// Gets the problem restructuring level (0.0 to 1.0).
    /// </summary>
    abstract member ProblemRestructuringLevel: float

    /// <summary>
    /// Gets the incubation level (0.0 to 1.0).
    /// </summary>
    abstract member IncubationLevel: float

    /// <summary>
    /// Gets the insights.
    /// </summary>
    abstract member Insights: Insight list

    /// <summary>
    /// Gets the concept connections.
    /// </summary>
    abstract member ConceptConnections: Map<string, string list>

    /// <summary>
    /// Initializes the insight generation.
    /// </summary>
    /// <returns>True if initialization was successful.</returns>
    abstract member InitializeAsync: unit -> Task<bool>

    /// <summary>
    /// Activates the insight generation.
    /// </summary>
    /// <returns>True if activation was successful.</returns>
    abstract member ActivateAsync: unit -> Task<bool>

    /// <summary>
    /// Deactivates the insight generation.
    /// </summary>
    /// <returns>True if deactivation was successful.</returns>
    abstract member DeactivateAsync: unit -> Task<bool>

    /// <summary>
    /// Updates the insight generation.
    /// </summary>
    /// <returns>True if update was successful.</returns>
    abstract member UpdateAsync: unit -> Task<bool>

    /// <summary>
    /// Generates an insight.
    /// </summary>
    /// <returns>The generated insight.</returns>
    abstract member GenerateInsightAsync: unit -> Task<Insight option>

    /// <summary>
    /// Generates an insight by a specific method.
    /// </summary>
    /// <param name="method">The insight generation method.</param>
    /// <returns>The generated insight.</returns>
    abstract member GenerateInsightByMethodAsync: method: InsightGenerationMethod -> Task<Insight option>

    /// <summary>
    /// Connects ideas for an insight.
    /// </summary>
    /// <param name="ideas">The ideas.</param>
    /// <returns>The insight.</returns>
    abstract member ConnectIdeasForInsightAsync: ideas: string list -> Task<Insight option>

    /// <summary>
    /// Restructures a problem for an insight.
    /// </summary>
    /// <param name="problem">The problem.</param>
    /// <returns>The insight.</returns>
    abstract member RestructureProblemForInsightAsync: problem: string -> Task<Insight option>

    /// <summary>
    /// Gets recent insights.
    /// </summary>
    /// <param name="count">The number of insights to get.</param>
    /// <returns>The recent insights.</returns>
    abstract member GetRecentInsights: count: int -> Insight list

    /// <summary>
    /// Gets insights by method.
    /// </summary>
    /// <param name="method">The insight generation method.</param>
    /// <param name="count">The number of insights to get.</param>
    /// <returns>The insights generated by the specified method.</returns>
    abstract member GetInsightsByMethod: method: InsightGenerationMethod * count: int -> Insight list

    /// <summary>
    /// Gets insights by tag.
    /// </summary>
    /// <param name="tag">The tag.</param>
    /// <param name="count">The number of insights to get.</param>
    /// <returns>The insights with the tag.</returns>
    abstract member GetInsightsByTag: tag: string * count: int -> Insight list

    /// <summary>
    /// Gets the most significant insights.
    /// </summary>
    /// <param name="count">The number of insights to get.</param>
    /// <returns>The most significant insights.</returns>
    abstract member GetMostSignificantInsights: count: int -> Insight list

    /// <summary>
    /// Adds a concept connection.
    /// </summary>
    /// <param name="concept1">The first concept.</param>
    /// <param name="concept2">The second concept.</param>
    /// <returns>True if the connection was added.</returns>
    abstract member AddConceptConnectionAsync: concept1: string * concept2: string -> Task<bool>

    /// <summary>
    /// Gets connected concepts.
    /// </summary>
    /// <param name="concept">The concept.</param>
    /// <returns>The connected concepts.</returns>
    abstract member GetConnectedConcepts: concept: string -> string list

    /// <summary>
    /// Calculates the concept distance.
    /// </summary>
    /// <param name="concept1">The first concept.</param>
    /// <param name="concept2">The second concept.</param>
    /// <returns>The concept distance (0.0 to 1.0).</returns>
    abstract member CalculateConceptDistance: concept1: string * concept2: string -> float
