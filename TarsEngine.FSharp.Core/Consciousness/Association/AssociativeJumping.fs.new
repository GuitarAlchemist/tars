namespace TarsEngine.FSharp.Core.Consciousness.Association

open System
open System.Threading.Tasks
open Microsoft.Extensions.Logging
open TarsEngine.FSharp.Core.Consciousness.Association

/// <summary>
/// Implements associative jumping capabilities for spontaneous thought.
/// </summary>
type AssociativeJumping(logger: ILogger<AssociativeJumping>) =
    // Random number generator for simulating associative jumps
    let random = System.Random()
    
    // Associative jumping level (0.0 to 1.0)
    let mutable associativeJumpingLevel = 0.5 // Starting with moderate associative jumping
    
    // Associative network: concept -> (related concept -> strength)
    let associativeNetwork = System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, float>>()
    
    // Concept categories: concept -> category
    let conceptCategories = System.Collections.Generic.Dictionary<string, string>()
    
    /// <summary>
    /// Gets the associative jumping level (0.0 to 1.0).
    /// </summary>
    member _.AssociativeJumpingLevel = associativeJumpingLevel
    
    /// <summary>
    /// Initializes the associative network.
    /// </summary>
    member private _.InitializeAssociativeNetwork() =
        // Add programming concepts and associations
        let programmingConcepts = [
            "algorithm"; "pattern"; "abstraction"; "modularity"; "encapsulation";
            "inheritance"; "polymorphism"; "recursion"; "iteration"; "parallelism"
        ]
        
        // Add AI concepts and associations
        let aiConcepts = [
            "neural network"; "machine learning"; "deep learning"; "reinforcement learning";
            "supervised learning"; "unsupervised learning"; "natural language processing";
            "computer vision"; "generative AI"; "transformer"
        ]
        
        // Add philosophical concepts and associations
        let philosophicalConcepts = [
            "consciousness"; "free will"; "determinism"; "epistemology"; "ontology";
            "ethics"; "aesthetics"; "metaphysics"; "logic"; "rationality"
        ]
        
        // Add concepts to the network
        for concept in programmingConcepts do
            this.AddConcept(concept, "Programming")
        
        for concept in aiConcepts do
            this.AddConcept(concept, "AI")
        
        for concept in philosophicalConcepts do
            this.AddConcept(concept, "Philosophy")
        
        // Add associations between programming concepts
        this.AddAssociation("algorithm", "pattern", 0.7)
        this.AddAssociation("algorithm", "recursion", 0.6)
        this.AddAssociation("algorithm", "iteration", 0.8)
        this.AddAssociation("pattern", "abstraction", 0.5)
        this.AddAssociation("abstraction", "modularity", 0.7)
        this.AddAssociation("modularity", "encapsulation", 0.8)
        this.AddAssociation("inheritance", "polymorphism", 0.9)
        this.AddAssociation("recursion", "iteration", 0.7)
        this.AddAssociation("parallelism", "iteration", 0.6)
        
        // Add associations between AI concepts
        this.AddAssociation("neural network", "deep learning", 0.9)
        this.AddAssociation("machine learning", "supervised learning", 0.8)
        this.AddAssociation("machine learning", "unsupervised learning", 0.8)
        this.AddAssociation("deep learning", "transformer", 0.7)
        this.AddAssociation("reinforcement learning", "supervised learning", 0.5)
        this.AddAssociation("natural language processing", "transformer", 0.8)
        this.AddAssociation("computer vision", "deep learning", 0.8)
        this.AddAssociation("generative AI", "transformer", 0.7)
        
        // Add associations between philosophical concepts
        this.AddAssociation("consciousness", "free will", 0.8)
        this.AddAssociation("free will", "determinism", 0.9)
        this.AddAssociation("epistemology", "ontology", 0.7)
        this.AddAssociation("metaphysics", "ontology", 0.8)
        this.AddAssociation("logic", "rationality", 0.9)
        this.AddAssociation("ethics", "free will", 0.7)
        this.AddAssociation("consciousness", "metaphysics", 0.6)
        
        // Add cross-domain associations
        this.AddAssociation("neural network", "consciousness", 0.4)
        this.AddAssociation("machine learning", "determinism", 0.3)
        this.AddAssociation("algorithm", "logic", 0.6)
        this.AddAssociation("pattern", "ontology", 0.3)
        this.AddAssociation("abstraction", "metaphysics", 0.4)
        this.AddAssociation("natural language processing", "consciousness", 0.3)
        
        logger.LogInformation("Initialized associative network with {ConceptCount} concepts and {AssociationCount} associations",
            associativeNetwork.Count, associativeNetwork |> Seq.sumBy (fun c -> c.Value.Count))
    
    /// <summary>
    /// Initializes a new instance of the <see cref="AssociativeJumping"/> class.
    /// </summary>
    do
        logger.LogInformation("Initializing AssociativeJumping")
        this.InitializeAssociativeNetwork()
    
    /// <summary>
    /// Updates the associative jumping level.
    /// </summary>
    /// <returns>True if the update was successful, false otherwise.</returns>
    member _.Update() =
        try
            // Gradually increase associative jumping level over time (very slowly)
            if associativeJumpingLevel < 0.95 then
                associativeJumpingLevel <- associativeJumpingLevel + 0.0001 * random.NextDouble()
                associativeJumpingLevel <- Math.Min(associativeJumpingLevel, 1.0)
            
            true
        with
        | ex ->
            logger.LogError(ex, "Error updating associative jumping")
            false
    
    /// <summary>
    /// Adds a concept to the associative network.
    /// </summary>
    /// <param name="concept">The concept.</param>
    /// <param name="category">The category.</param>
    member _.AddConcept(concept: string, category: string) =
        if not (associativeNetwork.ContainsKey(concept)) then
            associativeNetwork.[concept] <- System.Collections.Generic.Dictionary<string, float>()
            conceptCategories.[concept] <- category
            
            logger.LogDebug("Added concept to associative network: {Concept} in category {Category}", concept, category)
    
    /// <summary>
    /// Adds an association between two concepts.
    /// </summary>
    /// <param name="concept1">The first concept.</param>
    /// <param name="concept2">The second concept.</param>
    /// <param name="strength">The association strength.</param>
    member _.AddAssociation(concept1: string, concept2: string, strength: float) =
        // Ensure both concepts exist
        if not (associativeNetwork.ContainsKey(concept1)) then
            this.AddConcept(concept1, "Unknown")
        
        if not (associativeNetwork.ContainsKey(concept2)) then
            this.AddConcept(concept2, "Unknown")
        
        // Add bidirectional association
        associativeNetwork.[concept1].[concept2] <- strength
        associativeNetwork.[concept2].[concept1] <- strength
        
        logger.LogDebug("Added association: {Concept1} <-> {Concept2} with strength {Strength:F2}",
            concept1, concept2, strength)
    
    /// <summary>
    /// Gets a random concept from the associative network.
    /// </summary>
    /// <param name="category">The category (optional).</param>
    /// <returns>The random concept.</returns>
    member _.GetRandomConcept(?category: string) =
        match category with
        | Some cat ->
            let conceptsInCategory = 
                conceptCategories 
                |> Seq.filter (fun kvp -> kvp.Value = cat) 
                |> Seq.map (fun kvp -> kvp.Key)
                |> Seq.toList
            
            if not (List.isEmpty conceptsInCategory) then
                conceptsInCategory.[random.Next(conceptsInCategory.Length)]
            else
                let concepts = associativeNetwork.Keys |> Seq.toList
                concepts.[random.Next(concepts.Length)]
        | None ->
            let concepts = associativeNetwork.Keys |> Seq.toList
            concepts.[random.Next(concepts.Length)]
    
    /// <summary>
    /// Gets the associated concepts for a concept.
    /// </summary>
    /// <param name="concept">The concept.</param>
    /// <param name="minStrength">The minimum association strength.</param>
    /// <returns>The associated concepts.</returns>
    member _.GetAssociatedConcepts(concept: string, ?minStrength: float) =
        let minStr = defaultArg minStrength 0.0
        
        if not (associativeNetwork.ContainsKey(concept)) then
            Map.empty
        else
            associativeNetwork.[concept]
            |> Seq.filter (fun kvp -> kvp.Value >= minStr)
            |> Seq.map (fun kvp -> (kvp.Key, kvp.Value))
            |> Map.ofSeq
    
    /// <summary>
    /// Performs an associative jump from a concept.
    /// </summary>
    /// <param name="startConcept">The start concept.</param>
    /// <param name="jumpDistance">The jump distance.</param>
    /// <returns>The jump path.</returns>
    member _.PerformAssociativeJump(startConcept: string, jumpDistance: int) =
        let jumpPath = ResizeArray<string>([startConcept])
        
        try
            let mutable currentConcept = startConcept
            
            for i = 0 to jumpDistance - 1 do
                // Get associated concepts
                let associations = this.GetAssociatedConcepts(currentConcept)
                
                if Map.isEmpty associations then
                    ()
                else
                    // Choose next concept based on association strength
                    let nextConcept =
                        // Occasionally make an unexpected jump
                        if random.NextDouble() < 0.2 * associativeJumpingLevel then
                            // Choose a random concept that's not already in the path
                            let availableConcepts = 
                                associativeNetwork.Keys 
                                |> Seq.filter (fun c -> not (jumpPath.Contains(c)))
                                |> Seq.toList
                            
                            if not (List.isEmpty availableConcepts) then
                                availableConcepts.[random.Next(availableConcepts.Length)]
                            else
                                currentConcept // Stay at current concept if no other options
                        else
                            // Choose based on association strength, but avoid cycles
                            let availableAssociations = 
                                associations 
                                |> Map.filter (fun k _ -> not (jumpPath.Contains(k)))
                                |> Map.toList
                            
                            if List.isEmpty availableAssociations then
                                currentConcept // Stay at current concept if no other options
                            else
                                // Choose with probability proportional to association strength
                                let totalStrength = availableAssociations |> List.sumBy snd
                                let randomValue = random.NextDouble() * totalStrength
                                
                                // Use a fold to find the concept that exceeds the random value
                                availableAssociations
                                |> List.fold (fun (found, cumStrength, chosenConcept) (concept, strength) ->
                                    if found then
                                        (found, cumStrength, chosenConcept)
                                    else
                                        let newCumStrength = cumStrength + strength
                                        if newCumStrength >= randomValue then
                                            (true, newCumStrength, concept)
                                        else
                                            (false, newCumStrength, chosenConcept)
                                ) (false, 0.0, (fst (List.last availableAssociations)))
                                |> fun (_, _, result) -> result
                    
                    // Add to jump path
                    jumpPath.Add(nextConcept)
                    currentConcept <- nextConcept
            
            logger.LogDebug("Performed associative jump from {StartConcept} with distance {JumpDistance}, path: {JumpPath}",
                startConcept, jumpDistance, String.Join(" -> ", jumpPath))
        with
        | ex ->
            logger.LogError(ex, "Error performing associative jump")
        
        jumpPath |> Seq.toList
    
    /// <summary>
    /// Calculates the unexpectedness of a jump path.
    /// </summary>
    /// <param name="jumpPath">The jump path.</param>
    /// <returns>The unexpectedness (0.0 to 1.0).</returns>
    member _.CalculateUnexpectedness(jumpPath: string list) =
        if List.length jumpPath < 2 then
            0.0
        else
            try
                // Calculate average association strength along the path
                let mutable totalStrength = 0.0
                let mutable connections = 0
                
                for i = 0 to jumpPath.Length - 2 do
                    let concept1 = jumpPath.[i]
                    let concept2 = jumpPath.[i + 1]
                    
                    if associativeNetwork.ContainsKey(concept1) && associativeNetwork.[concept1].ContainsKey(concept2) then
                        totalStrength <- totalStrength + associativeNetwork.[concept1].[concept2]
                        connections <- connections + 1
                
                let avgStrength = if connections > 0 then totalStrength / float connections else 0.0
                
                // Calculate category diversity
                let categories = 
                    jumpPath 
                    |> List.filter (fun c -> conceptCategories.ContainsKey(c))
                    |> List.map (fun c -> conceptCategories.[c])
                    |> List.distinct
                    |> List.length
                
                let categoryDiversity = Math.Min(1.0, float categories / 3.0)
                
                // Calculate unexpectedness (lower average strength and higher diversity = more unexpected)
                let unexpectedness = ((1.0 - avgStrength) * 0.7) + (categoryDiversity * 0.3)
                
                unexpectedness
            with
            | ex ->
                logger.LogError(ex, "Error calculating unexpectedness")
                0.5 // Default value
    
    /// <summary>
    /// Generates an associative thought.
    /// </summary>
    /// <param name="serendipityLevel">The serendipity level.</param>
    /// <returns>The generated thought.</returns>
    member _.GenerateAssociativeThought(serendipityLevel: float) =
        try
            logger.LogDebug("Generating associative thought")
            
            // Choose a random starting concept
            let startConcept = this.GetRandomConcept()
            
            // Determine jump distance based on associative jumping level
            let jumpDistance = 2 + int (associativeJumpingLevel * 3.0)
            
            // Perform associative jump
            let jumpPath = this.PerformAssociativeJump(startConcept, jumpDistance)
            
            // Calculate unexpectedness
            let unexpectedness = this.CalculateUnexpectedness(jumpPath)
            
            // Generate thought content
            let content =
                if List.length jumpPath >= 3 then
                    sprintf "I see an interesting connection between %s and %s through %s"
                        jumpPath.[0]
                        jumpPath.[List.length jumpPath - 1]
                        (String.Join(", ", jumpPath |> List.skip 1 |> List.take (List.length jumpPath - 2)))
                elif List.length jumpPath = 2 then
                    sprintf "I'm noticing a connection between %s and %s that seems significant"
                        jumpPath.[0]
                        jumpPath.[1]
                else
                    sprintf "I'm thinking deeply about %s and its implications"
                        jumpPath.[0]
            
            // Calculate significance based on jump distance and unexpectedness
            let significance = Math.Min(1.0, (0.3 + (0.1 * float jumpDistance) + (0.2 * unexpectedness)) * associativeJumpingLevel)
            
            // Determine if this is a serendipitous thought
            let isSerendipitous = unexpectedness > 0.7 && random.NextDouble() < serendipityLevel
            
            // If serendipitous, increase significance and modify content
            let (finalContent, finalSignificance) =
                if isSerendipitous then
                    let newContent = sprintf "I just had an unexpected insight about the connection between %s and %s!"
                                        jumpPath.[0]
                                        jumpPath.[List.length jumpPath - 1]
                    let newSignificance = Math.Min(1.0, significance + 0.3)
                    (newContent, newSignificance)
                else
                    (content, significance)
            
            // Calculate originality based on unexpectedness
            let originality = 0.3 + (0.7 * unexpectedness)
            
            // Calculate coherence based on average association strength
            let coherence = 0.4 + (0.6 * (1.0 - unexpectedness))
            
            // Get categories for tags
            let categories = 
                jumpPath 
                |> List.filter (fun c -> conceptCategories.ContainsKey(c))
                |> List.map (fun c -> conceptCategories.[c])
                |> List.distinct
            
            // Create context
            let context = Map.ofList [
                "JumpPath", box jumpPath
                "StartConcept", box jumpPath.[0]
                "EndConcept", box jumpPath.[List.length jumpPath - 1]
                "Unexpectedness", box unexpectedness
                "IsSerendipitous", box isSerendipitous
            ]
            
            // Create tags
            let tags = 
                List.concat [
                    jumpPath
                    categories
                    ["associative"]
                    [if isSerendipitous then "serendipitous" else "ordinary"]
                ]
            
            // Create thought model
            let thought = {
                Id = Guid.NewGuid().ToString()
                Content = finalContent
                Method = ThoughtGenerationMethod.AssociativeJumping
                Significance = finalSignificance
                Timestamp = DateTime.UtcNow
                Context = context
                Tags = tags
                Source = "AssociativeJumping"
                Category = List.tryHead categories |> Option.defaultValue "General"
                Impact = ""
                ImpactLevel = 0.0
                FollowUp = ""
                RelatedThoughtIds = []
                LedToInsight = false
                InsightId = None
                Originality = originality
                Coherence = coherence
            }
            
            logger.LogInformation("Generated associative thought: {Content} (Significance: {Significance:F2})",
                thought.Content, thought.Significance)
            
            thought
        with
        | ex ->
            logger.LogError(ex, "Error generating associative thought")
            
            // Return basic thought
            {
                Id = Guid.NewGuid().ToString()
                Content = "I had an associative thought but can't quite articulate it"
                Method = ThoughtGenerationMethod.AssociativeJumping
                Significance = 0.3
                Timestamp = DateTime.UtcNow
                Context = Map.empty
                Tags = []
                Source = "AssociativeJumping"
                Category = "General"
                Impact = ""
                ImpactLevel = 0.0
                FollowUp = ""
                RelatedThoughtIds = []
                LedToInsight = false
                InsightId = None
                Originality = 0.5
                Coherence = 0.5
            }
    
    /// <summary>
    /// Generates multiple associative thoughts.
    /// </summary>
    /// <param name="count">The number of thoughts to generate.</param>
    /// <param name="serendipityLevel">The serendipity level.</param>
    /// <returns>The generated thoughts.</returns>
    member _.GenerateAssociativeThoughts(count: int, serendipityLevel: float) =
        [
            for _ in 1 .. count do
                yield this.GenerateAssociativeThought(serendipityLevel)
        ]
    
    /// <summary>
    /// Evaluates the quality of an associative thought.
    /// </summary>
    /// <param name="thought">The thought to evaluate.</param>
    /// <returns>The evaluation score (0.0 to 1.0).</returns>
    member _.EvaluateThought(thought: ThoughtModel) =
        try
            // Check if thought is from this source
            if thought.Method <> ThoughtGenerationMethod.AssociativeJumping then
                0.5 // Neutral score for thoughts from other sources
            else
                // Get unexpectedness from context
                let unexpectedness = 
                    match thought.Context.TryFind "Unexpectedness" with
                    | Some value -> unbox<float> value
                    | None -> 0.5
                
                // Get jump path from context
                let jumpPath = 
                    match thought.Context.TryFind "JumpPath" with
                    | Some value -> unbox<string list> value
                    | None -> []
                
                // Calculate novelty based on unexpectedness
                let novelty = unexpectedness
                
                // Calculate interestingness based on jump path length and significance
                let interestingness = 
                    if not (List.isEmpty jumpPath) then
                        Math.Min(1.0, (float (List.length jumpPath) / 5.0) * thought.Significance)
                    else
                        thought.Significance
                
                // Calculate potential based on serendipity
                let isSerendipitous = List.contains "serendipitous" thought.Tags
                let potential = if isSerendipitous then 0.8 else 0.5
                
                // Calculate overall score
                let score = (novelty * 0.3) + (interestingness * 0.4) + (potential * 0.3)
                
                score
        with
        | ex ->
            logger.LogError(ex, "Error evaluating thought")
            0.5 // Default score
