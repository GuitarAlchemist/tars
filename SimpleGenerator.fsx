#!/usr/bin/env dotnet fsi

open System
open System.IO

printfn "🎯 SIMPLE GENERATOR - ATTEMPT 2"
printfn "==============================="

let timestamp = DateTime.Now.ToString("yyyyMMdd_HHmmss")
let projectName = "TaskManager_" + timestamp
let projectDir = Path.Combine(".tars", "projects", projectName)

printfn "📁 Creating: %s" projectDir
Directory.CreateDirectory(projectDir) |> ignore
Directory.CreateDirectory(Path.Combine(projectDir, "src")) |> ignore

let programCode = """open System

type Task = { Id: int; Title: string; Done: bool }

let mutable tasks = []

let addTask title =
    let id = List.length tasks + 1
    let task = { Id = id; Title = title; Done = false }
    tasks <- task :: tasks
    printfn "✅ Added: %s" title

let showTasks () =
    printfn "📋 Tasks:"
    tasks |> List.iter (fun t ->
        let status = if t.Done then "✅" else "⏳"
        printfn "  %s %d. %s" status t.Id t.Title)

[<EntryPoint>]
let main argv =
    printfn "🚀 TASK MANAGER"
    printfn "==============="
    
    addTask "Write code"
    addTask "Test code"
    addTask "Deploy code"
    
    showTasks()
    
    printfn ""
    printfn "✅ TARS generated working code!"
    0
"""

let projectFile = """<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net8.0</TargetFramework>
  </PropertyGroup>
  <ItemGroup>
    <Compile Include="src/Program.fs" />
  </ItemGroup>
</Project>"""

printfn "💾 Writing files..."
File.WriteAllText(Path.Combine(projectDir, "src", "Program.fs"), programCode)
File.WriteAllText(Path.Combine(projectDir, projectName + ".fsproj"), projectFile)

let readme = "# " + projectName + "\n\nGenerated by TARS\n\n## Usage\n```\ndotnet run\n```"
File.WriteAllText(Path.Combine(projectDir, "README.md"), readme)

printfn "🎉 SUCCESS! Generated: %s" projectDir
printfn "🚀 To run: cd %s && dotnet run" projectDir
