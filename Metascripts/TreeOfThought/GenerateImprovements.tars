DESCRIBE {
    name: "Tree-of-Thought Generate Improvements"
    description: "A metascript for generating improvements using Tree-of-Thought reasoning"
    version: "1.0.0"
    author: "TARS Auto-Improvement"
}

// Define input variables
VARIABLE issue {
    type: "string"
    description: "The issue to address"
}

VARIABLE code {
    type: "string"
    description: "The code to improve"
}

// Generate improvements function
FUNCTION generate_improvements {
    input: "${issue},${code}"
    output: "Improvements for ${issue}"
    
    CSHARP {
        var issue = "${issue}";
        var code = @"${code}";
        
        // Parse the issue to determine the improvement type
        var improvementType = "unknown";
        if (issue.Contains("performance"))
        {
            improvementType = "performance";
        }
        else if (issue.Contains("error_handling") || issue.Contains("error handling"))
        {
            improvementType = "error_handling";
        }
        else if (issue.Contains("maintainability"))
        {
            improvementType = "maintainability";
        }
        
        // Generate improvements based on the improvement type
        var improvements = new List<string>();
        
        if (improvementType == "performance")
        {
            // Check for string concatenation in loops
            if (code.Contains("+=") && code.Contains("string") && 
                (code.Contains("for (") || code.Contains("foreach (") || code.Contains("while (")))
            {
                improvements.Add("Replace string concatenation with StringBuilder to improve performance in loops");
            }
            
            // Check for LINQ operations in loops
            if ((code.Contains(".Where(") || code.Contains(".Select(") || code.Contains(".OrderBy(")) && 
                (code.Contains("for (") || code.Contains("foreach (") || code.Contains("while (")))
            {
                improvements.Add("Move LINQ operations outside of loops to avoid redundant computations");
            }
            
            // Check for unnecessary object creation in loops
            if (code.Contains("new ") && 
                (code.Contains("for (") || code.Contains("foreach (") || code.Contains("while (")))
            {
                improvements.Add("Reduce unnecessary object creation in loops to minimize garbage collection");
            }
            
            // Check for inefficient data structures
            if (code.Contains("List<") && code.Contains(".Contains("))
            {
                improvements.Add("Replace List with HashSet for faster lookups when using Contains");
            }
            
            // Check for inefficient string operations
            if (code.Contains("string.Split") && code.Contains("for ("))
            {
                improvements.Add("Cache the results of string.Split to avoid redundant splitting operations");
            }
        }
        else if (improvementType == "error_handling")
        {
            // Check for missing null checks
            if (code.Contains("public") && code.Contains("(") && !code.Contains("if (") && !code.Contains("== null"))
            {
                improvements.Add("Add null checks for parameters to prevent NullReferenceException");
            }
            
            // Check for potential division by zero
            if (code.Contains("/") && !code.Contains("if (") && !code.Contains("== 0"))
            {
                improvements.Add("Add checks for division by zero to prevent DivideByZeroException");
            }
            
            // Check for missing try-catch blocks
            if (!code.Contains("try") && !code.Contains("catch"))
            {
                improvements.Add("Add try-catch blocks to handle potential exceptions");
            }
            
            // Check for missing validation
            if (code.Contains("public") && code.Contains("(") && !code.Contains("if (") && !code.Contains("throw new"))
            {
                improvements.Add("Add input validation to ensure parameters meet expected criteria");
            }
            
            // Check for missing logging
            if (!code.Contains("log") && !code.Contains("Log"))
            {
                improvements.Add("Add logging to track errors and exceptions");
            }
        }
        else if (improvementType == "maintainability")
        {
            // Check for magic numbers
            if (Regex.IsMatch(code, @"\b[0-9]+\b") && !code.Contains("const"))
            {
                improvements.Add("Replace magic numbers with named constants for better readability");
            }
            
            // Check for long methods
            var methodCount = Regex.Matches(code, @"public|private|protected|internal").Count;
            var lineCount = code.Split('\n').Length;
            if (methodCount > 0 && lineCount / methodCount > 30)
            {
                improvements.Add("Break down long methods into smaller, more focused methods");
            }
            
            // Check for missing comments
            if (!code.Contains("///") && !code.Contains("//"))
            {
                improvements.Add("Add XML documentation to public members for better code understanding");
            }
            
            // Check for duplicate code
            if (code.Contains("{") && code.Contains("}"))
            {
                improvements.Add("Extract duplicated code into reusable methods");
            }
            
            // Check for poor naming
            if (code.Contains("var x") || code.Contains("var y") || code.Contains("var z") || 
                code.Contains("var i") || code.Contains("var j") || code.Contains("var k"))
            {
                improvements.Add("Improve variable naming for better readability");
            }
        }
        
        // Add general improvements
        improvements.Add("Implement proper error handling with try-catch blocks");
        improvements.Add("Add comprehensive logging for better debugging");
        improvements.Add("Improve code organization and structure");
        
        // Return the improvements
        return string.Join("\n", improvements.Select(i => $"- {i}"));
    }
}

// Define the action
ACTION generate {
    function: "generate_improvements"
    input: "${issue},${code}"
}
