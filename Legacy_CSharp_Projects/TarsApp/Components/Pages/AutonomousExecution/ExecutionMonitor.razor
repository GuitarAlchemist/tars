@using TarsEngine.Models
@using TarsApp.Models
@using TarsApp.Services.Interfaces
@using TarsApp.ViewModels

// Use alias to avoid ambiguity
@using MsLogLevel = Microsoft.Extensions.Logging.LogLevel
@inject IExecutionPlannerService ExecutionPlannerService
@inject ILogger<ExecutionMonitor> Logger
@implements IDisposable

<MudGrid>
    <MudItem xs="12">
        <MudCard Elevation="0">
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="12">
                        <MudText Typo="Typo.h6">Execution Progress</MudText>
                        <MudProgressLinear Value="@(progress * 100)" Color="@progressColor" Class="my-4" Size="Size.Large">
                            <MudText Typo="Typo.body1">@($"{progress * 100:F0}%")</MudText>
                        </MudProgressLinear>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudField Label="Status" Variant="Variant.Outlined">
                            <MudChip T="string" Color="@statusColor" Size="Size.Small">@status</MudChip>
                        </MudField>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudField Label="Duration" Variant="Variant.Outlined">@duration</MudField>
                    </MudItem>
                    <MudItem xs="12">
                        <MudField Label="Current Step" Variant="Variant.Outlined">@currentStep</MudField>
                    </MudItem>
                </MudGrid>
            </MudCardContent>
        </MudCard>
    </MudItem>

    <MudItem xs="12">
        <MudCard Elevation="0">
            <MudCardContent>
                <MudText Typo="Typo.h6" Class="mb-4">Execution Logs</MudText>
                <MudPaper Class="pa-4" Style="max-height: 300px; overflow-y: auto; background-color: #1e1e1e;">
                    @foreach (var log in logs)
                    {
                        <MudText Style="@GetLogStyle(log)">[@log.Timestamp.ToString("HH:mm:ss")] [@log.LogLevel] @log.Message</MudText>
                    }
                </MudPaper>
            </MudCardContent>
        </MudCard>
    </MudItem>

    @if (errors.Count > 0)
    {
        <MudItem xs="12">
            <MudCard Elevation="0">
                <MudCardContent>
                    <MudText Typo="Typo.h6" Class="mb-4" Color="Color.Error">Errors</MudText>
                    <MudList T="ErrorInfo" Dense="true">
                        @foreach (var error in errors)
                        {
                            <MudListItem Icon="@Icons.Material.Filled.Error" IconColor="Color.Error">
                                @error.Message
                            </MudListItem>
                        }
                    </MudList>
                </MudCardContent>
            </MudCard>
        </MudItem>
    }

    @if (modifiedFiles.Count > 0 || createdFiles.Count > 0 || deletedFiles.Count > 0)
    {
        <MudItem xs="12">
            <MudCard Elevation="0">
                <MudCardContent>
                    <MudText Typo="Typo.h6" Class="mb-4">Changed Files</MudText>
                    <MudTabs Elevation="0" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-0">
                        @if (modifiedFiles.Count > 0)
                        {
                            <MudTabPanel Text="Modified" Icon="@Icons.Material.Filled.Edit">
                                <MudList T="string" Dense="true">
                                    @foreach (var file in modifiedFiles)
                                    {
                                        <MudListItem Icon="@Icons.Material.Filled.Edit" IconColor="Color.Warning">
                                            @file
                                        </MudListItem>
                                    }
                                </MudList>
                            </MudTabPanel>
                        }
                        @if (createdFiles.Count > 0)
                        {
                            <MudTabPanel Text="Created" Icon="@Icons.Material.Filled.Add">
                                <MudList T="string" Dense="true">
                                    @foreach (var file in createdFiles)
                                    {
                                        <MudListItem Icon="@Icons.Material.Filled.Add" IconColor="Color.Success">
                                            @file
                                        </MudListItem>
                                    }
                                </MudList>
                            </MudTabPanel>
                        }
                        @if (deletedFiles.Count > 0)
                        {
                            <MudTabPanel Text="Deleted" Icon="@Icons.Material.Filled.Delete">
                                <MudList T="string" Dense="true">
                                    @foreach (var file in deletedFiles)
                                    {
                                        <MudListItem Icon="@Icons.Material.Filled.Delete" IconColor="Color.Error">
                                            @file
                                        </MudListItem>
                                    }
                                </MudList>
                            </MudTabPanel>
                        }
                    </MudTabs>
                </MudCardContent>
            </MudCard>
        </MudItem>
    }
</MudGrid>

@code {
    [Parameter]
    public string ContextId { get; set; } = string.Empty;

    private double progress = 0.0;
    private string status = "Initializing";
    private Color statusColor = Color.Default;
    private Color progressColor = Color.Info;
    private string duration = "0m";
    private string currentStep = "Initializing";
    private List<LogEntryViewModel> logs = new();
    private List<ErrorInfo> errors = new();
    private List<string> modifiedFiles = new();
    private List<string> createdFiles = new();
    private List<string> deletedFiles = new();
    private Timer? timer;
    private DateTime startTime;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        startTime = DateTime.UtcNow;

        // Start monitoring
        timer = new Timer(async _ => await UpdateStatusAsync(), null, 0, 1000);
    }

    private async Task UpdateStatusAsync()
    {
            await Task.Delay(1); // Added to satisfy compiler warning CS1998
        try
        {
            // In a real implementation, this would get the execution context from the service
            // For now, simulate progress
            var context = await GetExecutionContextAsync();

            if (context != null)
            {
                // Update progress
                progress = context.GetMetric("Progress", 0.0);

                // Update status
                var completed = context.GetState<bool>("Completed", false);
                var success = context.GetState<bool>("Success", false);

                if (completed)
                {
                    if (success)
                    {
                        status = "Completed";
                        statusColor = Color.Success;
                        progressColor = Color.Success;
                    }
                    else
                    {
                        status = "Failed";
                        statusColor = Color.Error;
                        progressColor = Color.Error;
                    }

                    // Stop timer
                    timer?.Change(Timeout.Infinite, Timeout.Infinite);
                }
                else
                {
                    status = "In Progress";
                    statusColor = Color.Info;
                    progressColor = Color.Info;
                }

                // Update duration
                var completedAt = context.GetState<DateTime?>("CompletedAt");
                if (completedAt != null)
                {
                    var durationTime = completedAt.Value - context.CreatedAt;
                    duration = $"{durationTime.TotalMinutes:F0}m";
                }
                else
                {
                    var durationTime = DateTime.UtcNow - context.CreatedAt;
                    duration = $"{durationTime.TotalMinutes:F0}m (ongoing)";
                }

                // Update current step
                currentStep = context.GetState<string>("CurrentStep", "Initializing");

                // Update logs
                logs = context.Logs.OrderByDescending(l => l.Timestamp).Take(100).ToList()
                    .Select(log => new LogEntryViewModel
                    {
                        Timestamp = log.Timestamp,
                        LogLevel = ConvertToMsLogLevel(log.Level),
                        Message = log.Message,
                        Source = log.Source ?? "System"
                    }).ToList();

                // Update errors
                errors = ModelConverters.ConvertToErrorInfos(context.Errors.OrderByDescending(e => e.Timestamp).ToList());

                // Update files
                modifiedFiles = context.ModifiedFiles;
                createdFiles = context.CreatedFiles;
                deletedFiles = context.DeletedFiles;
            }

            // Trigger UI update
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error updating execution status");
        }
    }

    private async Task<ExecutionContext?> GetExecutionContextAsync()
    {
        // In a real implementation, this would get the execution context from the service
        // For now, return a mock context
        await Task.Delay(1); // Added to satisfy compiler warning CS1998

        // Simulate progress over time
        var elapsed = (DateTime.UtcNow - startTime).TotalSeconds;
        var simulatedProgress = Math.Min(1.0, elapsed / 30.0); // Complete in 30 seconds
        var completed = simulatedProgress >= 1.0;

        var context = new ExecutionContext
        {
            Id = ContextId,
            ExecutionPlanId = "PLAN-123",
            ImprovementId = "IMP-456",
            Mode = ExecutionMode.Real,
            Environment = ExecutionEnvironment.Development,
            CreatedAt = startTime,
            Metrics = new Dictionary<string, double> { { "Progress", simulatedProgress } },
            State = new Dictionary<string, object>
            {
                { "Completed", completed },
                { "Success", completed },
                { "CurrentStep", GetStepForProgress(simulatedProgress) }
            }
        };

        // Add logs
        for (var i = 0; i < Math.Ceiling(simulatedProgress * 20); i++)
        {
            // Create an ExecutionLog directly
            var executionLog = new ExecutionLog
            {
                Timestamp = startTime.AddSeconds(i * 1.5),
                Level = i % 5 == 0 ? LogLevel.Warning : LogLevel.Information,
                Message = $"Executing step {i + 1}: {GetStepForProgress((i + 1) / 20.0)}",
                Source = "System"
            };

            context.Logs.Add(executionLog);
        }

        // Add files based on progress
        if (simulatedProgress >= 0.3)
        {
            context.ModifiedFiles.Add("src/Services/AuthService.cs");
        }

        if (simulatedProgress >= 0.5)
        {
            context.ModifiedFiles.Add("src/Controllers/AuthController.cs");
        }

        if (simulatedProgress >= 0.7)
        {
            context.CreatedFiles.Add("src/Models/AuthResponse.cs");
        }

        if (simulatedProgress >= 0.9)
        {
            context.DeletedFiles.Add("src/Models/OldAuthResponse.cs");
        }

        // Add completion info
        if (completed)
        {
            context.State["CompletedAt"] = DateTime.UtcNow;
        }

        return context;
    }

    private string GetStepForProgress(double progress)
    {
        if (progress < 0.2)
            return "Analyzing code";
        else if (progress < 0.4)
            return "Creating execution plan";
        else if (progress < 0.6)
            return "Modifying files";
        else if (progress < 0.8)
            return "Running tests";
        else
            return "Finalizing changes";
    }

    private string GetLogStyle(LogEntryViewModel log)
    {
        var color = log.LogLevel switch
        {
            MsLogLevel.Error => "#ff5252",
            MsLogLevel.Warning => "#fb8c00",
            MsLogLevel.Information => "#2196f3",
            MsLogLevel.Debug => "#757575",
            _ => "#ffffff"
        };

        return $"color: {color}; font-family: monospace; white-space: pre-wrap;";
    }

    private MsLogLevel ConvertToMsLogLevel(LogLevel level)
    {
        return level switch
        {
            LogLevel.Trace => MsLogLevel.Trace,
            LogLevel.Debug => MsLogLevel.Debug,
            LogLevel.Information => MsLogLevel.Information,
            LogLevel.Warning => MsLogLevel.Warning,
            LogLevel.Error => MsLogLevel.Error,
            LogLevel.Critical => MsLogLevel.Critical,
            _ => MsLogLevel.None
        };
    }

    public void Dispose()
    {
        timer?.Dispose();
    }
}

