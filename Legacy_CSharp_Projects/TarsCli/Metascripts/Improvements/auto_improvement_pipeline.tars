DESCRIBE {
    name: "Auto-Improvement Pipeline"
    version: "1.0"
    author: "TARS Auto-Improvement"
    description: "Runs the complete auto-improvement pipeline: analysis, fix generation, and fix application"
    tags: ["pipeline", "auto-improvement", "code-quality"]
}

CONFIG {
    model: "llama3"
    temperature: 0.1
    max_tokens: 2000
    backup_before_changes: true
}

// Define the paths to the metascripts
VARIABLE metascript_paths {
    value: {
        analyzer: "TarsCli/Metascripts/Improvements/code_quality_analyzer.tars",
        generator: "TarsCli/Metascripts/Improvements/code_fix_generator.tars",
        applicator: "TarsCli/Metascripts/Improvements/code_fix_applicator.tars"
    }
}

// Define the output paths
VARIABLE output_paths {
    value: {
        analysis_results: "code_quality_analysis_results.json",
        analysis_report: "code_quality_analysis_report.md",
        fixes_results: "code_quality_fixes.json",
        fixes_report: "code_fix_generation_report.md",
        application_results: "code_fix_application_results.json",
        application_report: "code_fix_application_report.md",
        summary_report: "auto_improvement_summary_report.md"
    }
}

// Initialize the pipeline results
VARIABLE pipeline_results {
    value: {
        pipeline_start_time: "${new Date().toISOString()}",
        pipeline_end_time: null,
        analysis_results: null,
        fixes_results: null,
        application_results: null
    }
}

// Log the start of the pipeline
ACTION {
    type: "log"
    message: "Starting auto-improvement pipeline"
}

// Step 1: Run the code quality analyzer
ACTION {
    type: "log"
    message: "Step 1: Running code quality analyzer"
}

ACTION {
    type: "file_read"
    path: "${metascript_paths.analyzer}"
    result_variable: "analyzer_content"
}

EVAL {
    code: "${analyzer_content}"
    result_variable: "analysis_results"
}

// Update the pipeline results with the analysis results
VARIABLE pipeline_results {
    value: {
        ...pipeline_results,
        analysis_results: "${analysis_results}"
    }
}

ACTION {
    type: "log"
    message: "Analysis completed. Found ${analysis_results.issues_found} issues in ${analysis_results.files_scanned} files."
}

// Step 2: Run the code fix generator
ACTION {
    type: "log"
    message: "Step 2: Running code fix generator"
}

ACTION {
    type: "file_read"
    path: "${metascript_paths.generator}"
    result_variable: "generator_content"
}

EVAL {
    code: "${generator_content}"
    result_variable: "fixes_results"
}

// Update the pipeline results with the fixes results
VARIABLE pipeline_results {
    value: {
        ...pipeline_results,
        fixes_results: "${fixes_results}"
    }
}

ACTION {
    type: "log"
    message: "Fix generation completed. Generated ${fixes_results.fixes_generated} fixes for ${fixes_results.issues_processed} issues."
}

// Step 3: Run the code fix applicator
ACTION {
    type: "log"
    message: "Step 3: Running code fix applicator"
}

ACTION {
    type: "file_read"
    path: "${metascript_paths.applicator}"
    result_variable: "applicator_content"
}

EVAL {
    code: "${applicator_content}"
    result_variable: "application_results"
}

// Update the pipeline results with the application results
VARIABLE pipeline_results {
    value: {
        ...pipeline_results,
        application_results: "${application_results}",
        pipeline_end_time: "${new Date().toISOString()}"
    }
}

ACTION {
    type: "log"
    message: "Fix application completed. Applied ${application_results.fixes_applied} fixes out of ${application_results.fixes_processed} processed."
}

// Generate a summary report
VARIABLE summary_report {
    value: """# Auto-Improvement Pipeline Summary Report

## Overview
- **Pipeline Start Time**: ${pipeline_results.pipeline_start_time}
- **Pipeline End Time**: ${pipeline_results.pipeline_end_time}
- **Total Duration**: ${((new Date(pipeline_results.pipeline_end_time) - new Date(pipeline_results.pipeline_start_time)) / 1000 / 60).toFixed(2)} minutes

## Analysis Phase
- **Files Scanned**: ${pipeline_results.analysis_results.files_scanned}
- **Issues Found**: ${pipeline_results.analysis_results.issues_found}
- **Issues by Category**:
${Object.entries(pipeline_results.analysis_results.issues_by_category).map(([category, count]) => `  - ${category}: ${count}`).join('\n')}

## Fix Generation Phase
- **Issues Processed**: ${pipeline_results.fixes_results.issues_processed}
- **Fixes Generated**: ${pipeline_results.fixes_results.fixes_generated}
- **Success Rate**: ${(pipeline_results.fixes_results.fixes_generated / pipeline_results.fixes_results.issues_processed * 100).toFixed(2)}%
- **Fixes by Category**:
${Object.entries(pipeline_results.fixes_results.fixes_by_category).map(([category, count]) => `  - ${category}: ${count}`).join('\n')}

## Fix Application Phase
- **Fixes Processed**: ${pipeline_results.application_results.fixes_processed}
- **Fixes Applied**: ${pipeline_results.application_results.fixes_applied}
- **Success Rate**: ${(pipeline_results.application_results.fixes_applied / pipeline_results.application_results.fixes_processed * 100).toFixed(2)}%
- **Fixes by Category**:
${Object.entries(pipeline_results.application_results.fixes_by_category).map(([category, count]) => `  - ${category}: ${count}`).join('\n')}

## End-to-End Metrics
- **Issues Found**: ${pipeline_results.analysis_results.issues_found}
- **Issues Fixed**: ${pipeline_results.application_results.fixes_applied}
- **Overall Success Rate**: ${(pipeline_results.application_results.fixes_applied / pipeline_results.analysis_results.issues_found * 100).toFixed(2)}%

## Detailed Reports
- [Analysis Report](${output_paths.analysis_report})
- [Fix Generation Report](${output_paths.fixes_report})
- [Fix Application Report](${output_paths.application_report})
"""
}

// Save the summary report
ACTION {
    type: "file_write"
    path: "${output_paths.summary_report}"
    content: "${summary_report}"
}

ACTION {
    type: "log"
    message: "Summary report saved to ${output_paths.summary_report}"
}

// Log the completion of the pipeline
ACTION {
    type: "log"
    message: "Auto-improvement pipeline completed successfully"
}

ACTION {
    type: "log"
    message: "End-to-End Metrics:"
}

ACTION {
    type: "log"
    message: "- Issues Found: ${pipeline_results.analysis_results.issues_found}"
}

ACTION {
    type: "log"
    message: "- Issues Fixed: ${pipeline_results.application_results.fixes_applied}"
}

ACTION {
    type: "log"
    message: "- Overall Success Rate: ${(pipeline_results.application_results.fixes_applied / pipeline_results.analysis_results.issues_found * 100).toFixed(2)}%"
}

// Return the pipeline results
RETURN {
    value: "${pipeline_results}"
}
